// Code generated by ent, DO NOT EDIT.

package ent

import (
	"esh2n/grapevineer/ent/bo"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Bo is the model entity for the Bo schema.
type Bo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Script holds the value of the "script" field.
	Script       string `json:"script,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bo.FieldID, bo.FieldScript:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bo fields.
func (b *Bo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = value.String
			}
		case bo.FieldScript:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value.Valid {
				b.Script = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bo.
// This includes values selected through modifiers, order, etc.
func (b *Bo) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Bo.
// Note that you need to call Bo.Unwrap() before calling this method if this Bo
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bo) Update() *BoUpdateOne {
	return NewBoClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bo) Unwrap() *Bo {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bo is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bo) String() string {
	var builder strings.Builder
	builder.WriteString("Bo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("script=")
	builder.WriteString(b.Script)
	builder.WriteByte(')')
	return builder.String()
}

// Bos is a parsable slice of Bo.
type Bos []*Bo
