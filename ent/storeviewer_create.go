// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"esh2n/grapevineer/ent/storeviewer"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreViewerCreate is the builder for creating a StoreViewer entity.
type StoreViewerCreate struct {
	config
	mutation *StoreViewerMutation
	hooks    []Hook
}

// SetPlayerID sets the "player_id" field.
func (svc *StoreViewerCreate) SetPlayerID(s string) *StoreViewerCreate {
	svc.mutation.SetPlayerID(s)
	return svc
}

// SetToken sets the "token" field.
func (svc *StoreViewerCreate) SetToken(s string) *StoreViewerCreate {
	svc.mutation.SetToken(s)
	return svc
}

// SetDiscordID sets the "discord_id" field.
func (svc *StoreViewerCreate) SetDiscordID(s string) *StoreViewerCreate {
	svc.mutation.SetDiscordID(s)
	return svc
}

// SetID sets the "id" field.
func (svc *StoreViewerCreate) SetID(s string) *StoreViewerCreate {
	svc.mutation.SetID(s)
	return svc
}

// Mutation returns the StoreViewerMutation object of the builder.
func (svc *StoreViewerCreate) Mutation() *StoreViewerMutation {
	return svc.mutation
}

// Save creates the StoreViewer in the database.
func (svc *StoreViewerCreate) Save(ctx context.Context) (*StoreViewer, error) {
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *StoreViewerCreate) SaveX(ctx context.Context) *StoreViewer {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *StoreViewerCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *StoreViewerCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *StoreViewerCreate) check() error {
	if _, ok := svc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "StoreViewer.player_id"`)}
	}
	if v, ok := svc.mutation.PlayerID(); ok {
		if err := storeviewer.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "player_id", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.player_id": %w`, err)}
		}
	}
	if _, ok := svc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "StoreViewer.token"`)}
	}
	if v, ok := svc.mutation.Token(); ok {
		if err := storeviewer.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.token": %w`, err)}
		}
	}
	if _, ok := svc.mutation.DiscordID(); !ok {
		return &ValidationError{Name: "discord_id", err: errors.New(`ent: missing required field "StoreViewer.discord_id"`)}
	}
	if v, ok := svc.mutation.DiscordID(); ok {
		if err := storeviewer.DiscordIDValidator(v); err != nil {
			return &ValidationError{Name: "discord_id", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.discord_id": %w`, err)}
		}
	}
	return nil
}

func (svc *StoreViewerCreate) sqlSave(ctx context.Context) (*StoreViewer, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected StoreViewer.ID type: %T", _spec.ID.Value)
		}
	}
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *StoreViewerCreate) createSpec() (*StoreViewer, *sqlgraph.CreateSpec) {
	var (
		_node = &StoreViewer{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(storeviewer.Table, sqlgraph.NewFieldSpec(storeviewer.FieldID, field.TypeString))
	)
	if id, ok := svc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := svc.mutation.PlayerID(); ok {
		_spec.SetField(storeviewer.FieldPlayerID, field.TypeString, value)
		_node.PlayerID = value
	}
	if value, ok := svc.mutation.Token(); ok {
		_spec.SetField(storeviewer.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := svc.mutation.DiscordID(); ok {
		_spec.SetField(storeviewer.FieldDiscordID, field.TypeString, value)
		_node.DiscordID = value
	}
	return _node, _spec
}

// StoreViewerCreateBulk is the builder for creating many StoreViewer entities in bulk.
type StoreViewerCreateBulk struct {
	config
	builders []*StoreViewerCreate
}

// Save creates the StoreViewer entities in the database.
func (svcb *StoreViewerCreateBulk) Save(ctx context.Context) ([]*StoreViewer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*StoreViewer, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreViewerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *StoreViewerCreateBulk) SaveX(ctx context.Context) []*StoreViewer {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *StoreViewerCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *StoreViewerCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
