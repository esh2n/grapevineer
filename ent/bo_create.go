// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"esh2n/grapevineer/ent/bo"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BoCreate is the builder for creating a Bo entity.
type BoCreate struct {
	config
	mutation *BoMutation
	hooks    []Hook
}

// SetScript sets the "script" field.
func (bc *BoCreate) SetScript(s string) *BoCreate {
	bc.mutation.SetScript(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BoCreate) SetID(s string) *BoCreate {
	bc.mutation.SetID(s)
	return bc
}

// Mutation returns the BoMutation object of the builder.
func (bc *BoCreate) Mutation() *BoMutation {
	return bc.mutation
}

// Save creates the Bo in the database.
func (bc *BoCreate) Save(ctx context.Context) (*Bo, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BoCreate) SaveX(ctx context.Context) *Bo {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BoCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BoCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BoCreate) check() error {
	if _, ok := bc.mutation.Script(); !ok {
		return &ValidationError{Name: "script", err: errors.New(`ent: missing required field "Bo.script"`)}
	}
	if v, ok := bc.mutation.Script(); ok {
		if err := bo.ScriptValidator(v); err != nil {
			return &ValidationError{Name: "script", err: fmt.Errorf(`ent: validator failed for field "Bo.script": %w`, err)}
		}
	}
	return nil
}

func (bc *BoCreate) sqlSave(ctx context.Context) (*Bo, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Bo.ID type: %T", _spec.ID.Value)
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BoCreate) createSpec() (*Bo, *sqlgraph.CreateSpec) {
	var (
		_node = &Bo{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bo.Table, sqlgraph.NewFieldSpec(bo.FieldID, field.TypeString))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Script(); ok {
		_spec.SetField(bo.FieldScript, field.TypeString, value)
		_node.Script = value
	}
	return _node, _spec
}

// BoCreateBulk is the builder for creating many Bo entities in bulk.
type BoCreateBulk struct {
	config
	builders []*BoCreate
}

// Save creates the Bo entities in the database.
func (bcb *BoCreateBulk) Save(ctx context.Context) ([]*Bo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bo, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BoCreateBulk) SaveX(ctx context.Context) []*Bo {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BoCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BoCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
