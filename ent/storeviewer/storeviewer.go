// Code generated by ent, DO NOT EDIT.

package storeviewer

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the storeviewer type in the database.
	Label = "store_viewer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "player_id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldDiscordID holds the string denoting the discord_id field in the database.
	FieldDiscordID = "discord_id"
	// Table holds the table name of the storeviewer in the database.
	Table = "store_viewers"
)

// Columns holds all SQL columns for storeviewer fields.
var Columns = []string{
	FieldID,
	FieldPlayerID,
	FieldToken,
	FieldDiscordID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PlayerIDValidator is a validator for the "player_id" field. It is called by the builders before save.
	PlayerIDValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// DiscordIDValidator is a validator for the "discord_id" field. It is called by the builders before save.
	DiscordIDValidator func(string) error
)

// OrderOption defines the ordering options for the StoreViewer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlayerID orders the results by the player_id field.
func ByPlayerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayerID, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByDiscordID orders the results by the discord_id field.
func ByDiscordID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordID, opts...).ToFunc()
}
