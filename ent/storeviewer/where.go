// Code generated by ent, DO NOT EDIT.

package storeviewer

import (
	"esh2n/grapevineer/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContainsFold(FieldID, id))
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldPlayerID, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldToken, v))
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldDiscordID, v))
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNotIn(FieldPlayerID, vs...))
}

// PlayerIDGT applies the GT predicate on the "player_id" field.
func PlayerIDGT(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGT(FieldPlayerID, v))
}

// PlayerIDGTE applies the GTE predicate on the "player_id" field.
func PlayerIDGTE(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGTE(FieldPlayerID, v))
}

// PlayerIDLT applies the LT predicate on the "player_id" field.
func PlayerIDLT(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLT(FieldPlayerID, v))
}

// PlayerIDLTE applies the LTE predicate on the "player_id" field.
func PlayerIDLTE(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLTE(FieldPlayerID, v))
}

// PlayerIDContains applies the Contains predicate on the "player_id" field.
func PlayerIDContains(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContains(FieldPlayerID, v))
}

// PlayerIDHasPrefix applies the HasPrefix predicate on the "player_id" field.
func PlayerIDHasPrefix(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldHasPrefix(FieldPlayerID, v))
}

// PlayerIDHasSuffix applies the HasSuffix predicate on the "player_id" field.
func PlayerIDHasSuffix(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldHasSuffix(FieldPlayerID, v))
}

// PlayerIDEqualFold applies the EqualFold predicate on the "player_id" field.
func PlayerIDEqualFold(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEqualFold(FieldPlayerID, v))
}

// PlayerIDContainsFold applies the ContainsFold predicate on the "player_id" field.
func PlayerIDContainsFold(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContainsFold(FieldPlayerID, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContainsFold(FieldToken, v))
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEQ(FieldDiscordID, v))
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNEQ(FieldDiscordID, v))
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldIn(FieldDiscordID, vs...))
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldNotIn(FieldDiscordID, vs...))
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGT(FieldDiscordID, v))
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldGTE(FieldDiscordID, v))
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLT(FieldDiscordID, v))
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldLTE(FieldDiscordID, v))
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContains(FieldDiscordID, v))
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldHasPrefix(FieldDiscordID, v))
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldHasSuffix(FieldDiscordID, v))
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldEqualFold(FieldDiscordID, v))
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.StoreViewer {
	return predicate.StoreViewer(sql.FieldContainsFold(FieldDiscordID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StoreViewer) predicate.StoreViewer {
	return predicate.StoreViewer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StoreViewer) predicate.StoreViewer {
	return predicate.StoreViewer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StoreViewer) predicate.StoreViewer {
	return predicate.StoreViewer(func(s *sql.Selector) {
		p(s.Not())
	})
}
