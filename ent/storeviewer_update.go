// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"esh2n/grapevineer/ent/predicate"
	"esh2n/grapevineer/ent/storeviewer"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreViewerUpdate is the builder for updating StoreViewer entities.
type StoreViewerUpdate struct {
	config
	hooks    []Hook
	mutation *StoreViewerMutation
}

// Where appends a list predicates to the StoreViewerUpdate builder.
func (svu *StoreViewerUpdate) Where(ps ...predicate.StoreViewer) *StoreViewerUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetPlayerID sets the "player_id" field.
func (svu *StoreViewerUpdate) SetPlayerID(s string) *StoreViewerUpdate {
	svu.mutation.SetPlayerID(s)
	return svu
}

// SetToken sets the "token" field.
func (svu *StoreViewerUpdate) SetToken(s string) *StoreViewerUpdate {
	svu.mutation.SetToken(s)
	return svu
}

// SetDiscordID sets the "discord_id" field.
func (svu *StoreViewerUpdate) SetDiscordID(s string) *StoreViewerUpdate {
	svu.mutation.SetDiscordID(s)
	return svu
}

// Mutation returns the StoreViewerMutation object of the builder.
func (svu *StoreViewerUpdate) Mutation() *StoreViewerMutation {
	return svu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *StoreViewerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *StoreViewerUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *StoreViewerUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *StoreViewerUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *StoreViewerUpdate) check() error {
	if v, ok := svu.mutation.PlayerID(); ok {
		if err := storeviewer.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "player_id", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.player_id": %w`, err)}
		}
	}
	if v, ok := svu.mutation.Token(); ok {
		if err := storeviewer.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.token": %w`, err)}
		}
	}
	if v, ok := svu.mutation.DiscordID(); ok {
		if err := storeviewer.DiscordIDValidator(v); err != nil {
			return &ValidationError{Name: "discord_id", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.discord_id": %w`, err)}
		}
	}
	return nil
}

func (svu *StoreViewerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storeviewer.Table, storeviewer.Columns, sqlgraph.NewFieldSpec(storeviewer.FieldID, field.TypeString))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.PlayerID(); ok {
		_spec.SetField(storeviewer.FieldPlayerID, field.TypeString, value)
	}
	if value, ok := svu.mutation.Token(); ok {
		_spec.SetField(storeviewer.FieldToken, field.TypeString, value)
	}
	if value, ok := svu.mutation.DiscordID(); ok {
		_spec.SetField(storeviewer.FieldDiscordID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storeviewer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// StoreViewerUpdateOne is the builder for updating a single StoreViewer entity.
type StoreViewerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreViewerMutation
}

// SetPlayerID sets the "player_id" field.
func (svuo *StoreViewerUpdateOne) SetPlayerID(s string) *StoreViewerUpdateOne {
	svuo.mutation.SetPlayerID(s)
	return svuo
}

// SetToken sets the "token" field.
func (svuo *StoreViewerUpdateOne) SetToken(s string) *StoreViewerUpdateOne {
	svuo.mutation.SetToken(s)
	return svuo
}

// SetDiscordID sets the "discord_id" field.
func (svuo *StoreViewerUpdateOne) SetDiscordID(s string) *StoreViewerUpdateOne {
	svuo.mutation.SetDiscordID(s)
	return svuo
}

// Mutation returns the StoreViewerMutation object of the builder.
func (svuo *StoreViewerUpdateOne) Mutation() *StoreViewerMutation {
	return svuo.mutation
}

// Where appends a list predicates to the StoreViewerUpdate builder.
func (svuo *StoreViewerUpdateOne) Where(ps ...predicate.StoreViewer) *StoreViewerUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *StoreViewerUpdateOne) Select(field string, fields ...string) *StoreViewerUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated StoreViewer entity.
func (svuo *StoreViewerUpdateOne) Save(ctx context.Context) (*StoreViewer, error) {
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *StoreViewerUpdateOne) SaveX(ctx context.Context) *StoreViewer {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *StoreViewerUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *StoreViewerUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *StoreViewerUpdateOne) check() error {
	if v, ok := svuo.mutation.PlayerID(); ok {
		if err := storeviewer.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "player_id", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.player_id": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.Token(); ok {
		if err := storeviewer.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.token": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.DiscordID(); ok {
		if err := storeviewer.DiscordIDValidator(v); err != nil {
			return &ValidationError{Name: "discord_id", err: fmt.Errorf(`ent: validator failed for field "StoreViewer.discord_id": %w`, err)}
		}
	}
	return nil
}

func (svuo *StoreViewerUpdateOne) sqlSave(ctx context.Context) (_node *StoreViewer, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storeviewer.Table, storeviewer.Columns, sqlgraph.NewFieldSpec(storeviewer.FieldID, field.TypeString))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StoreViewer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storeviewer.FieldID)
		for _, f := range fields {
			if !storeviewer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storeviewer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.PlayerID(); ok {
		_spec.SetField(storeviewer.FieldPlayerID, field.TypeString, value)
	}
	if value, ok := svuo.mutation.Token(); ok {
		_spec.SetField(storeviewer.FieldToken, field.TypeString, value)
	}
	if value, ok := svuo.mutation.DiscordID(); ok {
		_spec.SetField(storeviewer.FieldDiscordID, field.TypeString, value)
	}
	_node = &StoreViewer{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storeviewer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
