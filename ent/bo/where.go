// Code generated by ent, DO NOT EDIT.

package bo

import (
	"esh2n/grapevineer/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Bo {
	return predicate.Bo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Bo {
	return predicate.Bo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Bo {
	return predicate.Bo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Bo {
	return predicate.Bo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Bo {
	return predicate.Bo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Bo {
	return predicate.Bo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Bo {
	return predicate.Bo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Bo {
	return predicate.Bo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Bo {
	return predicate.Bo(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Bo {
	return predicate.Bo(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Bo {
	return predicate.Bo(sql.FieldContainsFold(FieldID, id))
}

// Script applies equality check predicate on the "script" field. It's identical to ScriptEQ.
func Script(v string) predicate.Bo {
	return predicate.Bo(sql.FieldEQ(FieldScript, v))
}

// ScriptEQ applies the EQ predicate on the "script" field.
func ScriptEQ(v string) predicate.Bo {
	return predicate.Bo(sql.FieldEQ(FieldScript, v))
}

// ScriptNEQ applies the NEQ predicate on the "script" field.
func ScriptNEQ(v string) predicate.Bo {
	return predicate.Bo(sql.FieldNEQ(FieldScript, v))
}

// ScriptIn applies the In predicate on the "script" field.
func ScriptIn(vs ...string) predicate.Bo {
	return predicate.Bo(sql.FieldIn(FieldScript, vs...))
}

// ScriptNotIn applies the NotIn predicate on the "script" field.
func ScriptNotIn(vs ...string) predicate.Bo {
	return predicate.Bo(sql.FieldNotIn(FieldScript, vs...))
}

// ScriptGT applies the GT predicate on the "script" field.
func ScriptGT(v string) predicate.Bo {
	return predicate.Bo(sql.FieldGT(FieldScript, v))
}

// ScriptGTE applies the GTE predicate on the "script" field.
func ScriptGTE(v string) predicate.Bo {
	return predicate.Bo(sql.FieldGTE(FieldScript, v))
}

// ScriptLT applies the LT predicate on the "script" field.
func ScriptLT(v string) predicate.Bo {
	return predicate.Bo(sql.FieldLT(FieldScript, v))
}

// ScriptLTE applies the LTE predicate on the "script" field.
func ScriptLTE(v string) predicate.Bo {
	return predicate.Bo(sql.FieldLTE(FieldScript, v))
}

// ScriptContains applies the Contains predicate on the "script" field.
func ScriptContains(v string) predicate.Bo {
	return predicate.Bo(sql.FieldContains(FieldScript, v))
}

// ScriptHasPrefix applies the HasPrefix predicate on the "script" field.
func ScriptHasPrefix(v string) predicate.Bo {
	return predicate.Bo(sql.FieldHasPrefix(FieldScript, v))
}

// ScriptHasSuffix applies the HasSuffix predicate on the "script" field.
func ScriptHasSuffix(v string) predicate.Bo {
	return predicate.Bo(sql.FieldHasSuffix(FieldScript, v))
}

// ScriptEqualFold applies the EqualFold predicate on the "script" field.
func ScriptEqualFold(v string) predicate.Bo {
	return predicate.Bo(sql.FieldEqualFold(FieldScript, v))
}

// ScriptContainsFold applies the ContainsFold predicate on the "script" field.
func ScriptContainsFold(v string) predicate.Bo {
	return predicate.Bo(sql.FieldContainsFold(FieldScript, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bo) predicate.Bo {
	return predicate.Bo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bo) predicate.Bo {
	return predicate.Bo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bo) predicate.Bo {
	return predicate.Bo(func(s *sql.Selector) {
		p(s.Not())
	})
}
