{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9","program":"/Users/es/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","prost_build","--edition=2021","/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"format\"","--cfg","feature=\"prettyplease\"","--cfg","feature=\"syn\"","-C","metadata=7de9be0669a2f854","-C","extra-filename=-7de9be0669a2f854","--out-dir","/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps","-L","dependency=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps","--extern","bytes=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libbytes-e80fde13cfdaa1ed.rmeta","--extern","heck=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libheck-f625b8b0079b9112.rmeta","--extern","itertools=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libitertools-62df9ff0516c6bcb.rmeta","--extern","lazy_static=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/liblazy_static-d737a969705ac34d.rmeta","--extern","log=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/liblog-0835c1843c37d29d.rmeta","--extern","multimap=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libmultimap-dfd4693a7d8eb854.rmeta","--extern","petgraph=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libpetgraph-22c770ed93456e87.rmeta","--extern","prettyplease=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libprettyplease-011efae0ea852e5c.rmeta","--extern","prost=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libprost-1f3cf5eeb9f35abb.rmeta","--extern","prost_types=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libprost_types-bf40f1057c3d5a08.rmeta","--extern","regex=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libregex-490a749ca3928bb6.rmeta","--extern","syn=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libsyn-51477775c022a798.rmeta","--extern","tempfile=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libtempfile-0b9ca227d8bdd689.rmeta","--extern","which=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libwhich-57db8343b407f122.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/es/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libprost_build-7de9be0669a2f854.rmeta"},"prelude":{"crate_id":{"name":"prost_build","disambiguator":[16256870405236833695,0]},"crate_root":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src","external_crates":[{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16128539464339909492,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5119190964148522055,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10836880961308110442,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9122960886372739080,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16262469955255852816,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6458319553461162962,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12001007181761242293,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17631836945948346775,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[14397519445266417684,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8668729914222175237,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6081650140881955662,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5498968616666872476,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2537156866219993108,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[16178185567501436822,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3784531562979233881,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17755498883195052578,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11111166150786070161,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[518337477295170700,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[6962753159787162907,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":20,"id":{"name":"log","disambiguator":[12996859001740394752,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":21,"id":{"name":"cfg_if","disambiguator":[8037730387315135600,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":22,"id":{"name":"prost","disambiguator":[15285855434092549117,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":23,"id":{"name":"prost_derive","disambiguator":[13805543166489788830,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":24,"id":{"name":"bytes","disambiguator":[5441976563651757446,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":25,"id":{"name":"prost_types","disambiguator":[10990449130273745888,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","num":26,"id":{"name":"lazy_static","disambiguator":[8643996286395100790,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","num":27,"id":{"name":"regex","disambiguator":[12674391323214087994,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","num":28,"id":{"name":"regex_syntax","disambiguator":[18023479015477325225,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","num":29,"id":{"name":"itertools","disambiguator":[16837897858001478330,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","num":30,"id":{"name":"either","disambiguator":[10070275459274132918,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","num":31,"id":{"name":"multimap","disambiguator":[17394251580864045150,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ident.rs","num":32,"id":{"name":"heck","disambiguator":[1283571819124443844,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/message_graph.rs","num":33,"id":{"name":"petgraph","disambiguator":[18304979700700949882,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/message_graph.rs","num":34,"id":{"name":"fixedbitset","disambiguator":[16214142956683534141,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/message_graph.rs","num":35,"id":{"name":"indexmap","disambiguator":[6638787429486228540,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/message_graph.rs","num":36,"id":{"name":"hashbrown","disambiguator":[13571119530625034222,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":37,"id":{"name":"tempfile","disambiguator":[4762898974732045753,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":38,"id":{"name":"rustix","disambiguator":[7176966054947747419,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":39,"id":{"name":"io_lifetimes","disambiguator":[2620908562927119942,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":40,"id":{"name":"libc","disambiguator":[3878213621847001735,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":41,"id":{"name":"errno","disambiguator":[13958884806770067057,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":42,"id":{"name":"bitflags","disambiguator":[9570617667018167498,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":43,"id":{"name":"fastrand","disambiguator":[14331709394493301451,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":44,"id":{"name":"syn","disambiguator":[5467384931740630450,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":45,"id":{"name":"proc_macro","disambiguator":[13036438534682667802,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":46,"id":{"name":"proc_macro2","disambiguator":[6020735382977624748,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":47,"id":{"name":"unicode_ident","disambiguator":[8937285285672764307,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":48,"id":{"name":"quote","disambiguator":[10854494316884780302,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":49,"id":{"name":"prettyplease","disambiguator":[14406834227118955699,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","num":50,"id":{"name":"which","disambiguator":[14847629524009924128,0]}}],"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":0,"byte_end":63509,"line_start":1,"line_end":1761,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":523},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4404,"byte_end":4412,"line_start":147,"line_end":147,"column_start":22,"column_end":30},"alias_span":null,"name":"Comments","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":566},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4414,"byte_end":4420,"line_start":147,"line_end":147,"column_start":32,"column_end":38},"alias_span":null,"name":"Method","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4422,"byte_end":4429,"line_start":147,"line_end":147,"column_start":40,"column_end":47},"alias_span":null,"name":"Service","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":0,"byte_end":63509,"line_start":1,"line_end":1761,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":110},{"krate":0,"index":283},{"krate":0,"index":308},{"krate":0,"index":318},{"krate":0,"index":352},{"krate":0,"index":399},{"krate":0,"index":603},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":403},{"krate":0,"index":616},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":428},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":500},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":522}],"decl_id":null,"docs":" `prost-build` compiles `.proto` files into Rust.","sig":null,"attributes":[{"value":"allow(clippy :: option_as_ref_deref, clippy :: format_push_string)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":62,"byte_end":128,"line_start":2,"line_end":2,"column_start":1,"column_end":67}},{"value":"/ `prost-build` compiles `.proto` files into Rust.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":130,"byte_end":182,"line_start":4,"line_end":4,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":183,"byte_end":186,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ `prost-build` is designed to be used for build-time code generation as part of a Cargo","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":187,"byte_end":277,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ build-script.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":278,"byte_end":295,"line_start":7,"line_end":7,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":296,"byte_end":299,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":300,"byte_end":314,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":315,"byte_end":318,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Let's create a small crate, `snazzy`, that defines a collection of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":319,"byte_end":389,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ snazzy new items in a protobuf file.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":390,"byte_end":430,"line_start":12,"line_end":12,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":431,"byte_end":434,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```bash","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":435,"byte_end":446,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ $ cargo new snazzy && cd snazzy","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":447,"byte_end":482,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":483,"byte_end":490,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":491,"byte_end":494,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ First, add `prost-build`, `prost` and its public dependencies to `Cargo.toml`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":495,"byte_end":576,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"/ (see [crates.io](https://crates.io/crates/prost) for the current versions):","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":577,"byte_end":656,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":657,"byte_end":660,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":661,"byte_end":672,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":673,"byte_end":691,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/ bytes = <bytes-version>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":692,"byte_end":719,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/ prost = <prost-version>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":720,"byte_end":747,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":748,"byte_end":751,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [build-dependencies]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":752,"byte_end":776,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/ prost-build = { version = <prost-version> }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":777,"byte_end":824,"line_start":27,"line_end":27,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":825,"byte_end":832,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":833,"byte_end":836,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Next, add `src/items.proto` to the project:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":837,"byte_end":884,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":885,"byte_end":888,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```proto","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":889,"byte_end":901,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ syntax = \"proto3\";","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":902,"byte_end":924,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":925,"byte_end":928,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ package snazzy.items;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":929,"byte_end":954,"line_start":35,"line_end":35,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":955,"byte_end":958,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // A snazzy new shirt!","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":959,"byte_end":985,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ message Shirt {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":986,"byte_end":1005,"line_start":38,"line_end":38,"column_start":1,"column_end":20}},{"value":"/     enum Size {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1006,"byte_end":1025,"line_start":39,"line_end":39,"column_start":1,"column_end":20}},{"value":"/         SMALL = 0;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1026,"byte_end":1048,"line_start":40,"line_end":40,"column_start":1,"column_end":23}},{"value":"/         MEDIUM = 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1049,"byte_end":1072,"line_start":41,"line_end":41,"column_start":1,"column_end":24}},{"value":"/         LARGE = 2;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1073,"byte_end":1095,"line_start":42,"line_end":42,"column_start":1,"column_end":23}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1096,"byte_end":1105,"line_start":43,"line_end":43,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1106,"byte_end":1109,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/     string color = 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1110,"byte_end":1135,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/     Size size = 2;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1136,"byte_end":1158,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1159,"byte_end":1164,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1165,"byte_end":1172,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1173,"byte_end":1176,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ To generate Rust code from `items.proto`, we use `prost-build` in the crate's","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1177,"byte_end":1258,"line_start":50,"line_end":50,"column_start":1,"column_end":82}},{"value":"/ `build.rs` build-script:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1259,"byte_end":1287,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1288,"byte_end":1291,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1292,"byte_end":1310,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/ use std::io::Result;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1311,"byte_end":1335,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ fn main() -> Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1336,"byte_end":1365,"line_start":55,"line_end":55,"column_start":1,"column_end":30}},{"value":"/     prost_build::compile_protos(&[\"src/items.proto\"], &[\"src/\"])?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1366,"byte_end":1436,"line_start":56,"line_end":56,"column_start":1,"column_end":71}},{"value":"/     Ok(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1437,"byte_end":1451,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1452,"byte_end":1457,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1458,"byte_end":1465,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1466,"byte_end":1469,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ And finally, in `lib.rs`, include the generated code:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1470,"byte_end":1527,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1528,"byte_end":1531,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1532,"byte_end":1550,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/ // Include the `items` module, which is generated from items.proto.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1551,"byte_end":1622,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"/ // It is important to maintain the same structure as in the proto.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1623,"byte_end":1693,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ pub mod snazzy {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1694,"byte_end":1714,"line_start":66,"line_end":66,"column_start":1,"column_end":21}},{"value":"/     pub mod items {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1715,"byte_end":1738,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/         include!(concat!(env!(\"OUT_DIR\"), \"/snazzy.items.rs\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1739,"byte_end":1806,"line_start":68,"line_end":68,"column_start":1,"column_end":68}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1807,"byte_end":1816,"line_start":69,"line_end":69,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1817,"byte_end":1822,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1823,"byte_end":1826,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ use snazzy::items;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1827,"byte_end":1849,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1850,"byte_end":1853,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ pub fn create_large_shirt(color: String) -> items::Shirt {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1854,"byte_end":1916,"line_start":74,"line_end":74,"column_start":1,"column_end":63}},{"value":"/     let mut shirt = items::Shirt::default();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1917,"byte_end":1965,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/     shirt.color = color;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1966,"byte_end":1994,"line_start":76,"line_end":76,"column_start":1,"column_end":29}},{"value":"/     shirt.set_size(items::shirt::Size::Large);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":1995,"byte_end":2045,"line_start":77,"line_end":77,"column_start":1,"column_end":51}},{"value":"/     shirt","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2046,"byte_end":2059,"line_start":78,"line_end":78,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2060,"byte_end":2065,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2066,"byte_end":2073,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2074,"byte_end":2077,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ That's it! Run `cargo doc` to see documentation for the generated code. The full","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2078,"byte_end":2162,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"/ example project can be found on [GitHub](https://github.com/danburkert/snazzy).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2163,"byte_end":2246,"line_start":83,"line_end":83,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2247,"byte_end":2250,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ### Cleaning up Markdown in code docs","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2251,"byte_end":2292,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2293,"byte_end":2296,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ If you are using protobuf files from third parties, where the author of the protobuf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2297,"byte_end":2385,"line_start":87,"line_end":87,"column_start":1,"column_end":89}},{"value":"/ is not treating comments as Markdown, or is, but has codeblocks in their docs,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2386,"byte_end":2468,"line_start":88,"line_end":88,"column_start":1,"column_end":83}},{"value":"/ then you may need to clean up the documentation in order that `cargo test --doc`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2469,"byte_end":2553,"line_start":89,"line_end":89,"column_start":1,"column_end":85}},{"value":"/ will not fail spuriously, and that `cargo doc` doesn't attempt to render the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2554,"byte_end":2634,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ codeblocks as Rust code.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2635,"byte_end":2663,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2664,"byte_end":2667,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ To do this, in your `Cargo.toml`, add `features = [\"cleanup-markdown\"]` to the inclusion","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2668,"byte_end":2760,"line_start":93,"line_end":93,"column_start":1,"column_end":93}},{"value":"/ of the `prost-build` crate and when your code is generated, the code docs will automatically","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2761,"byte_end":2857,"line_start":94,"line_end":94,"column_start":1,"column_end":97}},{"value":"/ be cleaned up a bit.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2858,"byte_end":2882,"line_start":95,"line_end":95,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2883,"byte_end":2886,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ## Sourcing `protoc`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2887,"byte_end":2911,"line_start":97,"line_end":97,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2912,"byte_end":2915,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ `prost-build` depends on the Protocol Buffers compiler, `protoc`, to parse `.proto` files into","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":2916,"byte_end":3014,"line_start":99,"line_end":99,"column_start":1,"column_end":99}},{"value":"/ a representation that can be transformed into Rust. If set, `prost-build` uses the `PROTOC`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3015,"byte_end":3110,"line_start":100,"line_end":100,"column_start":1,"column_end":96}},{"value":"/ for locating `protoc`. For example, on a macOS system where Protobuf is installed","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3111,"byte_end":3196,"line_start":101,"line_end":101,"column_start":1,"column_end":86}},{"value":"/ with Homebrew, set the environment variables to:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3197,"byte_end":3249,"line_start":102,"line_end":102,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3250,"byte_end":3253,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```bash","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3254,"byte_end":3265,"line_start":104,"line_end":104,"column_start":1,"column_end":12}},{"value":"/ PROTOC=/usr/local/bin/protoc","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3266,"byte_end":3298,"line_start":105,"line_end":105,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3299,"byte_end":3306,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3307,"byte_end":3310,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ and in a typical Linux installation:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3311,"byte_end":3351,"line_start":108,"line_end":108,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3352,"byte_end":3355,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ ```bash","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3356,"byte_end":3367,"line_start":110,"line_end":110,"column_start":1,"column_end":12}},{"value":"/ PROTOC=/usr/bin/protoc","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3368,"byte_end":3394,"line_start":111,"line_end":111,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3395,"byte_end":3402,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3403,"byte_end":3406,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ If no `PROTOC` environment variable is set then `prost-build` will search the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3407,"byte_end":3488,"line_start":114,"line_end":114,"column_start":1,"column_end":82}},{"value":"/ current path for `protoc` or `protoc.exe`. If `prost-build` can not find `protoc`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3489,"byte_end":3574,"line_start":115,"line_end":115,"column_start":1,"column_end":86}},{"value":"/ via these methods the `compile_protos` method will fail.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3575,"byte_end":3635,"line_start":116,"line_end":116,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3636,"byte_end":3639,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ### Compiling `protoc` from source","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3640,"byte_end":3678,"line_start":118,"line_end":118,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3679,"byte_end":3682,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ To compile `protoc` from source you can use the `protobuf-src` crate and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3683,"byte_end":3759,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ set the correct environment variables.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3760,"byte_end":3802,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/ ```no_run,ignore, rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3803,"byte_end":3829,"line_start":122,"line_end":122,"column_start":1,"column_end":27}},{"value":"/ std::env::set_var(\"PROTOC\", protobuf_src::protoc());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3830,"byte_end":3886,"line_start":123,"line_end":123,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3887,"byte_end":3890,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ // Now compile your proto files via prost-build","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3891,"byte_end":3942,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3943,"byte_end":3950,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3951,"byte_end":3954,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`protobuf-src`]: https://docs.rs/protobuf-src","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":3955,"byte_end":4005,"line_start":128,"line_end":128,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":523},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63785,"byte_end":63793,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"Comments","qualname":"::ast::Comments","value":"Comments { leading_detached, leading, trailing }","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"decl_id":null,"docs":" Comments on a Protobuf item.\n","sig":null,"attributes":[{"value":"/ Comments on a Protobuf item.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63708,"byte_end":63740,"line_start":7,"line_end":7,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":524},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63849,"byte_end":63865,"line_start":11,"line_end":11,"column_start":9,"column_end":25},"name":"leading_detached","qualname":"::ast::Comments::leading_detached","value":"std::vec::Vec<std::vec::Vec<std::string::String>>","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Leading detached blocks of comments.\n","sig":null,"attributes":[{"value":"/ Leading detached blocks of comments.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63800,"byte_end":63840,"line_start":10,"line_end":10,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":525},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63920,"byte_end":63927,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"leading","qualname":"::ast::Comments::leading","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Leading comments.\n","sig":null,"attributes":[{"value":"/ Leading comments.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63890,"byte_end":63911,"line_start":13,"line_end":13,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":526},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63978,"byte_end":63986,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"trailing","qualname":"::ast::Comments::trailing","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Trailing comments.\n","sig":null,"attributes":[{"value":"/ Trailing comments.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":63947,"byte_end":63969,"line_start":16,"line_end":16,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":64759,"byte_end":64777,"line_start":45,"line_end":45,"column_start":12,"column_end":30},"name":"append_with_indent","qualname":"<Comments>::append_with_indent","value":"fn append_with_indent<'_, '_>(&'_ Self, u8, &'_ mut String)","parent":null,"children":[],"decl_id":null,"docs":" Appends the comments to a buffer with indentation.","sig":null,"attributes":[{"value":"/ Appends the comments to a buffer with indentation.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":64607,"byte_end":64661,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":64666,"byte_end":64669,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Each level of indentation corresponds to four space (' ') characters.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":64674,"byte_end":64747,"line_start":44,"line_end":44,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":555},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67495,"byte_end":67502,"line_start":129,"line_end":129,"column_start":12,"column_end":19},"name":"Service","qualname":"::ast::Service","value":"Service { name, proto_name, package, comments, methods, options }","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561}],"decl_id":null,"docs":" A service descriptor.\n","sig":null,"attributes":[{"value":"/ A service descriptor.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67434,"byte_end":67459,"line_start":127,"line_end":127,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":556},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67553,"byte_end":67557,"line_start":131,"line_end":131,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::Service::name","value":"std::string::String","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The service name in Rust style.\n","sig":null,"attributes":[{"value":"/ The service name in Rust style.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67509,"byte_end":67544,"line_start":130,"line_end":130,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":557},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67634,"byte_end":67644,"line_start":133,"line_end":133,"column_start":9,"column_end":19},"name":"proto_name","qualname":"::ast::Service::proto_name","value":"std::string::String","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The service name as it appears in the .proto file.\n","sig":null,"attributes":[{"value":"/ The service name as it appears in the .proto file.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67571,"byte_end":67625,"line_start":132,"line_end":132,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":558},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67721,"byte_end":67728,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"name":"package","qualname":"::ast::Service::package","value":"std::string::String","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The package name as it appears in the .proto file.\n","sig":null,"attributes":[{"value":"/ The package name as it appears in the .proto file.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67658,"byte_end":67712,"line_start":134,"line_end":134,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":559},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67776,"byte_end":67784,"line_start":137,"line_end":137,"column_start":9,"column_end":17},"name":"comments","qualname":"::ast::Service::comments","value":"ast::Comments","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The service comments.\n","sig":null,"attributes":[{"value":"/ The service comments.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67742,"byte_end":67767,"line_start":136,"line_end":136,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":560},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67833,"byte_end":67840,"line_start":139,"line_end":139,"column_start":9,"column_end":16},"name":"methods","qualname":"::ast::Service::methods","value":"std::vec::Vec<ast::Method>","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The service methods.\n","sig":null,"attributes":[{"value":"/ The service methods.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67800,"byte_end":67824,"line_start":138,"line_end":138,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":561},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67892,"byte_end":67899,"line_start":141,"line_end":141,"column_start":9,"column_end":16},"name":"options","qualname":"::ast::Service::options","value":"prost_types::ServiceOptions","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The service options.\n","sig":null,"attributes":[{"value":"/ The service options.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67859,"byte_end":67883,"line_start":140,"line_end":140,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":566},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68001,"byte_end":68007,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"Method","qualname":"::ast::Method","value":"Method { name, proto_name, comments, input_type, output_type, input_proto_type, output_proto_type, options, client_streaming, server_streaming }","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576}],"decl_id":null,"docs":" A service method descriptor.\n","sig":null,"attributes":[{"value":"/ A service method descriptor.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":67933,"byte_end":67965,"line_start":144,"line_end":144,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":567},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68064,"byte_end":68068,"line_start":148,"line_end":148,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::Method::name","value":"std::string::String","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The name of the method in Rust style.\n","sig":null,"attributes":[{"value":"/ The name of the method in Rust style.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68014,"byte_end":68055,"line_start":147,"line_end":147,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":568},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68151,"byte_end":68161,"line_start":150,"line_end":150,"column_start":9,"column_end":19},"name":"proto_name","qualname":"::ast::Method::proto_name","value":"std::string::String","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The name of the method as it appears in the .proto file.\n","sig":null,"attributes":[{"value":"/ The name of the method as it appears in the .proto file.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68082,"byte_end":68142,"line_start":149,"line_end":149,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":569},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68208,"byte_end":68216,"line_start":152,"line_end":152,"column_start":9,"column_end":17},"name":"comments","qualname":"::ast::Method::comments","value":"ast::Comments","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The method comments.\n","sig":null,"attributes":[{"value":"/ The method comments.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68175,"byte_end":68199,"line_start":151,"line_end":151,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":570},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68265,"byte_end":68275,"line_start":154,"line_end":154,"column_start":9,"column_end":19},"name":"input_type","qualname":"::ast::Method::input_type","value":"std::string::String","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The input Rust type.\n","sig":null,"attributes":[{"value":"/ The input Rust type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68232,"byte_end":68256,"line_start":153,"line_end":153,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":571},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68323,"byte_end":68334,"line_start":156,"line_end":156,"column_start":9,"column_end":20},"name":"output_type","qualname":"::ast::Method::output_type","value":"std::string::String","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The output Rust type.\n","sig":null,"attributes":[{"value":"/ The output Rust type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68289,"byte_end":68314,"line_start":155,"line_end":155,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":572},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68385,"byte_end":68401,"line_start":158,"line_end":158,"column_start":9,"column_end":25},"name":"input_proto_type","qualname":"::ast::Method::input_proto_type","value":"std::string::String","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The input Protobuf type.\n","sig":null,"attributes":[{"value":"/ The input Protobuf type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68348,"byte_end":68376,"line_start":157,"line_end":157,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":573},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68453,"byte_end":68470,"line_start":160,"line_end":160,"column_start":9,"column_end":26},"name":"output_proto_type","qualname":"::ast::Method::output_proto_type","value":"std::string::String","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The output Protobuf type.\n","sig":null,"attributes":[{"value":"/ The output Protobuf type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68415,"byte_end":68444,"line_start":159,"line_end":159,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68516,"byte_end":68523,"line_start":162,"line_end":162,"column_start":9,"column_end":16},"name":"options","qualname":"::ast::Method::options","value":"prost_types::MethodOptions","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" The method options.\n","sig":null,"attributes":[{"value":"/ The method options.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68484,"byte_end":68507,"line_start":161,"line_end":161,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":575},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68624,"byte_end":68640,"line_start":164,"line_end":164,"column_start":9,"column_end":25},"name":"client_streaming","qualname":"::ast::Method::client_streaming","value":"bool","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" Identifies if client streams multiple client messages.\n","sig":null,"attributes":[{"value":"/ Identifies if client streams multiple client messages.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68557,"byte_end":68615,"line_start":163,"line_end":163,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":576},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68719,"byte_end":68735,"line_start":166,"line_end":166,"column_start":9,"column_end":25},"name":"server_streaming","qualname":"::ast::Method::server_streaming","value":"bool","parent":{"krate":0,"index":566},"children":[],"decl_id":null,"docs":" Identifies if server streams multiple server messages.\n","sig":null,"attributes":[{"value":"/ Identifies if server streams multiple server messages.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":68652,"byte_end":68710,"line_start":165,"line_end":165,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5483,"byte_end":5499,"line_start":175,"line_end":175,"column_start":11,"column_end":27},"name":"ServiceGenerator","qualname":"::ServiceGenerator","value":"ServiceGenerator","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402}],"decl_id":null,"docs":" A service generator takes a service descriptor and generates Rust code.","sig":null,"attributes":[{"value":"/ A service generator takes a service descriptor and generates Rust code.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4695,"byte_end":4770,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4771,"byte_end":4774,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ `ServiceGenerator` can be used to generate application-specific interfaces","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4775,"byte_end":4853,"line_start":163,"line_end":163,"column_start":1,"column_end":79}},{"value":"/ or implementations for Protobuf service definitions.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4854,"byte_end":4910,"line_start":164,"line_end":164,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4911,"byte_end":4914,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Service generators are registered with a code generator using the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4915,"byte_end":4984,"line_start":166,"line_end":166,"column_start":1,"column_end":70}},{"value":"/ `Config::service_generator` method.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":4985,"byte_end":5024,"line_start":167,"line_end":167,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5025,"byte_end":5028,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ A viable scenario is that an RPC framework provides a service generator. It generates a trait","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5029,"byte_end":5126,"line_start":169,"line_end":169,"column_start":1,"column_end":98}},{"value":"/ describing methods of the service and some glue code to call the methods of the trait, defining","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5127,"byte_end":5226,"line_start":170,"line_end":170,"column_start":1,"column_end":100}},{"value":"/ details like how errors are handled or if it is asynchronous. Then the user provides an","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5227,"byte_end":5318,"line_start":171,"line_end":171,"column_start":1,"column_end":92}},{"value":"/ implementation of the generated trait in the application code and plugs it into the framework.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5319,"byte_end":5417,"line_start":172,"line_end":172,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5418,"byte_end":5421,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Such framework isn't part of Prost at present.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5422,"byte_end":5472,"line_start":174,"line_end":174,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5614,"byte_end":5622,"line_start":178,"line_end":178,"column_start":8,"column_end":16},"name":"generate","qualname":"::ServiceGenerator::generate","value":"fn generate<'_, '_>(&'_ mut Self, Service, &'_ mut String)","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Generates a Rust interface or implementation for a service, writing the\n result to `buf`.\n","sig":null,"attributes":[{"value":"/ Generates a Rust interface or implementation for a service, writing the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5506,"byte_end":5581,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ result to `buf`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5586,"byte_end":5606,"line_start":177,"line_end":177,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6287,"byte_end":6295,"line_start":193,"line_end":193,"column_start":8,"column_end":16},"name":"finalize","qualname":"::ServiceGenerator::finalize","value":"fn finalize<'_, '_>(&'_ mut Self, &'_ mut String)","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Finalizes the generation process.","sig":null,"attributes":[{"value":"/ Finalizes the generation process.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5676,"byte_end":5713,"line_start":180,"line_end":180,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5718,"byte_end":5721,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ In case there's something that needs to be output at the end of the generation process, it","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5726,"byte_end":5820,"line_start":182,"line_end":182,"column_start":5,"column_end":99}},{"value":"/ goes here. Similar to [`generate`](#method.generate), the output should be appended to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5825,"byte_end":5915,"line_start":183,"line_end":183,"column_start":5,"column_end":95}},{"value":"/ `buf`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5920,"byte_end":5930,"line_start":184,"line_end":184,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5935,"byte_end":5938,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ An example can be a module or other thing that needs to appear just once, not for each","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":5943,"byte_end":6033,"line_start":186,"line_end":186,"column_start":5,"column_end":95}},{"value":"/ service generated.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6038,"byte_end":6060,"line_start":187,"line_end":187,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6065,"byte_end":6068,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ This still can be called multiple times in a lifetime of the service generator, because it","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6073,"byte_end":6167,"line_start":189,"line_end":189,"column_start":5,"column_end":99}},{"value":"/ is called once per `.proto` file.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6172,"byte_end":6209,"line_start":190,"line_end":190,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6214,"byte_end":6217,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The default implementation is empty and does nothing.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6222,"byte_end":6279,"line_start":192,"line_end":192,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6798,"byte_end":6814,"line_start":203,"line_end":203,"column_start":8,"column_end":24},"name":"finalize_package","qualname":"::ServiceGenerator::finalize_package","value":"fn finalize_package<'_, '_, '_>(&'_ mut Self, &'_ str, &'_ mut String)","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Finalizes the generation process for an entire protobuf package.","sig":null,"attributes":[{"value":"/ Finalizes the generation process for an entire protobuf package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6334,"byte_end":6402,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6407,"byte_end":6410,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ This differs from [`finalize`](#method.finalize) by where (and how often) it is called","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6415,"byte_end":6505,"line_start":197,"line_end":197,"column_start":5,"column_end":95}},{"value":"/ during the service generator life cycle. This method is called once per protobuf package,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6510,"byte_end":6603,"line_start":198,"line_end":198,"column_start":5,"column_end":98}},{"value":"/ making it ideal for grouping services within a single package spread across multiple","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6608,"byte_end":6696,"line_start":199,"line_end":199,"column_start":5,"column_end":93}},{"value":"/ `.proto` files.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6701,"byte_end":6720,"line_start":200,"line_end":200,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6725,"byte_end":6728,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The default implementation is empty and does nothing.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":6733,"byte_end":6790,"line_start":202,"line_end":202,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":407},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7730,"byte_end":7736,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427}],"decl_id":null,"docs":" Configuration options for Protobuf code generation.","sig":null,"attributes":[{"value":"/ Configuration options for Protobuf code generation.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7572,"byte_end":7627,"line_start":238,"line_end":238,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7628,"byte_end":7631,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This configuration builder can be used to set non-default code generation options.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7632,"byte_end":7718,"line_start":240,"line_end":240,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8530,"byte_end":8533,"line_start":266,"line_end":266,"column_start":12,"column_end":15},"name":"new","qualname":"<Config>::new","value":"fn new() -> Config","parent":null,"children":[],"decl_id":null,"docs":" Creates a new code generator configuration with default options.\n","sig":null,"attributes":[{"value":"/ Creates a new code generator configuration with default options.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8450,"byte_end":8518,"line_start":265,"line_end":265,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10839,"byte_end":10848,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"btree_map","qualname":"<Config>::btree_map","value":"fn btree_map<I, S, '_>(&'_ mut Self, I) -> &'_ mut Self where\nI: IntoIterator<Item = S>, S: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Configure the code generator to generate Rust [`BTreeMap`][1] fields for Protobuf\n [`map`][2] type fields.","sig":null,"attributes":[{"value":"/ Configure the code generator to generate Rust [`BTreeMap`][1] fields for Protobuf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8585,"byte_end":8670,"line_start":270,"line_end":270,"column_start":5,"column_end":90}},{"value":"/ [`map`][2] type fields.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8675,"byte_end":8702,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8707,"byte_end":8710,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8715,"byte_end":8730,"line_start":273,"line_end":273,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8735,"byte_end":8738,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ **`paths`** - paths to specific fields, messages, or packages which should use a Rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8743,"byte_end":8832,"line_start":275,"line_end":275,"column_start":5,"column_end":94}},{"value":"/ `BTreeMap` for Protobuf `map` fields. Paths are specified in terms of the Protobuf type","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8837,"byte_end":8928,"line_start":276,"line_end":276,"column_start":5,"column_end":96}},{"value":"/ name (not the generated Rust type name). Paths with a leading `.` are treated as fully","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8933,"byte_end":9023,"line_start":277,"line_end":277,"column_start":5,"column_end":95}},{"value":"/ qualified names. Paths without a leading `.` are treated as relative, and are suffix","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9028,"byte_end":9116,"line_start":278,"line_end":278,"column_start":5,"column_end":93}},{"value":"/ matched on the fully qualified field name. If a Protobuf map field matches any of the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9121,"byte_end":9210,"line_start":279,"line_end":279,"column_start":5,"column_end":94}},{"value":"/ paths, a Rust `BTreeMap` field is generated instead of the default [`HashMap`][3].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9215,"byte_end":9301,"line_start":280,"line_end":280,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9306,"byte_end":9309,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The matching is done on the Protobuf names, before converting to Rust-friendly casing","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9314,"byte_end":9403,"line_start":282,"line_end":282,"column_start":5,"column_end":94}},{"value":"/ standards.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9408,"byte_end":9422,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9427,"byte_end":9430,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9435,"byte_end":9449,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9454,"byte_end":9457,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9462,"byte_end":9473,"line_start":287,"line_end":287,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9478,"byte_end":9528,"line_start":288,"line_end":288,"column_start":5,"column_end":55}},{"value":"/ // Match a specific field in a message type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9533,"byte_end":9581,"line_start":289,"line_end":289,"column_start":5,"column_end":53}},{"value":"/ config.btree_map(&[\".my_messages.MyMessageType.my_map_field\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9586,"byte_end":9653,"line_start":290,"line_end":290,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9658,"byte_end":9661,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ // Match all map fields in a message type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9666,"byte_end":9712,"line_start":292,"line_end":292,"column_start":5,"column_end":51}},{"value":"/ config.btree_map(&[\".my_messages.MyMessageType\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9717,"byte_end":9771,"line_start":293,"line_end":293,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9776,"byte_end":9779,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ // Match all map fields in a package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9784,"byte_end":9825,"line_start":295,"line_end":295,"column_start":5,"column_end":46}},{"value":"/ config.btree_map(&[\".my_messages\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9830,"byte_end":9870,"line_start":296,"line_end":296,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9875,"byte_end":9878,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ // Match all map fields. Specially useful in `no_std` contexts.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9883,"byte_end":9950,"line_start":298,"line_end":298,"column_start":5,"column_end":72}},{"value":"/ config.btree_map(&[\".\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9955,"byte_end":9984,"line_start":299,"line_end":299,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9989,"byte_end":9992,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ // Match all map fields in a nested message.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":9997,"byte_end":10045,"line_start":301,"line_end":301,"column_start":5,"column_end":53}},{"value":"/ config.btree_map(&[\".my_messages.MyMessageType.MyNestedMessageType\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10050,"byte_end":10124,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10129,"byte_end":10132,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ // Match all fields named 'my_map_field'.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10137,"byte_end":10182,"line_start":304,"line_end":304,"column_start":5,"column_end":50}},{"value":"/ config.btree_map(&[\"my_map_field\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10187,"byte_end":10227,"line_start":305,"line_end":305,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10232,"byte_end":10235,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ // Match all fields named 'my_map_field' in messages named 'MyMessageType', regardless of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10240,"byte_end":10333,"line_start":307,"line_end":307,"column_start":5,"column_end":98}},{"value":"/ // package or nesting.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10338,"byte_end":10364,"line_start":308,"line_end":308,"column_start":5,"column_end":31}},{"value":"/ config.btree_map(&[\"MyMessageType.my_map_field\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10369,"byte_end":10423,"line_start":309,"line_end":309,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10428,"byte_end":10431,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ // Match all fields named 'my_map_field', and all fields in the 'foo.bar' package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10436,"byte_end":10522,"line_start":311,"line_end":311,"column_start":5,"column_end":91}},{"value":"/ config.btree_map(&[\"my_map_field\", \".foo.bar\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10527,"byte_end":10579,"line_start":312,"line_end":312,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10584,"byte_end":10591,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10596,"byte_end":10599,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ [1]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10604,"byte_end":10675,"line_start":315,"line_end":315,"column_start":5,"column_end":76}},{"value":"/ [2]: https://developers.google.com/protocol-buffers/docs/proto3#maps","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10680,"byte_end":10752,"line_start":316,"line_end":316,"column_start":5,"column_end":77}},{"value":"/ [3]: https://doc.rust-lang.org/std/collections/struct.HashMap.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":10757,"byte_end":10827,"line_start":317,"line_end":317,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13385,"byte_end":13390,"line_start":379,"line_end":379,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Config>::bytes","value":"fn bytes<I, S, '_>(&'_ mut Self, I) -> &'_ mut Self where I: IntoIterator<Item\n= S>, S: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Configure the code generator to generate Rust [`bytes::Bytes`][1] fields for Protobuf\n [`bytes`][2] type fields.","sig":null,"attributes":[{"value":"/ Configure the code generator to generate Rust [`bytes::Bytes`][1] fields for Protobuf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11159,"byte_end":11248,"line_start":331,"line_end":331,"column_start":5,"column_end":94}},{"value":"/ [`bytes`][2] type fields.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11253,"byte_end":11282,"line_start":332,"line_end":332,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11287,"byte_end":11290,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11295,"byte_end":11310,"line_start":334,"line_end":334,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11315,"byte_end":11318,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ **`paths`** - paths to specific fields, messages, or packages which should use a Rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11323,"byte_end":11412,"line_start":336,"line_end":336,"column_start":5,"column_end":94}},{"value":"/ `Bytes` for Protobuf `bytes` fields. Paths are specified in terms of the Protobuf type","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11417,"byte_end":11507,"line_start":337,"line_end":337,"column_start":5,"column_end":95}},{"value":"/ name (not the generated Rust type name). Paths with a leading `.` are treated as fully","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11512,"byte_end":11602,"line_start":338,"line_end":338,"column_start":5,"column_end":95}},{"value":"/ qualified names. Paths without a leading `.` are treated as relative, and are suffix","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11607,"byte_end":11695,"line_start":339,"line_end":339,"column_start":5,"column_end":93}},{"value":"/ matched on the fully qualified field name. If a Protobuf map field matches any of the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11700,"byte_end":11789,"line_start":340,"line_end":340,"column_start":5,"column_end":94}},{"value":"/ paths, a Rust `Bytes` field is generated instead of the default [`Vec<u8>`][3].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11794,"byte_end":11877,"line_start":341,"line_end":341,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11882,"byte_end":11885,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ The matching is done on the Protobuf names, before converting to Rust-friendly casing","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11890,"byte_end":11979,"line_start":343,"line_end":343,"column_start":5,"column_end":94}},{"value":"/ standards.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":11984,"byte_end":11998,"line_start":344,"line_end":344,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12003,"byte_end":12006,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12011,"byte_end":12025,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12030,"byte_end":12033,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12038,"byte_end":12049,"line_start":348,"line_end":348,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12054,"byte_end":12104,"line_start":349,"line_end":349,"column_start":5,"column_end":55}},{"value":"/ // Match a specific field in a message type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12109,"byte_end":12157,"line_start":350,"line_end":350,"column_start":5,"column_end":53}},{"value":"/ config.bytes(&[\".my_messages.MyMessageType.my_bytes_field\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12162,"byte_end":12227,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12232,"byte_end":12235,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ // Match all bytes fields in a message type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12240,"byte_end":12288,"line_start":353,"line_end":353,"column_start":5,"column_end":53}},{"value":"/ config.bytes(&[\".my_messages.MyMessageType\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12293,"byte_end":12343,"line_start":354,"line_end":354,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12348,"byte_end":12351,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ // Match all bytes fields in a package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12356,"byte_end":12399,"line_start":356,"line_end":356,"column_start":5,"column_end":48}},{"value":"/ config.bytes(&[\".my_messages\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12404,"byte_end":12440,"line_start":357,"line_end":357,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12445,"byte_end":12448,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ // Match all bytes fields. Specially useful in `no_std` contexts.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12453,"byte_end":12522,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/ config.bytes(&[\".\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12527,"byte_end":12552,"line_start":360,"line_end":360,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12557,"byte_end":12560,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ // Match all bytes fields in a nested message.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12565,"byte_end":12615,"line_start":362,"line_end":362,"column_start":5,"column_end":55}},{"value":"/ config.bytes(&[\".my_messages.MyMessageType.MyNestedMessageType\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12620,"byte_end":12690,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12695,"byte_end":12698,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ // Match all fields named 'my_bytes_field'.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12703,"byte_end":12750,"line_start":365,"line_end":365,"column_start":5,"column_end":52}},{"value":"/ config.bytes(&[\"my_bytes_field\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12755,"byte_end":12793,"line_start":366,"line_end":366,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12798,"byte_end":12801,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ // Match all fields named 'my_bytes_field' in messages named 'MyMessageType', regardless of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12806,"byte_end":12901,"line_start":368,"line_end":368,"column_start":5,"column_end":100}},{"value":"/ // package or nesting.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12906,"byte_end":12932,"line_start":369,"line_end":369,"column_start":5,"column_end":31}},{"value":"/ config.bytes(&[\"MyMessageType.my_bytes_field\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12937,"byte_end":12989,"line_start":370,"line_end":370,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":12994,"byte_end":12997,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ // Match all fields named 'my_bytes_field', and all fields in the 'foo.bar' package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13002,"byte_end":13090,"line_start":372,"line_end":372,"column_start":5,"column_end":93}},{"value":"/ config.bytes(&[\"my_bytes_field\", \".foo.bar\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13095,"byte_end":13145,"line_start":373,"line_end":373,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13150,"byte_end":13157,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13162,"byte_end":13165,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ [1]: https://docs.rs/bytes/latest/bytes/struct.Bytes.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13170,"byte_end":13231,"line_start":376,"line_end":376,"column_start":5,"column_end":66}},{"value":"/ [2]: https://developers.google.com/protocol-buffers/docs/proto3#scalar","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13236,"byte_end":13310,"line_start":377,"line_end":377,"column_start":5,"column_end":79}},{"value":"/ [3]: https://doc.rust-lang.org/std/vec/struct.Vec.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13315,"byte_end":13373,"line_start":378,"line_end":378,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14780,"byte_end":14795,"line_start":415,"line_end":415,"column_start":12,"column_end":27},"name":"field_attribute","qualname":"<Config>::field_attribute","value":"fn field_attribute<P, A, '_>(&'_ mut Self, P, A) -> &'_ mut Self where\nP: AsRef<str>, A: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Add additional attribute to matched fields.","sig":null,"attributes":[{"value":"/ Add additional attribute to matched fields.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13704,"byte_end":13751,"line_start":392,"line_end":392,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13756,"byte_end":13759,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13764,"byte_end":13779,"line_start":394,"line_end":394,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13784,"byte_end":13787,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ **`path`** - a path matching any number of fields. These fields get the attribute.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13792,"byte_end":13878,"line_start":396,"line_end":396,"column_start":5,"column_end":91}},{"value":"/ For details about matching fields see [`btree_map`](#method.btree_map).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13883,"byte_end":13958,"line_start":397,"line_end":397,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13963,"byte_end":13966,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ **`attribute`** - an arbitrary string that'll be placed before each matched field. The","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":13971,"byte_end":14061,"line_start":399,"line_end":399,"column_start":5,"column_end":95}},{"value":"/ expected usage are additional attributes, usually in concert with whole-type","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14066,"byte_end":14146,"line_start":400,"line_end":400,"column_start":5,"column_end":85}},{"value":"/ attributes set with [`type_attribute`](method.type_attribute), but it is not","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14151,"byte_end":14231,"line_start":401,"line_end":401,"column_start":5,"column_end":85}},{"value":"/ checked and anything can be put there.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14236,"byte_end":14278,"line_start":402,"line_end":402,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14283,"byte_end":14286,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Note that the calls to this method are cumulative ‒ if multiple paths from multiple calls","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14291,"byte_end":14386,"line_start":404,"line_end":404,"column_start":5,"column_end":98}},{"value":"/ match the same field, the field gets all the corresponding attributes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14391,"byte_end":14465,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14470,"byte_end":14473,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14478,"byte_end":14492,"line_start":407,"line_end":407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14497,"byte_end":14500,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14505,"byte_end":14516,"line_start":409,"line_end":409,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14521,"byte_end":14571,"line_start":410,"line_end":410,"column_start":5,"column_end":55}},{"value":"/ // Prost renames fields named `in` to `in_`. But if serialized through serde,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14576,"byte_end":14657,"line_start":411,"line_end":411,"column_start":5,"column_end":86}},{"value":"/ // they should as `in`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14662,"byte_end":14689,"line_start":412,"line_end":412,"column_start":5,"column_end":32}},{"value":"/ config.field_attribute(\"in\", \"#[serde(rename = \\\"in\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14694,"byte_end":14756,"line_start":413,"line_end":413,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":14761,"byte_end":14768,"line_start":414,"line_end":414,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17010,"byte_end":17024,"line_start":464,"line_end":464,"column_start":12,"column_end":26},"name":"type_attribute","qualname":"<Config>::type_attribute","value":"fn type_attribute<P, A, '_>(&'_ mut Self, P, A) -> &'_ mut Self where\nP: AsRef<str>, A: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Add additional attribute to matched messages, enums and one-ofs.","sig":null,"attributes":[{"value":"/ Add additional attribute to matched messages, enums and one-ofs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15045,"byte_end":15113,"line_start":425,"line_end":425,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15118,"byte_end":15121,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15126,"byte_end":15141,"line_start":427,"line_end":427,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15146,"byte_end":15149,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ **`paths`** - a path matching any number of types. It works the same way as in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15154,"byte_end":15236,"line_start":429,"line_end":429,"column_start":5,"column_end":87}},{"value":"/ [`btree_map`](#method.btree_map), just with the field name omitted.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15241,"byte_end":15312,"line_start":430,"line_end":430,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15317,"byte_end":15320,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ **`attribute`** - an arbitrary string to be placed before each matched type. The","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15325,"byte_end":15409,"line_start":432,"line_end":432,"column_start":5,"column_end":89}},{"value":"/ expected usage are additional attributes, but anything is allowed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15414,"byte_end":15484,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15489,"byte_end":15492,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ The calls to this method are cumulative. They don't overwrite previous calls and if a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15497,"byte_end":15586,"line_start":435,"line_end":435,"column_start":5,"column_end":94}},{"value":"/ type is matched by multiple calls of the method, all relevant attributes are added to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15591,"byte_end":15680,"line_start":436,"line_end":436,"column_start":5,"column_end":94}},{"value":"/ it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15685,"byte_end":15692,"line_start":437,"line_end":437,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15697,"byte_end":15700,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ For things like serde it might be needed to combine with [field","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15705,"byte_end":15772,"line_start":439,"line_end":439,"column_start":5,"column_end":72}},{"value":"/ attributes](#method.field_attribute).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15777,"byte_end":15818,"line_start":440,"line_end":440,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15823,"byte_end":15826,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15831,"byte_end":15845,"line_start":442,"line_end":442,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15850,"byte_end":15853,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15858,"byte_end":15869,"line_start":444,"line_end":444,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15874,"byte_end":15924,"line_start":445,"line_end":445,"column_start":5,"column_end":55}},{"value":"/ // Nothing around uses floats, so we can derive real `Eq` in addition to `PartialEq`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":15929,"byte_end":16018,"line_start":446,"line_end":446,"column_start":5,"column_end":94}},{"value":"/ config.type_attribute(\".\", \"#[derive(Eq)]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16023,"byte_end":16071,"line_start":447,"line_end":447,"column_start":5,"column_end":53}},{"value":"/ // Some messages want to be serializable with serde as well.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16076,"byte_end":16140,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ config.type_attribute(\"my_messages.MyMessageType\",","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16145,"byte_end":16199,"line_start":449,"line_end":449,"column_start":5,"column_end":59}},{"value":"/                       \"#[derive(Serialize)] #[serde(rename_all = \\\"snake_case\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16204,"byte_end":16292,"line_start":450,"line_end":450,"column_start":5,"column_end":93}},{"value":"/ config.type_attribute(\"my_messages.MyMessageType.MyNestedMessageType\",","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16297,"byte_end":16371,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/                       \"#[derive(Serialize)] #[serde(rename_all = \\\"snake_case\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16376,"byte_end":16464,"line_start":452,"line_end":452,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16469,"byte_end":16476,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16481,"byte_end":16484,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Oneof fields","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16489,"byte_end":16507,"line_start":455,"line_end":455,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16512,"byte_end":16515,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ The `oneof` fields don't have a type name of their own inside Protobuf. Therefore, the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16520,"byte_end":16610,"line_start":457,"line_end":457,"column_start":5,"column_end":95}},{"value":"/ field name can be used both with `type_attribute` and `field_attribute` ‒ the first is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16615,"byte_end":16707,"line_start":458,"line_end":458,"column_start":5,"column_end":95}},{"value":"/ placed before the `enum` type definition, the other before the field inside corresponding","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16712,"byte_end":16805,"line_start":459,"line_end":459,"column_start":5,"column_end":98}},{"value":"/ message `struct`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16810,"byte_end":16831,"line_start":460,"line_end":460,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16836,"byte_end":16839,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ In other words, to place an attribute on the `enum` implementing the `oneof`, the match","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16844,"byte_end":16935,"line_start":462,"line_end":462,"column_start":5,"column_end":96}},{"value":"/ would look like `my_messages.MyMessageType.oneofname`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":16940,"byte_end":16998,"line_start":463,"line_end":463,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18706,"byte_end":18723,"line_start":503,"line_end":503,"column_start":12,"column_end":29},"name":"message_attribute","qualname":"<Config>::message_attribute","value":"fn message_attribute<P, A, '_>(&'_ mut Self, P, A) -> &'_ mut Self where\nP: AsRef<str>, A: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Add additional attribute to matched messages.","sig":null,"attributes":[{"value":"/ Add additional attribute to matched messages.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17273,"byte_end":17322,"line_start":474,"line_end":474,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17327,"byte_end":17330,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17335,"byte_end":17350,"line_start":476,"line_end":476,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17355,"byte_end":17358,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ **`paths`** - a path matching any number of types. It works the same way as in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17363,"byte_end":17445,"line_start":478,"line_end":478,"column_start":5,"column_end":87}},{"value":"/ [`btree_map`](#method.btree_map), just with the field name omitted.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17450,"byte_end":17521,"line_start":479,"line_end":479,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17526,"byte_end":17529,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ **`attribute`** - an arbitrary string to be placed before each matched type. The","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17534,"byte_end":17618,"line_start":481,"line_end":481,"column_start":5,"column_end":89}},{"value":"/ expected usage are additional attributes, but anything is allowed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17623,"byte_end":17693,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17698,"byte_end":17701,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ The calls to this method are cumulative. They don't overwrite previous calls and if a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17706,"byte_end":17795,"line_start":484,"line_end":484,"column_start":5,"column_end":94}},{"value":"/ type is matched by multiple calls of the method, all relevant attributes are added to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17800,"byte_end":17889,"line_start":485,"line_end":485,"column_start":5,"column_end":94}},{"value":"/ it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17894,"byte_end":17901,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17906,"byte_end":17909,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ For things like serde it might be needed to combine with [field","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17914,"byte_end":17981,"line_start":488,"line_end":488,"column_start":5,"column_end":72}},{"value":"/ attributes](#method.field_attribute).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":17986,"byte_end":18027,"line_start":489,"line_end":489,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18032,"byte_end":18035,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18040,"byte_end":18054,"line_start":491,"line_end":491,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18059,"byte_end":18062,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18067,"byte_end":18078,"line_start":493,"line_end":493,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18083,"byte_end":18133,"line_start":494,"line_end":494,"column_start":5,"column_end":55}},{"value":"/ // Nothing around uses floats, so we can derive real `Eq` in addition to `PartialEq`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18138,"byte_end":18227,"line_start":495,"line_end":495,"column_start":5,"column_end":94}},{"value":"/ config.message_attribute(\".\", \"#[derive(Eq)]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18232,"byte_end":18283,"line_start":496,"line_end":496,"column_start":5,"column_end":56}},{"value":"/ // Some messages want to be serializable with serde as well.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18288,"byte_end":18352,"line_start":497,"line_end":497,"column_start":5,"column_end":69}},{"value":"/ config.message_attribute(\"my_messages.MyMessageType\",","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18357,"byte_end":18414,"line_start":498,"line_end":498,"column_start":5,"column_end":62}},{"value":"/                       \"#[derive(Serialize)] #[serde(rename_all = \\\"snake_case\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18419,"byte_end":18507,"line_start":499,"line_end":499,"column_start":5,"column_end":93}},{"value":"/ config.message_attribute(\"my_messages.MyMessageType.MyNestedMessageType\",","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18512,"byte_end":18589,"line_start":500,"line_end":500,"column_start":5,"column_end":82}},{"value":"/                       \"#[derive(Serialize)] #[serde(rename_all = \\\"snake_case\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18594,"byte_end":18682,"line_start":501,"line_end":501,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18687,"byte_end":18694,"line_start":502,"line_end":502,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20930,"byte_end":20944,"line_start":552,"line_end":552,"column_start":12,"column_end":26},"name":"enum_attribute","qualname":"<Config>::enum_attribute","value":"fn enum_attribute<P, A, '_>(&'_ mut Self, P, A) -> &'_ mut Self where\nP: AsRef<str>, A: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Add additional attribute to matched enums and one-ofs.","sig":null,"attributes":[{"value":"/ Add additional attribute to matched enums and one-ofs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":18975,"byte_end":19033,"line_start":513,"line_end":513,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19038,"byte_end":19041,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19046,"byte_end":19061,"line_start":515,"line_end":515,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19066,"byte_end":19069,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ **`paths`** - a path matching any number of types. It works the same way as in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19074,"byte_end":19156,"line_start":517,"line_end":517,"column_start":5,"column_end":87}},{"value":"/ [`btree_map`](#method.btree_map), just with the field name omitted.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19161,"byte_end":19232,"line_start":518,"line_end":518,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19237,"byte_end":19240,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ **`attribute`** - an arbitrary string to be placed before each matched type. The","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19245,"byte_end":19329,"line_start":520,"line_end":520,"column_start":5,"column_end":89}},{"value":"/ expected usage are additional attributes, but anything is allowed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19334,"byte_end":19404,"line_start":521,"line_end":521,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19409,"byte_end":19412,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ The calls to this method are cumulative. They don't overwrite previous calls and if a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19417,"byte_end":19506,"line_start":523,"line_end":523,"column_start":5,"column_end":94}},{"value":"/ type is matched by multiple calls of the method, all relevant attributes are added to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19511,"byte_end":19600,"line_start":524,"line_end":524,"column_start":5,"column_end":94}},{"value":"/ it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19605,"byte_end":19612,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19617,"byte_end":19620,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ For things like serde it might be needed to combine with [field","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19625,"byte_end":19692,"line_start":527,"line_end":527,"column_start":5,"column_end":72}},{"value":"/ attributes](#method.field_attribute).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19697,"byte_end":19738,"line_start":528,"line_end":528,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19743,"byte_end":19746,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19751,"byte_end":19765,"line_start":530,"line_end":530,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19770,"byte_end":19773,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19778,"byte_end":19789,"line_start":532,"line_end":532,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19794,"byte_end":19844,"line_start":533,"line_end":533,"column_start":5,"column_end":55}},{"value":"/ // Nothing around uses floats, so we can derive real `Eq` in addition to `PartialEq`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19849,"byte_end":19938,"line_start":534,"line_end":534,"column_start":5,"column_end":94}},{"value":"/ config.enum_attribute(\".\", \"#[derive(Eq)]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19943,"byte_end":19991,"line_start":535,"line_end":535,"column_start":5,"column_end":53}},{"value":"/ // Some messages want to be serializable with serde as well.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":19996,"byte_end":20060,"line_start":536,"line_end":536,"column_start":5,"column_end":69}},{"value":"/ config.enum_attribute(\"my_messages.MyEnumType\",","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20065,"byte_end":20116,"line_start":537,"line_end":537,"column_start":5,"column_end":56}},{"value":"/                       \"#[derive(Serialize)] #[serde(rename_all = \\\"snake_case\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20121,"byte_end":20209,"line_start":538,"line_end":538,"column_start":5,"column_end":93}},{"value":"/ config.enum_attribute(\"my_messages.MyMessageType.MyNestedEnumType\",","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20214,"byte_end":20285,"line_start":539,"line_end":539,"column_start":5,"column_end":76}},{"value":"/                       \"#[derive(Serialize)] #[serde(rename_all = \\\"snake_case\\\")]\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20290,"byte_end":20378,"line_start":540,"line_end":540,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20383,"byte_end":20390,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20395,"byte_end":20398,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Oneof fields","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20403,"byte_end":20421,"line_start":543,"line_end":543,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20426,"byte_end":20429,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ The `oneof` fields don't have a type name of their own inside Protobuf. Therefore, the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20434,"byte_end":20524,"line_start":545,"line_end":545,"column_start":5,"column_end":95}},{"value":"/ field name can be used both with `enum_attribute` and `field_attribute` ‒ the first is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20529,"byte_end":20621,"line_start":546,"line_end":546,"column_start":5,"column_end":95}},{"value":"/ placed before the `enum` type definition, the other before the field inside corresponding","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20626,"byte_end":20719,"line_start":547,"line_end":547,"column_start":5,"column_end":98}},{"value":"/ message `struct`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20724,"byte_end":20745,"line_start":548,"line_end":548,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20750,"byte_end":20753,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ In other words, to place an attribute on the `enum` implementing the `oneof`, the match","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20758,"byte_end":20849,"line_start":550,"line_end":550,"column_start":5,"column_end":96}},{"value":"/ would look like `my_messages.MyNestedMessageType.oneofname`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":20854,"byte_end":20918,"line_start":551,"line_end":551,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21626,"byte_end":21631,"line_start":575,"line_end":575,"column_start":12,"column_end":17},"name":"boxed","qualname":"<Config>::boxed","value":"fn boxed<P, '_>(&'_ mut Self, P) -> &'_ mut Self where P: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Wrap matched fields in a `Box`.","sig":null,"attributes":[{"value":"/ Wrap matched fields in a `Box`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21193,"byte_end":21228,"line_start":562,"line_end":562,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21233,"byte_end":21236,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21241,"byte_end":21256,"line_start":564,"line_end":564,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21261,"byte_end":21264,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ **`path`** - a path matching any number of fields. These fields get the attribute.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21269,"byte_end":21355,"line_start":566,"line_end":566,"column_start":5,"column_end":91}},{"value":"/ For details about matching fields see [`btree_map`](#method.btree_map).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21360,"byte_end":21435,"line_start":567,"line_end":567,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21440,"byte_end":21443,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21448,"byte_end":21462,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21467,"byte_end":21470,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21475,"byte_end":21486,"line_start":571,"line_end":571,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21491,"byte_end":21541,"line_start":572,"line_end":572,"column_start":5,"column_end":55}},{"value":"/ config.boxed(\".my_messages.MyMessageType.my_field\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21546,"byte_end":21602,"line_start":573,"line_end":573,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21607,"byte_end":21614,"line_start":574,"line_end":574,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21873,"byte_end":21890,"line_start":584,"line_end":584,"column_start":12,"column_end":29},"name":"service_generator","qualname":"<Config>::service_generator","value":"fn service_generator<'_>(&'_ mut Self, Box<dyn ServiceGenerator>)\n-> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the code generator to use the provided service generator.\n","sig":null,"attributes":[{"value":"/ Configures the code generator to use the provided service generator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":21789,"byte_end":21861,"line_start":583,"line_end":583,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22244,"byte_end":22268,"line_start":591,"line_end":591,"column_start":12,"column_end":36},"name":"compile_well_known_types","qualname":"<Config>::compile_well_known_types","value":"fn compile_well_known_types<'_>(&'_ mut Self) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the code generator to not use the `prost_types` crate for Protobuf well-known\n types, and instead generate Protobuf well-known types from their `.proto` definitions.\n","sig":null,"attributes":[{"value":"/ Configures the code generator to not use the `prost_types` crate for Protobuf well-known","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22045,"byte_end":22137,"line_start":589,"line_end":589,"column_start":5,"column_end":97}},{"value":"/ types, and instead generate Protobuf well-known types from their `.proto` definitions.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22142,"byte_end":22232,"line_start":590,"line_end":590,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23494,"byte_end":23510,"line_start":619,"line_end":619,"column_start":12,"column_end":28},"name":"disable_comments","qualname":"<Config>::disable_comments","value":"fn disable_comments<I, S, '_>(&'_ mut Self, I) -> &'_ mut Self where\nI: IntoIterator<Item = S>, S: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Configures the code generator to omit documentation comments on generated Protobuf types.","sig":null,"attributes":[{"value":"/ Configures the code generator to omit documentation comments on generated Protobuf types.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22353,"byte_end":22446,"line_start":596,"line_end":596,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22451,"byte_end":22454,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22459,"byte_end":22472,"line_start":598,"line_end":598,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22477,"byte_end":22480,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Occasionally `.proto` files contain code blocks which are not valid Rust. To avoid doctest","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22485,"byte_end":22579,"line_start":600,"line_end":600,"column_start":5,"column_end":99}},{"value":"/ failures, annotate the invalid code blocks with an [`ignore` or `no_run` attribute][1], or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22584,"byte_end":22678,"line_start":601,"line_end":601,"column_start":5,"column_end":99}},{"value":"/ disable doctests for the crate with a [Cargo.toml entry][2]. If neither of these options","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22683,"byte_end":22775,"line_start":602,"line_end":602,"column_start":5,"column_end":97}},{"value":"/ are possible, then omit comments on generated code during doctest builds:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22780,"byte_end":22857,"line_start":603,"line_end":603,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22862,"byte_end":22865,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22870,"byte_end":22888,"line_start":605,"line_end":605,"column_start":5,"column_end":23}},{"value":"/ # fn main() -> std::io::Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22893,"byte_end":22933,"line_start":606,"line_end":606,"column_start":5,"column_end":45}},{"value":"/ let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22938,"byte_end":22986,"line_start":607,"line_end":607,"column_start":5,"column_end":53}},{"value":"/ config.disable_comments(&[\".\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":22991,"byte_end":23027,"line_start":608,"line_end":608,"column_start":5,"column_end":41}},{"value":"/ config.compile_protos(&[\"src/frontend.proto\", \"src/backend.proto\"], &[\"src\"])?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23032,"byte_end":23115,"line_start":609,"line_end":609,"column_start":5,"column_end":88}},{"value":"/ #     Ok(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23120,"byte_end":23136,"line_start":610,"line_end":610,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23141,"byte_end":23148,"line_start":611,"line_end":611,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23153,"byte_end":23160,"line_start":612,"line_end":612,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23165,"byte_end":23168,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ As with other options which take a set of paths, comments can be disabled on a per-package","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23173,"byte_end":23267,"line_start":614,"line_end":614,"column_start":5,"column_end":99}},{"value":"/ or per-symbol basis.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23272,"byte_end":23296,"line_start":615,"line_end":615,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23301,"byte_end":23304,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ [1]: https://doc.rust-lang.org/rustdoc/documentation-tests.html#attributes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23309,"byte_end":23387,"line_start":617,"line_end":617,"column_start":5,"column_end":83}},{"value":"/ [2]: https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23392,"byte_end":23482,"line_start":618,"line_end":618,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27562,"byte_end":27573,"line_start":734,"line_end":734,"column_start":12,"column_end":23},"name":"extern_path","qualname":"<Config>::extern_path","value":"fn extern_path<P1, P2, '_>(&'_ mut Self, P1, P2) -> &'_ mut Self where\nP1: Into<String>, P2: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Declare an externally provided Protobuf package or type.","sig":null,"attributes":[{"value":"/ Declare an externally provided Protobuf package or type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23822,"byte_end":23882,"line_start":632,"line_end":632,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23887,"byte_end":23890,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ `extern_path` allows `prost` types in external crates to be referenced in generated code.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23895,"byte_end":23988,"line_start":634,"line_end":634,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":23993,"byte_end":23996,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ When `prost` compiles a `.proto` which includes an import of another `.proto`, it will","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24001,"byte_end":24091,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ automatically recursively compile the imported file as well. `extern_path` can be used","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24096,"byte_end":24186,"line_start":637,"line_end":637,"column_start":5,"column_end":95}},{"value":"/ to instead substitute types from an external crate.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24191,"byte_end":24246,"line_start":638,"line_end":638,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24251,"byte_end":24254,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24259,"byte_end":24272,"line_start":640,"line_end":640,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24277,"byte_end":24280,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ As an example, consider a crate, `uuid`, with a `prost`-generated `Uuid` type:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24285,"byte_end":24367,"line_start":642,"line_end":642,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24372,"byte_end":24375,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ ```proto","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24380,"byte_end":24392,"line_start":644,"line_end":644,"column_start":5,"column_end":17}},{"value":"/ // uuid.proto","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24397,"byte_end":24414,"line_start":645,"line_end":645,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24419,"byte_end":24422,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ syntax = \"proto3\";","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24427,"byte_end":24449,"line_start":647,"line_end":647,"column_start":5,"column_end":27}},{"value":"/ package uuid;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24454,"byte_end":24471,"line_start":648,"line_end":648,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24476,"byte_end":24479,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ message Uuid {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24484,"byte_end":24502,"line_start":650,"line_end":650,"column_start":5,"column_end":23}},{"value":"/     string uuid_str = 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24507,"byte_end":24535,"line_start":651,"line_end":651,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24540,"byte_end":24545,"line_start":652,"line_end":652,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24550,"byte_end":24557,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24562,"byte_end":24565,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ The `uuid` crate implements some traits for `Uuid`, and publicly exports it:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24570,"byte_end":24650,"line_start":655,"line_end":655,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24655,"byte_end":24658,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24663,"byte_end":24681,"line_start":657,"line_end":657,"column_start":5,"column_end":23}},{"value":"/ // lib.rs in the uuid crate","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24686,"byte_end":24717,"line_start":658,"line_end":658,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24722,"byte_end":24725,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ include!(concat!(env!(\"OUT_DIR\"), \"/uuid.rs\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24730,"byte_end":24781,"line_start":660,"line_end":660,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24786,"byte_end":24789,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ pub trait DoSomething {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24794,"byte_end":24821,"line_start":662,"line_end":662,"column_start":5,"column_end":32}},{"value":"/     fn do_it(&self);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24826,"byte_end":24850,"line_start":663,"line_end":663,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24855,"byte_end":24860,"line_start":664,"line_end":664,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24865,"byte_end":24868,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ impl DoSomething for Uuid {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24873,"byte_end":24904,"line_start":666,"line_end":666,"column_start":5,"column_end":36}},{"value":"/     fn do_it(&self) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24909,"byte_end":24934,"line_start":667,"line_end":667,"column_start":5,"column_end":30}},{"value":"/         println!(\"Done\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24939,"byte_end":24968,"line_start":668,"line_end":668,"column_start":5,"column_end":34}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24973,"byte_end":24982,"line_start":669,"line_end":669,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24987,"byte_end":24992,"line_start":670,"line_end":670,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":24997,"byte_end":25004,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25009,"byte_end":25012,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ A separate crate, `my_application`, uses `prost` to generate message types which reference","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25017,"byte_end":25111,"line_start":673,"line_end":673,"column_start":5,"column_end":99}},{"value":"/ `Uuid`:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25116,"byte_end":25127,"line_start":674,"line_end":674,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25132,"byte_end":25135,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ ```proto","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25140,"byte_end":25152,"line_start":676,"line_end":676,"column_start":5,"column_end":17}},{"value":"/ // my_application.proto","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25157,"byte_end":25184,"line_start":677,"line_end":677,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25189,"byte_end":25192,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ syntax = \"proto3\";","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25197,"byte_end":25219,"line_start":679,"line_end":679,"column_start":5,"column_end":27}},{"value":"/ package my_application;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25224,"byte_end":25251,"line_start":680,"line_end":680,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25256,"byte_end":25259,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ import \"uuid.proto\";","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25264,"byte_end":25288,"line_start":682,"line_end":682,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25293,"byte_end":25296,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ message MyMessage {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25301,"byte_end":25324,"line_start":684,"line_end":684,"column_start":5,"column_end":28}},{"value":"/     uuid.Uuid message_id = 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25329,"byte_end":25362,"line_start":685,"line_end":685,"column_start":5,"column_end":38}},{"value":"/     string some_payload = 2;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25367,"byte_end":25399,"line_start":686,"line_end":686,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25404,"byte_end":25409,"line_start":687,"line_end":687,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25414,"byte_end":25421,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25426,"byte_end":25429,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Additionally, `my_application` depends on the trait impls provided by the `uuid` crate:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25434,"byte_end":25525,"line_start":690,"line_end":690,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25530,"byte_end":25533,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25538,"byte_end":25556,"line_start":692,"line_end":692,"column_start":5,"column_end":23}},{"value":"/ // `main.rs` of `my_application`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25561,"byte_end":25597,"line_start":693,"line_end":693,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25602,"byte_end":25605,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ use uuid::{DoSomething, Uuid};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25610,"byte_end":25644,"line_start":695,"line_end":695,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25649,"byte_end":25652,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ include!(concat!(env!(\"OUT_DIR\"), \"/my_application.rs\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25657,"byte_end":25718,"line_start":697,"line_end":697,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25723,"byte_end":25726,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ pub fn process_message(msg: MyMessage) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25731,"byte_end":25775,"line_start":699,"line_end":699,"column_start":5,"column_end":49}},{"value":"/     if let Some(uuid) = msg.message_id {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25780,"byte_end":25824,"line_start":700,"line_end":700,"column_start":5,"column_end":49}},{"value":"/         uuid.do_it();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25829,"byte_end":25854,"line_start":701,"line_end":701,"column_start":5,"column_end":30}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25859,"byte_end":25868,"line_start":702,"line_end":702,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25873,"byte_end":25878,"line_start":703,"line_end":703,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25883,"byte_end":25890,"line_start":704,"line_end":704,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25895,"byte_end":25898,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Without configuring `uuid` as an external path in `my_application`'s `build.rs`, `prost`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":25903,"byte_end":25995,"line_start":706,"line_end":706,"column_start":5,"column_end":97}},{"value":"/ would compile a completely separate version of the `Uuid` type, and `process_message` would","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26000,"byte_end":26095,"line_start":707,"line_end":707,"column_start":5,"column_end":100}},{"value":"/ fail to compile. However, if `my_application` configures `uuid` as an extern path with a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26100,"byte_end":26192,"line_start":708,"line_end":708,"column_start":5,"column_end":97}},{"value":"/ call to `.extern_path(\".uuid\", \"::uuid\")`, `prost` will use the external type instead of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26197,"byte_end":26289,"line_start":709,"line_end":709,"column_start":5,"column_end":97}},{"value":"/ compiling a new version of `Uuid`. Note that the configuration could also be specified as","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26294,"byte_end":26387,"line_start":710,"line_end":710,"column_start":5,"column_end":98}},{"value":"/ `.extern_path(\".uuid.Uuid\", \"::uuid::Uuid\")` if only the `Uuid` type were externally","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26392,"byte_end":26480,"line_start":711,"line_end":711,"column_start":5,"column_end":93}},{"value":"/ provided, and not the whole `uuid` package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26485,"byte_end":26532,"line_start":712,"line_end":712,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26537,"byte_end":26540,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Usage","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26545,"byte_end":26556,"line_start":714,"line_end":714,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26561,"byte_end":26564,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ `extern_path` takes a fully-qualified Protobuf path, and the corresponding Rust path that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26569,"byte_end":26662,"line_start":716,"line_end":716,"column_start":5,"column_end":98}},{"value":"/ it will be substituted with in generated code. The Protobuf path can refer to a package or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26667,"byte_end":26761,"line_start":717,"line_end":717,"column_start":5,"column_end":99}},{"value":"/ a type, and the Rust path should correspondingly refer to a Rust module or type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26766,"byte_end":26850,"line_start":718,"line_end":718,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26855,"byte_end":26858,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26863,"byte_end":26874,"line_start":720,"line_end":720,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26879,"byte_end":26929,"line_start":721,"line_end":721,"column_start":5,"column_end":55}},{"value":"/ // Declare the `uuid` Protobuf package and all nested packages and types as externally","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":26934,"byte_end":27024,"line_start":722,"line_end":722,"column_start":5,"column_end":95}},{"value":"/ // provided by the `uuid` crate.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27029,"byte_end":27065,"line_start":723,"line_end":723,"column_start":5,"column_end":41}},{"value":"/ config.extern_path(\".uuid\", \"::uuid\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27070,"byte_end":27112,"line_start":724,"line_end":724,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27117,"byte_end":27120,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ // Declare the `foo.bar.baz` Protobuf package and all nested packages and types as","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27125,"byte_end":27211,"line_start":726,"line_end":726,"column_start":5,"column_end":91}},{"value":"/ // externally provided by the `foo_bar_baz` crate.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27216,"byte_end":27270,"line_start":727,"line_end":727,"column_start":5,"column_end":59}},{"value":"/ config.extern_path(\".foo.bar.baz\", \"::foo_bar_baz\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27275,"byte_end":27331,"line_start":728,"line_end":728,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27336,"byte_end":27339,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ // Declare the `uuid.Uuid` Protobuf type (and all nested types) as externally provided","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27344,"byte_end":27434,"line_start":730,"line_end":730,"column_start":5,"column_end":95}},{"value":"/ // by the `uuid` crate's `Uuid` type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27439,"byte_end":27480,"line_start":731,"line_end":731,"column_start":5,"column_end":46}},{"value":"/ config.extern_path(\".uuid.Uuid\", \"::uuid::Uuid\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27485,"byte_end":27538,"line_start":732,"line_end":732,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27543,"byte_end":27550,"line_start":733,"line_end":733,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28834,"byte_end":28858,"line_start":769,"line_end":769,"column_start":12,"column_end":36},"name":"file_descriptor_set_path","qualname":"<Config>::file_descriptor_set_path","value":"fn file_descriptor_set_path<P, '_>(&'_ mut Self, P) -> &'_ mut Self where\nP: Into<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" When set, the `FileDescriptorSet` generated by `protoc` is written to the provided\n filesystem path.","sig":null,"attributes":[{"value":"/ When set, the `FileDescriptorSet` generated by `protoc` is written to the provided","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27813,"byte_end":27899,"line_start":744,"line_end":744,"column_start":5,"column_end":91}},{"value":"/ filesystem path.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27904,"byte_end":27924,"line_start":745,"line_end":745,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27929,"byte_end":27932,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ This option can be used in conjunction with the [`include_bytes!`] macro and the types in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":27937,"byte_end":28030,"line_start":747,"line_end":747,"column_start":5,"column_end":98}},{"value":"/ the `prost-types` crate for implementing reflection capabilities, among other things.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28035,"byte_end":28124,"line_start":748,"line_end":748,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28129,"byte_end":28132,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28137,"byte_end":28151,"line_start":750,"line_end":750,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28156,"byte_end":28159,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ In `build.rs`:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28164,"byte_end":28182,"line_start":752,"line_end":752,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28187,"byte_end":28190,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ ```rust, no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28195,"byte_end":28214,"line_start":754,"line_end":754,"column_start":5,"column_end":24}},{"value":"/ # use std::env;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28219,"byte_end":28238,"line_start":755,"line_end":755,"column_start":5,"column_end":24}},{"value":"/ # use std::path::PathBuf;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28243,"byte_end":28272,"line_start":756,"line_end":756,"column_start":5,"column_end":34}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28277,"byte_end":28327,"line_start":757,"line_end":757,"column_start":5,"column_end":55}},{"value":"/ config.file_descriptor_set_path(","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28332,"byte_end":28368,"line_start":758,"line_end":758,"column_start":5,"column_end":41}},{"value":"/     PathBuf::from(env::var(\"OUT_DIR\").expect(\"OUT_DIR environment variable not set\"))","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28373,"byte_end":28462,"line_start":759,"line_end":759,"column_start":5,"column_end":94}},{"value":"/         .join(\"file_descriptor_set.bin\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28467,"byte_end":28513,"line_start":760,"line_end":760,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28518,"byte_end":28525,"line_start":761,"line_end":761,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28530,"byte_end":28533,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ In `lib.rs`:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28538,"byte_end":28554,"line_start":763,"line_end":763,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28559,"byte_end":28562,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28567,"byte_end":28585,"line_start":765,"line_end":765,"column_start":5,"column_end":23}},{"value":"/ let file_descriptor_set_bytes = include_bytes!(concat!(env!(\"OUT_DIR\"), \"/file_descriptor_set.bin\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28590,"byte_end":28695,"line_start":766,"line_end":766,"column_start":5,"column_end":110}},{"value":"/ let file_descriptor_set = prost_types::FileDescriptorSet::decode(&file_descriptor_set_bytes[..]).unwrap();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28700,"byte_end":28810,"line_start":767,"line_end":767,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":28815,"byte_end":28822,"line_start":768,"line_end":768,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29529,"byte_end":29544,"line_start":790,"line_end":790,"column_start":12,"column_end":27},"name":"skip_protoc_run","qualname":"<Config>::skip_protoc_run","value":"fn skip_protoc_run<'_>(&'_ mut Self) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" In combination with with `file_descriptor_set_path`, this can be used to provide a file\n descriptor set as an input file, rather than having prost-build generate the file by calling\n protoc.","sig":null,"attributes":[{"value":"/ In combination with with `file_descriptor_set_path`, this can be used to provide a file","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29020,"byte_end":29111,"line_start":777,"line_end":777,"column_start":5,"column_end":96}},{"value":"/ descriptor set as an input file, rather than having prost-build generate the file by calling","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29116,"byte_end":29212,"line_start":778,"line_end":778,"column_start":5,"column_end":101}},{"value":"/ protoc.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29217,"byte_end":29228,"line_start":779,"line_end":779,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29233,"byte_end":29236,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ In `build.rs`:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29241,"byte_end":29259,"line_start":781,"line_end":781,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29264,"byte_end":29267,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29272,"byte_end":29283,"line_start":783,"line_end":783,"column_start":5,"column_end":16}},{"value":"/ # let mut config = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29288,"byte_end":29338,"line_start":784,"line_end":784,"column_start":5,"column_end":55}},{"value":"/ config.file_descriptor_set_path(\"path/from/build/system\")","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29343,"byte_end":29404,"line_start":785,"line_end":785,"column_start":5,"column_end":66}},{"value":"/     .skip_protoc_run()","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29409,"byte_end":29435,"line_start":786,"line_end":786,"column_start":5,"column_end":31}},{"value":"/     .compile_protos(&[\"src/items.proto\"], &[\"src/\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29440,"byte_end":29497,"line_start":787,"line_end":787,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29502,"byte_end":29509,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29514,"byte_end":29517,"line_start":789,"line_end":789,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30043,"byte_end":30061,"line_start":801,"line_end":801,"column_start":12,"column_end":30},"name":"retain_enum_prefix","qualname":"<Config>::retain_enum_prefix","value":"fn retain_enum_prefix<'_>(&'_ mut Self) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the code generator to not strip the enum name from variant names.","sig":null,"attributes":[{"value":"/ Configures the code generator to not strip the enum name from variant names.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29632,"byte_end":29712,"line_start":795,"line_end":795,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29717,"byte_end":29720,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ Protobuf enum definitions commonly include the enum name as a prefix of every variant name.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29725,"byte_end":29820,"line_start":797,"line_end":797,"column_start":5,"column_end":100}},{"value":"/ This style is non-idiomatic in Rust, so by default `prost` strips the enum name prefix from","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29825,"byte_end":29920,"line_start":798,"line_end":798,"column_start":5,"column_end":100}},{"value":"/ variants which include it. Configuring this option prevents `prost` from stripping the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":29925,"byte_end":30015,"line_start":799,"line_end":799,"column_start":5,"column_end":95}},{"value":"/ prefix.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30020,"byte_end":30031,"line_start":800,"line_end":800,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30436,"byte_end":30443,"line_start":810,"line_end":810,"column_start":12,"column_end":19},"name":"out_dir","qualname":"<Config>::out_dir","value":"fn out_dir<P, '_>(&'_ mut Self, P) -> &'_ mut Self where P: Into<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Configures the output directory where generated Rust files will be written.","sig":null,"attributes":[{"value":"/ Configures the output directory where generated Rust files will be written.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30152,"byte_end":30231,"line_start":806,"line_end":806,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30236,"byte_end":30239,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ If unset, defaults to the `OUT_DIR` environment variable. `OUT_DIR` is set by Cargo when","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30244,"byte_end":30336,"line_start":808,"line_end":808,"column_start":5,"column_end":97}},{"value":"/ executing build scripts, so `out_dir` typically does not need to be configured.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30341,"byte_end":30424,"line_start":809,"line_end":809,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30745,"byte_end":30769,"line_start":820,"line_end":820,"column_start":12,"column_end":36},"name":"default_package_filename","qualname":"<Config>::default_package_filename","value":"fn default_package_filename<S, '_>(&'_ mut Self, S) -> &'_ mut Self where\nS: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Configures what filename protobufs with no package definition are written to.\n The filename will be appended with the `.rs` extension.\n","sig":null,"attributes":[{"value":"/ Configures what filename protobufs with no package definition are written to.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30588,"byte_end":30669,"line_start":818,"line_end":818,"column_start":5,"column_end":86}},{"value":"/ The filename will be appended with the `.rs` extension.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30674,"byte_end":30733,"line_start":819,"line_end":819,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31165,"byte_end":31175,"line_start":831,"line_end":831,"column_start":12,"column_end":22},"name":"prost_path","qualname":"<Config>::prost_path","value":"fn prost_path<S, '_>(&'_ mut Self, S) -> &'_ mut Self where S: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Configures the path that's used for deriving `Message` for generated messages.\n This is mainly useful for generating crates that wish to re-export prost.\n Defaults to `::prost::Message` if not specified.\n","sig":null,"attributes":[{"value":"/ Configures the path that's used for deriving `Message` for generated messages.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":30932,"byte_end":31014,"line_start":828,"line_end":828,"column_start":5,"column_end":87}},{"value":"/ This is mainly useful for generating crates that wish to re-export prost.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31019,"byte_end":31096,"line_start":829,"line_end":829,"column_start":5,"column_end":82}},{"value":"/ Defaults to `::prost::Message` if not specified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31101,"byte_end":31153,"line_start":830,"line_end":830,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31854,"byte_end":31864,"line_start":853,"line_end":853,"column_start":12,"column_end":22},"name":"protoc_arg","qualname":"<Config>::protoc_arg","value":"fn protoc_arg<S, '_>(&'_ mut Self, S) -> &'_ mut Self where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Add an argument to the `protoc` protobuf compilation invocation.","sig":null,"attributes":[{"value":"/ Add an argument to the `protoc` protobuf compilation invocation.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31322,"byte_end":31390,"line_start":839,"line_end":839,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31395,"byte_end":31398,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Example `build.rs`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31403,"byte_end":31427,"line_start":841,"line_end":841,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31432,"byte_end":31435,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31440,"byte_end":31458,"line_start":843,"line_end":843,"column_start":5,"column_end":23}},{"value":"/ # use std::io::Result;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31463,"byte_end":31489,"line_start":844,"line_end":844,"column_start":5,"column_end":31}},{"value":"/ fn main() -> Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31494,"byte_end":31523,"line_start":845,"line_end":845,"column_start":5,"column_end":34}},{"value":"/   let mut prost_build = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31528,"byte_end":31583,"line_start":846,"line_end":846,"column_start":5,"column_end":60}},{"value":"/   // Enable a protoc experimental feature.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31588,"byte_end":31634,"line_start":847,"line_end":847,"column_start":5,"column_end":51}},{"value":"/   prost_build.protoc_arg(\"--experimental_allow_proto3_optional\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31639,"byte_end":31708,"line_start":848,"line_end":848,"column_start":5,"column_end":74}},{"value":"/   prost_build.compile_protos(&[\"src/frontend.proto\", \"src/backend.proto\"], &[\"src\"])?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31713,"byte_end":31803,"line_start":849,"line_end":849,"column_start":5,"column_end":95}},{"value":"/   Ok(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31808,"byte_end":31820,"line_start":850,"line_end":850,"column_start":5,"column_end":17}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31825,"byte_end":31830,"line_start":851,"line_end":851,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":31835,"byte_end":31842,"line_start":852,"line_end":852,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32950,"byte_end":32962,"line_start":886,"line_end":886,"column_start":12,"column_end":24},"name":"include_file","qualname":"<Config>::include_file","value":"fn include_file<P, '_>(&'_ mut Self, P) -> &'_ mut Self where P: Into<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Configures the optional module filename for easy inclusion of all generated Rust files","sig":null,"attributes":[{"value":"/ Configures the optional module filename for easy inclusion of all generated Rust files","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32021,"byte_end":32111,"line_start":861,"line_end":861,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32116,"byte_end":32119,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ If set, generates a file (inside the `OUT_DIR` or `out_dir()` as appropriate) which contains","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32124,"byte_end":32220,"line_start":863,"line_end":863,"column_start":5,"column_end":101}},{"value":"/ a set of `pub mod XXX` statements combining to load all Rust files generated.  This can allow","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32225,"byte_end":32322,"line_start":864,"line_end":864,"column_start":5,"column_end":102}},{"value":"/ for a shortcut where multiple related proto files have been compiled together resulting in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32327,"byte_end":32421,"line_start":865,"line_end":865,"column_start":5,"column_end":99}},{"value":"/ a semi-complex set of includes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32426,"byte_end":32461,"line_start":866,"line_end":866,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32466,"byte_end":32469,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ Turning a need for:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32474,"byte_end":32497,"line_start":868,"line_end":868,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32502,"byte_end":32505,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run,ignore","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32510,"byte_end":32535,"line_start":870,"line_end":870,"column_start":5,"column_end":30}},{"value":"/ pub mod Foo {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32540,"byte_end":32557,"line_start":871,"line_end":871,"column_start":5,"column_end":22}},{"value":"/     pub mod Bar {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32562,"byte_end":32583,"line_start":872,"line_end":872,"column_start":5,"column_end":26}},{"value":"/         include!(concat!(env!(\"OUT_DIR\"), \"/foo.bar.rs\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32588,"byte_end":32650,"line_start":873,"line_end":873,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32655,"byte_end":32664,"line_start":874,"line_end":874,"column_start":5,"column_end":14}},{"value":"/     pub mod Baz {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32669,"byte_end":32690,"line_start":875,"line_end":875,"column_start":5,"column_end":26}},{"value":"/         include!(concat!(env!(\"OUT_DIR\"), \"/foo.baz.rs\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32695,"byte_end":32757,"line_start":876,"line_end":876,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32762,"byte_end":32771,"line_start":877,"line_end":877,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32776,"byte_end":32781,"line_start":878,"line_end":878,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32786,"byte_end":32793,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32798,"byte_end":32801,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ Into the simpler:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32806,"byte_end":32827,"line_start":881,"line_end":881,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32832,"byte_end":32835,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run,ignore","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32840,"byte_end":32865,"line_start":883,"line_end":883,"column_start":5,"column_end":30}},{"value":"/ include!(concat!(env!(\"OUT_DIR\"), \"/_includes.rs\"));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32870,"byte_end":32926,"line_start":884,"line_end":884,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":32931,"byte_end":32938,"line_start":885,"line_end":885,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33317,"byte_end":33323,"line_start":898,"line_end":898,"column_start":12,"column_end":18},"name":"format","qualname":"<Config>::format","value":"fn format<'_>(&'_ mut Self, bool) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the code generator to format the output code via `prettyplease`.","sig":null,"attributes":[{"value":"/ Configures the code generator to format the output code via `prettyplease`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33112,"byte_end":33191,"line_start":894,"line_end":894,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33196,"byte_end":33199,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ By default, this is enabled but if the `format` feature is not enabled this does","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33204,"byte_end":33288,"line_start":896,"line_end":896,"column_start":5,"column_end":89}},{"value":"/ nothing.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33293,"byte_end":33305,"line_start":897,"line_end":897,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":34054,"byte_end":34065,"line_start":920,"line_end":920,"column_start":12,"column_end":23},"name":"compile_fds","qualname":"<Config>::compile_fds","value":"fn compile_fds<'_>(&'_ mut Self, FileDescriptorSet) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Compile a [`FileDescriptorSet`] into Rust files during a Cargo build with\n additional code generator configuration options.","sig":null,"attributes":[{"value":"/ Compile a [`FileDescriptorSet`] into Rust files during a Cargo build with","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33417,"byte_end":33494,"line_start":903,"line_end":903,"column_start":5,"column_end":82}},{"value":"/ additional code generator configuration options.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33499,"byte_end":33551,"line_start":904,"line_end":904,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33556,"byte_end":33559,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ This method is like `compile_protos` function except it does not invoke `protoc`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33564,"byte_end":33648,"line_start":906,"line_end":906,"column_start":5,"column_end":89}},{"value":"/ and instead requires the user to supply a [`FileDescriptorSet`].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33653,"byte_end":33721,"line_start":907,"line_end":907,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33726,"byte_end":33729,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ # Example `build.rs`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33734,"byte_end":33758,"line_start":909,"line_end":909,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33763,"byte_end":33766,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33771,"byte_end":33789,"line_start":911,"line_end":911,"column_start":5,"column_end":23}},{"value":"/ # fn fds() -> FileDescriptorSet { todo!() }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33794,"byte_end":33841,"line_start":912,"line_end":912,"column_start":5,"column_end":52}},{"value":"/ fn main() -> std::io::Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33846,"byte_end":33884,"line_start":913,"line_end":913,"column_start":5,"column_end":43}},{"value":"/   let file_descriptor_set = fds();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33889,"byte_end":33927,"line_start":914,"line_end":914,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33932,"byte_end":33935,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/   prost_build::Config::new()","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33940,"byte_end":33972,"line_start":916,"line_end":916,"column_start":5,"column_end":37}},{"value":"/     .compile_fds(file_descriptor_set)?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":33977,"byte_end":34020,"line_start":917,"line_end":917,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":34025,"byte_end":34030,"line_start":918,"line_end":918,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":34035,"byte_end":34042,"line_start":919,"line_end":919,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":37177,"byte_end":37191,"line_start":1009,"line_end":1009,"column_start":12,"column_end":26},"name":"compile_protos","qualname":"<Config>::compile_protos","value":"fn compile_protos<'_, '_, '_, impl AsRef<Path>,\nimpl AsRef<Path>>(&'_ mut Self, &'_ [impl AsRef<Path>],\n&'_ [impl AsRef<Path>]) -> Result<()> where impl AsRef<Path>: AsRef<Path>,\nimpl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Compile `.proto` files into Rust files during a Cargo build with additional code generator\n configuration options.","sig":null,"attributes":[{"value":"/ Compile `.proto` files into Rust files during a Cargo build with additional code generator","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36322,"byte_end":36416,"line_start":989,"line_end":989,"column_start":5,"column_end":99}},{"value":"/ configuration options.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36421,"byte_end":36447,"line_start":990,"line_end":990,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36452,"byte_end":36455,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ This method is like the `prost_build::compile_protos` function, with the added ability to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36460,"byte_end":36553,"line_start":992,"line_end":992,"column_start":5,"column_end":98}},{"value":"/ specify non-default code generation options. See that function for more information about","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36558,"byte_end":36651,"line_start":993,"line_end":993,"column_start":5,"column_end":98}},{"value":"/ the arguments and generated outputs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36656,"byte_end":36696,"line_start":994,"line_end":994,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36701,"byte_end":36704,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ The `protos` and `includes` arguments are ignored if `skip_protoc_run` is specified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36709,"byte_end":36797,"line_start":996,"line_end":996,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36802,"byte_end":36805,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ # Example `build.rs`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36810,"byte_end":36834,"line_start":998,"line_end":998,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36839,"byte_end":36842,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36847,"byte_end":36865,"line_start":1000,"line_end":1000,"column_start":5,"column_end":23}},{"value":"/ # use std::io::Result;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36870,"byte_end":36896,"line_start":1001,"line_end":1001,"column_start":5,"column_end":31}},{"value":"/ fn main() -> Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36901,"byte_end":36930,"line_start":1002,"line_end":1002,"column_start":5,"column_end":34}},{"value":"/   let mut prost_build = prost_build::Config::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36935,"byte_end":36990,"line_start":1003,"line_end":1003,"column_start":5,"column_end":60}},{"value":"/   prost_build.btree_map(&[\".\"]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":36995,"byte_end":37031,"line_start":1004,"line_end":1004,"column_start":5,"column_end":41}},{"value":"/   prost_build.compile_protos(&[\"src/frontend.proto\", \"src/backend.proto\"], &[\"src\"])?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":37036,"byte_end":37126,"line_start":1005,"line_end":1005,"column_start":5,"column_end":95}},{"value":"/   Ok(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":37131,"byte_end":37143,"line_start":1006,"line_end":1006,"column_start":5,"column_end":17}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":37148,"byte_end":37153,"line_start":1007,"line_end":1007,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":37158,"byte_end":37165,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":43104,"byte_end":43112,"line_start":1174,"line_end":1174,"column_start":12,"column_end":20},"name":"generate","qualname":"<Config>::generate","value":"fn generate<'_>(&'_ mut Self, Vec<(Module, FileDescriptorProto)>)\n-> Result<HashMap<Module, String>>","parent":null,"children":[],"decl_id":null,"docs":" Processes a set of modules and file descriptors, returning a map of modules to generated\n code contents.","sig":null,"attributes":[{"value":"/ Processes a set of modules and file descriptors, returning a map of modules to generated","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":42725,"byte_end":42817,"line_start":1168,"line_end":1168,"column_start":5,"column_end":97}},{"value":"/ code contents.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":42822,"byte_end":42840,"line_start":1169,"line_end":1169,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":42845,"byte_end":42848,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ This is generally used when control over the output should not be managed by Prost,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":42853,"byte_end":42940,"line_start":1171,"line_end":1171,"column_start":5,"column_end":92}},{"value":"/ such as in a flow for a `protoc` code generating plugin. When compiling as part of a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":42945,"byte_end":43033,"line_start":1172,"line_end":1172,"column_start":5,"column_end":93}},{"value":"/ `build.rs` file, instead use [`compile_protos()`].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":43038,"byte_end":43092,"line_start":1173,"line_end":1173,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":45156,"byte_end":45163,"line_start":1229,"line_end":1229,"column_start":8,"column_end":15},"name":"default","qualname":"<Config as std::default::Default>::default","value":"fn default() -> Config","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":46052,"byte_end":46055,"line_start":1256,"line_end":1256,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Config as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":629},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47136,"byte_end":47142,"line_start":1278,"line_end":1278,"column_start":12,"column_end":18},"name":"Module","qualname":"::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":630}],"decl_id":null,"docs":" A Rust module path for a Protobuf package.\n","sig":null,"attributes":[{"value":"/ A Rust module path for a Protobuf package.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47016,"byte_end":47062,"line_start":1276,"line_end":1276,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47261,"byte_end":47271,"line_start":1284,"line_end":1284,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Module>::from_parts","value":"fn from_parts<I>(I) -> Self where I: IntoIterator, I::Item: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Construct a module path from an iterator of parts.\n","sig":null,"attributes":[{"value":"/ Construct a module path from an iterator of parts.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47195,"byte_end":47249,"line_start":1283,"line_end":1283,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47676,"byte_end":47702,"line_start":1298,"line_end":1298,"column_start":12,"column_end":38},"name":"from_protobuf_package_name","qualname":"<Module>::from_protobuf_package_name","value":"fn from_protobuf_package_name<'_>(&'_ str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a module path from a Protobuf package name.","sig":null,"attributes":[{"value":"/ Construct a module path from a Protobuf package name.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47472,"byte_end":47529,"line_start":1294,"line_end":1294,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47534,"byte_end":47537,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ Constituent parts are automatically converted to snake case in order to follow","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47542,"byte_end":47624,"line_start":1296,"line_end":1296,"column_start":5,"column_end":87}},{"value":"/ Rust module naming conventions.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47629,"byte_end":47664,"line_start":1297,"line_end":1297,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47975,"byte_end":47980,"line_start":1309,"line_end":1309,"column_start":12,"column_end":17},"name":"parts","qualname":"<Module>::parts","value":"fn parts<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the parts of the path.\n","sig":null,"attributes":[{"value":"/ An iterator over the parts of the path.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47920,"byte_end":47963,"line_start":1308,"line_end":1308,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48261,"byte_end":48276,"line_start":1316,"line_end":1316,"column_start":12,"column_end":27},"name":"to_file_name_or","qualname":"<Module>::to_file_name_or","value":"fn to_file_name_or<'_, '_>(&'_ Self, &'_ str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Format the module path into a filename for generated Rust code.","sig":null,"attributes":[{"value":"/ Format the module path into a filename for generated Rust code.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48082,"byte_end":48149,"line_start":1313,"line_end":1313,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48154,"byte_end":48157,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ If the module path is empty, `default` is used to provide the root of the filename.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48162,"byte_end":48249,"line_start":1315,"line_end":1315,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48576,"byte_end":48579,"line_start":1329,"line_end":1329,"column_start":12,"column_end":15},"name":"len","qualname":"<Module>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of parts in the module's path.\n","sig":null,"attributes":[{"value":"/ The number of parts in the module's path.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48519,"byte_end":48564,"line_start":1328,"line_end":1328,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48705,"byte_end":48713,"line_start":1334,"line_end":1334,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Module>::is_empty","value":"fn is_empty<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the module's path contains any components.\n","sig":null,"attributes":[{"value":"/ Whether the module's path contains any components.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":48639,"byte_end":48693,"line_start":1333,"line_end":1333,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49026,"byte_end":49029,"line_start":1348,"line_end":1348,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Module as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51024,"byte_end":51038,"line_start":1403,"line_end":1403,"column_start":8,"column_end":22},"name":"compile_protos","qualname":"::compile_protos","value":"fn compile_protos<'_, '_, impl AsRef<Path>,\nimpl AsRef<Path>>(&'_ [impl AsRef<Path>], &'_ [impl AsRef<Path>])\n-> Result<()> where impl AsRef<Path>: AsRef<Path>,\nimpl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Compile `.proto` files into Rust files during a Cargo build.","sig":null,"attributes":[{"value":"/ Compile `.proto` files into Rust files during a Cargo build.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49329,"byte_end":49393,"line_start":1361,"line_end":1361,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49394,"byte_end":49397,"line_start":1362,"line_end":1362,"column_start":1,"column_end":4}},{"value":"/ The generated `.rs` files are written to the Cargo `OUT_DIR` directory, suitable for use with","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49398,"byte_end":49495,"line_start":1363,"line_end":1363,"column_start":1,"column_end":98}},{"value":"/ the [include!][1] macro. See the [Cargo `build.rs` code generation][2] example for more info.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49496,"byte_end":49593,"line_start":1364,"line_end":1364,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49594,"byte_end":49597,"line_start":1365,"line_end":1365,"column_start":1,"column_end":4}},{"value":"/ This function should be called in a project's `build.rs`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49598,"byte_end":49659,"line_start":1366,"line_end":1366,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49660,"byte_end":49663,"line_start":1367,"line_end":1367,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49664,"byte_end":49679,"line_start":1368,"line_end":1368,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49680,"byte_end":49683,"line_start":1369,"line_end":1369,"column_start":1,"column_end":4}},{"value":"/ **`protos`** - Paths to `.proto` files to compile. Any transitively [imported][3] `.proto`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49684,"byte_end":49778,"line_start":1370,"line_end":1370,"column_start":1,"column_end":95}},{"value":"/ files are automatically be included.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49779,"byte_end":49819,"line_start":1371,"line_end":1371,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49820,"byte_end":49823,"line_start":1372,"line_end":1372,"column_start":1,"column_end":4}},{"value":"/ **`includes`** - Paths to directories in which to search for imports. Directories are searched","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49824,"byte_end":49922,"line_start":1373,"line_end":1373,"column_start":1,"column_end":99}},{"value":"/ in order. The `.proto` files passed in **`protos`** must be found in one of the provided","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49923,"byte_end":50015,"line_start":1374,"line_end":1374,"column_start":1,"column_end":93}},{"value":"/ include directories.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50016,"byte_end":50040,"line_start":1375,"line_end":1375,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50041,"byte_end":50044,"line_start":1376,"line_end":1376,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50045,"byte_end":50057,"line_start":1377,"line_end":1377,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50058,"byte_end":50061,"line_start":1378,"line_end":1378,"column_start":1,"column_end":4}},{"value":"/ This function can fail for a number of reasons:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50062,"byte_end":50113,"line_start":1379,"line_end":1379,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50114,"byte_end":50117,"line_start":1380,"line_end":1380,"column_start":1,"column_end":4}},{"value":"/   - Failure to locate or download `protoc`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50118,"byte_end":50165,"line_start":1381,"line_end":1381,"column_start":1,"column_end":48}},{"value":"/   - Failure to parse the `.proto`s.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50166,"byte_end":50205,"line_start":1382,"line_end":1382,"column_start":1,"column_end":40}},{"value":"/   - Failure to locate an imported `.proto`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50206,"byte_end":50253,"line_start":1383,"line_end":1383,"column_start":1,"column_end":48}},{"value":"/   - Failure to compile a `.proto` without a [package specifier][4].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50254,"byte_end":50325,"line_start":1384,"line_end":1384,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50326,"byte_end":50329,"line_start":1385,"line_end":1385,"column_start":1,"column_end":4}},{"value":"/ It's expected that this function call be `unwrap`ed in a `build.rs`; there is typically no","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50330,"byte_end":50424,"line_start":1386,"line_end":1386,"column_start":1,"column_end":95}},{"value":"/ reason to gracefully recover from errors during a build.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50425,"byte_end":50485,"line_start":1387,"line_end":1387,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50486,"byte_end":50489,"line_start":1388,"line_end":1388,"column_start":1,"column_end":4}},{"value":"/ # Example `build.rs`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50490,"byte_end":50514,"line_start":1389,"line_end":1389,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50515,"byte_end":50518,"line_start":1390,"line_end":1390,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50519,"byte_end":50537,"line_start":1391,"line_end":1391,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Result;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50538,"byte_end":50564,"line_start":1392,"line_end":1392,"column_start":1,"column_end":27}},{"value":"/ fn main() -> Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50565,"byte_end":50594,"line_start":1393,"line_end":1393,"column_start":1,"column_end":30}},{"value":"/   prost_build::compile_protos(&[\"src/frontend.proto\", \"src/backend.proto\"], &[\"src\"])?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50595,"byte_end":50686,"line_start":1394,"line_end":1394,"column_start":1,"column_end":92}},{"value":"/   Ok(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50687,"byte_end":50699,"line_start":1395,"line_end":1395,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50700,"byte_end":50705,"line_start":1396,"line_end":1396,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50706,"byte_end":50713,"line_start":1397,"line_end":1397,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50714,"byte_end":50717,"line_start":1398,"line_end":1398,"column_start":1,"column_end":4}},{"value":"/ [1]: https://doc.rust-lang.org/std/macro.include.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50718,"byte_end":50775,"line_start":1399,"line_end":1399,"column_start":1,"column_end":58}},{"value":"/ [2]: http://doc.crates.io/build-script.html#case-study-code-generation","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50776,"byte_end":50850,"line_start":1400,"line_end":1400,"column_start":1,"column_end":75}},{"value":"/ [3]: https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50851,"byte_end":50940,"line_start":1401,"line_end":1401,"column_start":1,"column_end":90}},{"value":"/ [4]: https://developers.google.com/protocol-buffers/docs/proto#packages","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":50941,"byte_end":51016,"line_start":1402,"line_end":1402,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51967,"byte_end":51978,"line_start":1428,"line_end":1428,"column_start":8,"column_end":19},"name":"compile_fds","qualname":"::compile_fds","value":"fn compile_fds(FileDescriptorSet) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Compile a [`FileDescriptorSet`] into Rust files during a Cargo build.","sig":null,"attributes":[{"value":"/ Compile a [`FileDescriptorSet`] into Rust files during a Cargo build.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51169,"byte_end":51242,"line_start":1407,"line_end":1407,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51243,"byte_end":51246,"line_start":1408,"line_end":1408,"column_start":1,"column_end":4}},{"value":"/ The generated `.rs` files are written to the Cargo `OUT_DIR` directory, suitable for use with","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51247,"byte_end":51344,"line_start":1409,"line_end":1409,"column_start":1,"column_end":98}},{"value":"/ the [include!][1] macro. See the [Cargo `build.rs` code generation][2] example for more info.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51345,"byte_end":51442,"line_start":1410,"line_end":1410,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51443,"byte_end":51446,"line_start":1411,"line_end":1411,"column_start":1,"column_end":4}},{"value":"/ This function should be called in a project's `build.rs`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51447,"byte_end":51508,"line_start":1412,"line_end":1412,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51509,"byte_end":51512,"line_start":1413,"line_end":1413,"column_start":1,"column_end":4}},{"value":"/ This function can be combined with a crate like [`protox`] which outputs a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51513,"byte_end":51591,"line_start":1414,"line_end":1414,"column_start":1,"column_end":79}},{"value":"/ [`FileDescriptorSet`] and is a pure Rust implementation of `protoc`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51592,"byte_end":51664,"line_start":1415,"line_end":1415,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51665,"byte_end":51668,"line_start":1416,"line_end":1416,"column_start":1,"column_end":4}},{"value":"/ [`protox`]: https://github.com/andrewhickman/protox","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51669,"byte_end":51724,"line_start":1417,"line_end":1417,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51725,"byte_end":51728,"line_start":1418,"line_end":1418,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51729,"byte_end":51742,"line_start":1419,"line_end":1419,"column_start":1,"column_end":14}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51743,"byte_end":51761,"line_start":1420,"line_end":1420,"column_start":1,"column_end":19}},{"value":"/ # fn fds() -> FileDescriptorSet { todo!() }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51762,"byte_end":51809,"line_start":1421,"line_end":1421,"column_start":1,"column_end":48}},{"value":"/ fn main() -> std::io::Result<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51810,"byte_end":51848,"line_start":1422,"line_end":1422,"column_start":1,"column_end":39}},{"value":"/   let file_descriptor_set = fds();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51849,"byte_end":51887,"line_start":1423,"line_end":1423,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51888,"byte_end":51891,"line_start":1424,"line_end":1424,"column_start":1,"column_end":4}},{"value":"/   prost_build::compile_fds(file_descriptor_set)?;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51892,"byte_end":51945,"line_start":1425,"line_end":1425,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51946,"byte_end":51951,"line_start":1426,"line_end":1426,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":51952,"byte_end":51959,"line_start":1427,"line_end":1427,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":52109,"byte_end":52124,"line_start":1433,"line_end":1433,"column_start":8,"column_end":23},"name":"protoc_from_env","qualname":"::protoc_from_env","value":"fn protoc_from_env() -> PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Returns the path to the `protoc` binary.\n","sig":null,"attributes":[{"value":"/ Returns the path to the `protoc` binary.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":52057,"byte_end":52101,"line_start":1432,"line_end":1432,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":53305,"byte_end":53328,"line_start":1461,"line_end":1461,"column_start":8,"column_end":31},"name":"protoc_include_from_env","qualname":"::protoc_include_from_env","value":"fn protoc_include_from_env() -> Option<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Returns the path to the Protobuf include directory.\n","sig":null,"attributes":[{"value":"/ Returns the path to the Protobuf include directory.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":53242,"byte_end":53297,"line_start":1460,"line_end":1460,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":64009,"byte_end":64017,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","byte_start":77817,"byte_end":77830,"line_start":46,"line_end":46,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","byte_start":115680,"byte_end":115687,"line_start":1179,"line_end":1179,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","byte_start":116223,"byte_end":116232,"line_start":1197,"line_end":1197,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/extern_paths.rs","byte_start":118589,"byte_end":118600,"line_start":25,"line_end":25,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/message_graph.rs","byte_start":131551,"byte_end":131563,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":134719,"byte_end":134726,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":136752,"byte_end":136756,"line_start":65,"line_end":65,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":137062,"byte_end":137066,"line_start":78,"line_end":78,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":137466,"byte_end":137470,"line_start":95,"line_end":95,"column_start":42,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7150,"byte_end":7157,"line_start":216,"line_end":216,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7496,"byte_end":7505,"line_start":232,"line_end":232,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8437,"byte_end":8443,"line_start":264,"line_end":264,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":480},{"krate":0,"index":486},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":45140,"byte_end":45146,"line_start":1228,"line_end":1228,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":46036,"byte_end":46042,"line_start":1255,"line_end":1255,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47182,"byte_end":47188,"line_start":1282,"line_end":1282,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49010,"byte_end":49016,"line_start":1347,"line_end":1347,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/ast.rs","byte_start":64009,"byte_end":64017,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","byte_start":77817,"byte_end":77830,"line_start":46,"line_end":46,"column_start":10,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","byte_start":115680,"byte_end":115687,"line_start":1179,"line_end":1179,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/code_generator.rs","byte_start":116223,"byte_end":116232,"line_start":1197,"line_end":1197,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/extern_paths.rs","byte_start":118589,"byte_end":118600,"line_start":25,"line_end":25,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/message_graph.rs","byte_start":131551,"byte_end":131563,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":134719,"byte_end":134726,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":136752,"byte_end":136756,"line_start":65,"line_end":65,"column_start":13,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":137062,"byte_end":137066,"line_start":78,"line_end":78,"column_start":37,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/path.rs","byte_start":137466,"byte_end":137470,"line_start":95,"line_end":95,"column_start":42,"column_end":46},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":8881}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7150,"byte_end":7157,"line_start":216,"line_end":216,"column_start":18,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":603},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":7496,"byte_end":7505,"line_start":232,"line_end":232,"column_start":18,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":616},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":8437,"byte_end":8443,"line_start":264,"line_end":264,"column_start":6,"column_end":12},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":45140,"byte_end":45146,"line_start":1228,"line_end":1228,"column_start":27,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":46036,"byte_end":46042,"line_start":1255,"line_end":1255,"column_start":21,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":47182,"byte_end":47188,"line_start":1282,"line_end":1282,"column_start":6,"column_end":12},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-build-0.11.9/src/lib.rs","byte_start":49010,"byte_end":49016,"line_start":1347,"line_end":1347,"column_start":23,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":10302}}]}