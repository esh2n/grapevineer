{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3","program":"/Users/es/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","petgraph","--edition=2018","/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=22c770ed93456e87","-C","extra-filename=-22c770ed93456e87","--out-dir","/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps","-L","dependency=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps","--extern","fixedbitset=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libfixedbitset-de376efd72887e61.rmeta","--extern","indexmap=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libindexmap-1a236f843746fa67.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/es/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libpetgraph-22c770ed93456e87.rmeta"},"prelude":{"crate_id":{"name":"petgraph","disambiguator":[18304979700700949882,0]},"crate_root":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src","external_crates":[{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16128539464339909492,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5119190964148522055,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10836880961308110442,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9122960886372739080,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16262469955255852816,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6458319553461162962,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12001007181761242293,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17631836945948346775,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[14397519445266417684,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8668729914222175237,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6081650140881955662,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5498968616666872476,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2537156866219993108,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[16178185567501436822,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3784531562979233881,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17755498883195052578,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11111166150786070161,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[518337477295170700,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[6962753159787162907,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","num":20,"id":{"name":"fixedbitset","disambiguator":[16214142956683534141,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","num":21,"id":{"name":"indexmap","disambiguator":[6638787429486228540,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","num":22,"id":{"name":"hashbrown","disambiguator":[13571119530625034222,0]}}],"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":0,"byte_end":9317,"line_start":1,"line_end":306,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5351,"byte_end":5356,"line_start":122,"line_end":122,"column_start":23,"column_end":28},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5327},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5386,"byte_end":5394,"line_start":124,"line_end":124,"column_start":28,"column_end":36},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5328},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5386,"byte_end":5394,"line_start":124,"line_end":124,"column_start":28,"column_end":36},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5324},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5396,"byte_end":5404,"line_start":124,"line_end":124,"column_start":38,"column_end":46},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5325},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5396,"byte_end":5404,"line_start":124,"line_end":124,"column_start":38,"column_end":46},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17434,"byte_end":17435,"line_start":65,"line_end":65,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17461,"byte_end":17462,"line_start":66,"line_end":66,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Reversed","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17544,"byte_end":17545,"line_start":73,"line_end":73,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"depth_first_search, DfsEvent","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17572,"byte_end":17573,"line_start":74,"line_end":74,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"DfsPostOrder, Bfs, Dfs, Walker","parent":{"krate":0,"index":36}},{"kind":"Use","ref_id":{"krate":0,"index":2502},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89472,"byte_end":89481,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":776}},{"kind":"Use","ref_id":{"krate":0,"index":2503},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89483,"byte_end":89492,"line_start":12,"line_end":12,"column_start":35,"column_end":44},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":776}},{"kind":"Use","ref_id":{"krate":0,"index":1058},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109868,"byte_end":109873,"line_start":36,"line_end":36,"column_start":16,"column_end":21},"alias_span":null,"name":"astar","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1100},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109898,"byte_end":109910,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"alias_span":null,"name":"bellman_ford","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1103},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109912,"byte_end":109931,"line_start":37,"line_end":37,"column_start":38,"column_end":57},"alias_span":null,"name":"find_negative_cycle","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1147},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109952,"byte_end":109960,"line_start":38,"line_end":38,"column_start":19,"column_end":27},"alias_span":null,"name":"dijkstra","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1263},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109988,"byte_end":110011,"line_start":39,"line_end":39,"column_start":27,"column_end":50},"alias_span":null,"name":"greedy_feedback_arc_set","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110037,"byte_end":110051,"line_start":40,"line_end":40,"column_start":25,"column_end":39},"alias_span":null,"name":"floyd_warshall","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1518},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110080,"byte_end":110093,"line_start":42,"line_end":42,"column_start":5,"column_end":18},"alias_span":null,"name":"is_isomorphic","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110095,"byte_end":110117,"line_start":42,"line_end":42,"column_start":20,"column_end":42},"alias_span":null,"name":"is_isomorphic_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110119,"byte_end":110141,"line_start":42,"line_end":42,"column_start":44,"column_end":66},"alias_span":null,"name":"is_isomorphic_subgraph","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1529},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110143,"byte_end":110174,"line_start":42,"line_end":42,"column_start":68,"column_end":99},"alias_span":null,"name":"is_isomorphic_subgraph_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1534},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110180,"byte_end":110206,"line_start":43,"line_end":43,"column_start":5,"column_end":31},"alias_span":null,"name":"subgraph_isomorphisms_iter","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110236,"byte_end":110251,"line_start":45,"line_end":45,"column_start":26,"column_end":41},"alias_span":null,"name":"k_shortest_path","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1663},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110272,"byte_end":110287,"line_start":46,"line_end":46,"column_start":20,"column_end":35},"alias_span":null,"name":"greedy_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1683},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110289,"byte_end":110305,"line_start":46,"line_end":46,"column_start":37,"column_end":53},"alias_span":null,"name":"maximum_matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1613},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110307,"byte_end":110315,"line_start":46,"line_end":46,"column_start":55,"column_end":63},"alias_span":null,"name":"Matching","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":1719},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110340,"byte_end":110356,"line_start":47,"line_end":47,"column_start":23,"column_end":39},"alias_span":null,"name":"all_simple_paths","value":"","parent":{"krate":0,"index":1020}},{"kind":"Use","ref_id":{"krate":0,"index":2502},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251641,"byte_end":251650,"line_start":18,"line_end":18,"column_start":24,"column_end":33},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":1990}},{"kind":"Use","ref_id":{"krate":0,"index":2503},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251652,"byte_end":251661,"line_start":18,"line_end":18,"column_start":35,"column_end":44},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":1990}},{"kind":"Use","ref_id":{"krate":0,"index":2582},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379839,"byte_end":379846,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"alias_span":null,"name":"DiGraph","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":4991},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379848,"byte_end":379857,"line_start":8,"line_end":8,"column_start":33,"column_end":42},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":2574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379859,"byte_end":379864,"line_start":8,"line_end":8,"column_start":44,"column_end":49},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":4958},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379866,"byte_end":379875,"line_start":8,"line_end":8,"column_start":51,"column_end":60},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":2586},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379877,"byte_end":379884,"line_start":8,"line_end":8,"column_start":62,"column_end":69},"alias_span":null,"name":"UnGraph","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":3634},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380161,"byte_end":380164,"line_start":16,"line_end":16,"column_start":24,"column_end":27},"alias_span":null,"name":"Bfs","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":3607},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380166,"byte_end":380169,"line_start":16,"line_end":16,"column_start":29,"column_end":32},"alias_span":null,"name":"Dfs","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":3620},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380171,"byte_end":380183,"line_start":16,"line_end":16,"column_start":34,"column_end":46},"alias_span":null,"name":"DfsPostOrder","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5348},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380220,"byte_end":380228,"line_start":18,"line_end":18,"column_start":17,"column_end":25},"alias_span":null,"name":"Directed","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5323},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380230,"byte_end":380239,"line_start":18,"line_end":18,"column_start":27,"column_end":36},"alias_span":null,"name":"Direction","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5327},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380241,"byte_end":380249,"line_start":18,"line_end":18,"column_start":38,"column_end":46},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5328},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380241,"byte_end":380249,"line_start":18,"line_end":18,"column_start":38,"column_end":46},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5324},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380251,"byte_end":380259,"line_start":18,"line_end":18,"column_start":48,"column_end":56},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5325},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380251,"byte_end":380259,"line_start":18,"line_end":18,"column_start":48,"column_end":56},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":5354},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380261,"byte_end":380271,"line_start":18,"line_end":18,"column_start":58,"column_end":68},"alias_span":null,"name":"Undirected","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":380315,"byte_end":380322,"line_start":21,"line_end":21,"column_start":23,"column_end":30},"alias_span":null,"name":"EdgeRef","value":"","parent":{"krate":0,"index":3351}},{"kind":"Use","ref_id":{"krate":0,"index":2542},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6127,"byte_end":6137,"line_start":163,"line_end":163,"column_start":9,"column_end":19},"alias_span":null,"name":"edge_index","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2540},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6139,"byte_end":6149,"line_start":163,"line_end":163,"column_start":21,"column_end":31},"alias_span":null,"name":"node_index","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2502},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6151,"byte_end":6160,"line_start":163,"line_end":163,"column_start":33,"column_end":42},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2582},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6162,"byte_end":6169,"line_start":163,"line_end":163,"column_start":44,"column_end":51},"alias_span":null,"name":"DiGraph","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5035},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6171,"byte_end":6175,"line_start":163,"line_end":163,"column_start":53,"column_end":57},"alias_span":null,"name":"Edge","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":4991},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6177,"byte_end":6186,"line_start":163,"line_end":163,"column_start":59,"column_end":68},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5149},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6188,"byte_end":6199,"line_start":163,"line_end":163,"column_start":70,"column_end":81},"alias_span":null,"name":"EdgeIndices","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5159},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6201,"byte_end":6214,"line_start":163,"line_end":163,"column_start":83,"column_end":96},"alias_span":null,"name":"EdgeReference","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5187},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6224,"byte_end":6238,"line_start":164,"line_end":164,"column_start":9,"column_end":23},"alias_span":null,"name":"EdgeReferences","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5129},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6240,"byte_end":6254,"line_start":164,"line_end":164,"column_start":25,"column_end":39},"alias_span":null,"name":"EdgeWeightsMut","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5082},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6256,"byte_end":6261,"line_start":164,"line_end":164,"column_start":41,"column_end":46},"alias_span":null,"name":"Edges","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5099},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6263,"byte_end":6278,"line_start":164,"line_end":164,"column_start":48,"column_end":63},"alias_span":null,"name":"EdgesConnecting","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5048},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6280,"byte_end":6289,"line_start":164,"line_end":164,"column_start":65,"column_end":74},"alias_span":null,"name":"Externals","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":3222},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6291,"byte_end":6297,"line_start":164,"line_end":164,"column_start":76,"column_end":82},"alias_span":null,"name":"Frozen","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6299,"byte_end":6304,"line_start":164,"line_end":164,"column_start":84,"column_end":89},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2879},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6314,"byte_end":6324,"line_start":165,"line_end":165,"column_start":9,"column_end":19},"alias_span":null,"name":"GraphIndex","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2503},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6326,"byte_end":6335,"line_start":165,"line_end":165,"column_start":21,"column_end":30},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5068},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6337,"byte_end":6346,"line_start":165,"line_end":165,"column_start":32,"column_end":41},"alias_span":null,"name":"Neighbors","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5024},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6348,"byte_end":6352,"line_start":165,"line_end":165,"column_start":43,"column_end":47},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":4958},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6354,"byte_end":6363,"line_start":165,"line_end":165,"column_start":49,"column_end":58},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5139},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6365,"byte_end":6376,"line_start":165,"line_end":165,"column_start":60,"column_end":71},"alias_span":null,"name":"NodeIndices","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5172},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6378,"byte_end":6392,"line_start":165,"line_end":165,"column_start":73,"column_end":87},"alias_span":null,"name":"NodeReferences","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5119},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6402,"byte_end":6416,"line_start":166,"line_end":166,"column_start":9,"column_end":23},"alias_span":null,"name":"NodeWeightsMut","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2586},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6418,"byte_end":6425,"line_start":166,"line_end":166,"column_start":25,"column_end":32},"alias_span":null,"name":"UnGraph","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":2890},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6427,"byte_end":6440,"line_start":166,"line_end":166,"column_start":34,"column_end":47},"alias_span":null,"name":"WalkNeighbors","value":"","parent":{"krate":0,"index":3397}},{"kind":"Use","ref_id":{"krate":0,"index":5323},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7485,"byte_end":7494,"line_start":215,"line_end":215,"column_start":16,"column_end":25},"alias_span":null,"name":"EdgeDirection","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":0,"byte_end":9317,"line_start":1,"line_end":306,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":36},{"krate":0,"index":680},{"krate":0,"index":776},{"krate":0,"index":1020},{"krate":0,"index":1990},{"krate":0,"index":2337},{"krate":0,"index":2429},{"krate":0,"index":3227},{"krate":0,"index":3262},{"krate":0,"index":3272},{"krate":0,"index":3303},{"krate":0,"index":3323},{"krate":0,"index":3332},{"krate":0,"index":3351},{"krate":0,"index":3397},{"krate":0,"index":3474},{"krate":0,"index":5323},{"krate":0,"index":5330},{"krate":0,"index":5331},{"krate":0,"index":5333},{"krate":0,"index":5334},{"krate":0,"index":5336},{"krate":0,"index":5338},{"krate":0,"index":5340},{"krate":0,"index":5341},{"krate":0,"index":5343},{"krate":0,"index":5346},{"krate":0,"index":3475},{"krate":0,"index":3478},{"krate":0,"index":5348},{"krate":0,"index":5349},{"krate":0,"index":5350},{"krate":0,"index":5352},{"krate":0,"index":5354},{"krate":0,"index":5355},{"krate":0,"index":5356},{"krate":0,"index":5358},{"krate":0,"index":3481},{"krate":0,"index":3483},{"krate":0,"index":3485},{"krate":0,"index":3487},{"krate":0,"index":3491},{"krate":0,"index":3496},{"krate":0,"index":3501},{"krate":0,"index":3507},{"krate":0,"index":3513}],"decl_id":null,"docs":" `petgraph` is a graph data structure library.","sig":null,"attributes":[{"value":"/ `petgraph` is a graph data structure library.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":0,"byte_end":49,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":50,"byte_end":53,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Graphs are collections of nodes, and edges between nodes. `petgraph`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":54,"byte_end":126,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ provides several [graph types](index.html#graph-types) (each differing in the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":127,"byte_end":208,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ tradeoffs taken in their internal representation),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":209,"byte_end":263,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/ [algorithms](./algo/index.html#functions) on those graphs, and functionality to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":264,"byte_end":347,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"/ [output graphs](./dot/struct.Dot.html) in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":348,"byte_end":393,"line_start":7,"line_end":7,"column_start":1,"column_end":46}},{"value":"/ [`graphviz`](https://www.graphviz.org/) format. Both nodes and edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":394,"byte_end":466,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/ can have arbitrary associated data, and edges may be either directed or undirected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":467,"byte_end":554,"line_start":9,"line_end":9,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":555,"byte_end":558,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":559,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":573,"byte_end":576,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":577,"byte_end":588,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use petgraph::graph::{NodeIndex, UnGraph};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":589,"byte_end":635,"line_start":14,"line_end":14,"column_start":1,"column_end":47}},{"value":"/ use petgraph::algo::{dijkstra, min_spanning_tree};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":636,"byte_end":690,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ use petgraph::data::FromElements;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":691,"byte_end":728,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ use petgraph::dot::{Dot, Config};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":729,"byte_end":766,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":767,"byte_end":770,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Create an undirected graph with `i32` nodes and edges with `()` associated data.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":771,"byte_end":858,"line_start":19,"line_end":19,"column_start":1,"column_end":88}},{"value":"/ let g = UnGraph::<i32, ()>::from_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":859,"byte_end":904,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/     (1, 2), (2, 3), (3, 4),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":905,"byte_end":936,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/     (1, 4)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":937,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":955,"byte_end":958,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Find the shortest path from `1` to `4` using `1` as the cost for every edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":959,"byte_end":1042,"line_start":24,"line_end":24,"column_start":1,"column_end":84}},{"value":"/ let node_map = dijkstra(&g, 1.into(), Some(4.into()), |_| 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1043,"byte_end":1108,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(&1i32, node_map.get(&NodeIndex::new(4)).unwrap());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1109,"byte_end":1174,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // Get the minimum spanning tree of the graph as a new graph, and check that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1179,"byte_end":1259,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ // one edge was trimmed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1260,"byte_end":1288,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/ let mst = UnGraph::<_, _>::from_elements(min_spanning_tree(&g));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1289,"byte_end":1357,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(g.raw_edges().len() - 1, mst.raw_edges().len());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1358,"byte_end":1421,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1422,"byte_end":1425,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // Output the tree to `graphviz` `DOT` format","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1426,"byte_end":1475,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/ println!(\"{:?}\", Dot::with_config(&mst, &[Config::EdgeNoLabel]));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1476,"byte_end":1545,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ // graph {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1546,"byte_end":1560,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/ //     0 [label=\"\\\"0\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1561,"byte_end":1589,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ //     1 [label=\"\\\"0\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1590,"byte_end":1618,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ //     2 [label=\"\\\"0\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1619,"byte_end":1647,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ //     3 [label=\"\\\"0\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1648,"byte_end":1676,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ //     1 -- 2","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1677,"byte_end":1694,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ //     3 -- 4","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1695,"byte_end":1712,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ //     2 -- 3","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1713,"byte_end":1730,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/ // }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1731,"byte_end":1739,"line_start":43,"line_end":43,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1740,"byte_end":1747,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1748,"byte_end":1751,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Graph types","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1752,"byte_end":1769,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1770,"byte_end":1773,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ * [`Graph`](./graph/struct.Graph.html) -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1774,"byte_end":1818,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/   An adjacency list graph with arbitrary associated data.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1819,"byte_end":1880,"line_start":49,"line_end":49,"column_start":1,"column_end":62}},{"value":"/ * [`StableGraph`](./stable_graph/struct.StableGraph.html) -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1881,"byte_end":1944,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/   Similar to `Graph`, but it keeps indices stable across removals.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":1945,"byte_end":2015,"line_start":51,"line_end":51,"column_start":1,"column_end":71}},{"value":"/ * [`GraphMap`](./graphmap/struct.GraphMap.html) -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2016,"byte_end":2069,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"/   An adjacency list graph backed by a hash table. The node identifiers are the keys","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2070,"byte_end":2157,"line_start":53,"line_end":53,"column_start":1,"column_end":88}},{"value":"/   into the table.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2158,"byte_end":2179,"line_start":54,"line_end":54,"column_start":1,"column_end":22}},{"value":"/ * [`MatrixGraph`](./matrix_graph/struct.MatrixGraph.html) -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2180,"byte_end":2243,"line_start":55,"line_end":55,"column_start":1,"column_end":64}},{"value":"/   An adjacency matrix graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2244,"byte_end":2276,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ * [`CSR`](./csr/struct.Csr.html) -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2277,"byte_end":2315,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/   A sparse adjacency matrix graph with arbitrary associated data.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2316,"byte_end":2385,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2386,"byte_end":2389,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ### Generic parameters","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2390,"byte_end":2416,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2417,"byte_end":2420,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Each graph type is generic over a handful of parameters. All graphs share 3 common","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2421,"byte_end":2507,"line_start":62,"line_end":62,"column_start":1,"column_end":87}},{"value":"/ parameters, `N`, `E`, and `Ty`. This is a broad overview of what those are. Each","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2508,"byte_end":2592,"line_start":63,"line_end":63,"column_start":1,"column_end":85}},{"value":"/ type's documentation will have finer detail on these parameters.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2593,"byte_end":2661,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2662,"byte_end":2665,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ `N` & `E` are called *weights* in this implementation, and are associated with","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2666,"byte_end":2748,"line_start":66,"line_end":66,"column_start":1,"column_end":83}},{"value":"/ nodes and edges respectively. They can generally be of arbitrary type, and don't have to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2749,"byte_end":2841,"line_start":67,"line_end":67,"column_start":1,"column_end":93}},{"value":"/ be what you might conventionally consider weight-like. For example, using `&str` for `N`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2842,"byte_end":2934,"line_start":68,"line_end":68,"column_start":1,"column_end":93}},{"value":"/ will work. Many algorithms that require costs let you provide a cost function that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":2935,"byte_end":3021,"line_start":69,"line_end":69,"column_start":1,"column_end":87}},{"value":"/ translates your `N` and `E` weights into costs appropriate to the algorithm. Some graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3022,"byte_end":3113,"line_start":70,"line_end":70,"column_start":1,"column_end":92}},{"value":"/ types and choices do impose bounds on `N` or `E`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3114,"byte_end":3167,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"/ [`min_spanning_tree`](./algo/fn.min_spanning_tree.html) for example requires edge weights that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3168,"byte_end":3266,"line_start":72,"line_end":72,"column_start":1,"column_end":99}},{"value":"/ implement [`PartialOrd`](https://doc.rust-lang.org/stable/core/cmp/trait.PartialOrd.html).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3267,"byte_end":3361,"line_start":73,"line_end":73,"column_start":1,"column_end":95}},{"value":"/ [`GraphMap`](./graphmap/struct.GraphMap.html) requires node weights that can serve as hash","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3362,"byte_end":3456,"line_start":74,"line_end":74,"column_start":1,"column_end":95}},{"value":"/ map keys, since that graph type does not create standalone node indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3457,"byte_end":3533,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3534,"byte_end":3537,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ `Ty` controls whether edges are [`Directed`](./enum.Directed.html) or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3538,"byte_end":3611,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/ [`Undirected`](./enum.Undirected.html).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3612,"byte_end":3655,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3656,"byte_end":3659,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ `Ix` appears on graph types that use indices. It is exposed so you can control","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3660,"byte_end":3742,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/ the size of node and edge indices, and therefore the memory footprint of your graphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3743,"byte_end":3832,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/ Allowed values are `u8`, `u16`, `u32`, and `usize`, with `u32` being the default.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3833,"byte_end":3918,"line_start":82,"line_end":82,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3919,"byte_end":3922,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ### Shorthand types","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3923,"byte_end":3946,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3947,"byte_end":3950,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Each graph type vends a few shorthand type definitions that name some specific","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":3951,"byte_end":4033,"line_start":86,"line_end":86,"column_start":1,"column_end":83}},{"value":"/ generic choices. For example, [`DiGraph<_, _>`](./graph/type.DiGraph.html) is shorthand","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4034,"byte_end":4125,"line_start":87,"line_end":87,"column_start":1,"column_end":92}},{"value":"/ for [`Graph<_, _, Directed>`](graph/struct.Graph.html).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4126,"byte_end":4185,"line_start":88,"line_end":88,"column_start":1,"column_end":60}},{"value":"/ [`UnMatrix<_, _>`](./matrix_graph/type.UnMatrix.html) is shorthand for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4186,"byte_end":4260,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ [`MatrixGraph<_, _, Undirected>`](./matrix_graph/struct.MatrixGraph.html). Each graph type's","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4261,"byte_end":4357,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ module documentation lists the available shorthand types.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4358,"byte_end":4419,"line_start":91,"line_end":91,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4420,"byte_end":4423,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Crate features","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4424,"byte_end":4444,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4445,"byte_end":4448,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ * **serde-1** -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4449,"byte_end":4468,"line_start":95,"line_end":95,"column_start":1,"column_end":20}},{"value":"/   Defaults off. Enables serialization for ``Graph, StableGraph, GraphMap`` using","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4469,"byte_end":4553,"line_start":96,"line_end":96,"column_start":1,"column_end":85}},{"value":"/   [`serde 1.0`](https://crates.io/crates/serde). May require a more recent version","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4554,"byte_end":4640,"line_start":97,"line_end":97,"column_start":1,"column_end":87}},{"value":"/   of Rust than petgraph alone.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4641,"byte_end":4675,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"/ * **graphmap** -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4676,"byte_end":4696,"line_start":99,"line_end":99,"column_start":1,"column_end":21}},{"value":"/   Defaults on. Enables [`GraphMap`](./graphmap/struct.GraphMap.html).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4697,"byte_end":4770,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"/ * **stable_graph** -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4771,"byte_end":4795,"line_start":101,"line_end":101,"column_start":1,"column_end":25}},{"value":"/   Defaults on. Enables [`StableGraph`](./stable_graph/struct.StableGraph.html).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4796,"byte_end":4879,"line_start":102,"line_end":102,"column_start":1,"column_end":84}},{"value":"/ * **matrix_graph** -","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4880,"byte_end":4904,"line_start":103,"line_end":103,"column_start":1,"column_end":25}},{"value":"/   Defaults on. Enables [`MatrixGraph`](./matrix_graph/struct.MatrixGraph.html).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4905,"byte_end":4988,"line_start":104,"line_end":104,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":4989,"byte_end":4992,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"visit","qualname":"::visit","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":46},{"krate":0,"index":94},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":3665},{"krate":0,"index":3666},{"krate":0,"index":3669},{"krate":0,"index":3674},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":3679},{"krate":0,"index":3680},{"krate":0,"index":3683},{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3692},{"krate":0,"index":3693},{"krate":0,"index":3696},{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3705},{"krate":0,"index":3710},{"krate":0,"index":3711},{"krate":0,"index":3714},{"krate":0,"index":3719},{"krate":0,"index":3724},{"krate":0,"index":3725},{"krate":0,"index":3728},{"krate":0,"index":3733},{"krate":0,"index":253},{"krate":0,"index":261},{"krate":0,"index":272},{"krate":0,"index":3738},{"krate":0,"index":3739},{"krate":0,"index":3743},{"krate":0,"index":277},{"krate":0,"index":284},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3754},{"krate":0,"index":3760},{"krate":0,"index":3761},{"krate":0,"index":3764},{"krate":0,"index":3768},{"krate":0,"index":3769},{"krate":0,"index":3773},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3784},{"krate":0,"index":3790},{"krate":0,"index":3791},{"krate":0,"index":3793},{"krate":0,"index":3797},{"krate":0,"index":3798},{"krate":0,"index":3799},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3807},{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3818},{"krate":0,"index":3824},{"krate":0,"index":3825},{"krate":0,"index":3827},{"krate":0,"index":305},{"krate":0,"index":558}],"decl_id":null,"docs":" Graph traits and graph traversals.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5496,"byte_end":5508,"line_start":131,"line_end":131,"column_start":1,"column_end":13}},{"value":"/ Graph traits and graph traversals.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":13954,"byte_end":13992,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":13993,"byte_end":13996,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ### The `Into-` Traits","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":13997,"byte_end":14023,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14024,"byte_end":14027,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Graph traits like [`IntoNeighbors`][in] create iterators and use the same","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14028,"byte_end":14105,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ pattern that `IntoIterator` does: the trait takes a reference to a graph,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14106,"byte_end":14183,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ and produces an iterator. These traits are quite composable, but with the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14184,"byte_end":14261,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ limitation that they only use shared references to graphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14262,"byte_end":14324,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14325,"byte_end":14328,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ### Graph Traversal","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14329,"byte_end":14352,"line_start":10,"line_end":10,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14353,"byte_end":14356,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Dfs`](struct.Dfs.html), [`Bfs`][bfs], [`DfsPostOrder`][dfspo] and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14357,"byte_end":14428,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ [`Topo`][topo]  are basic visitors and they use “walker” methods: the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14429,"byte_end":14506,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ visitors don't hold the graph as borrowed during traversal, only for the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14507,"byte_end":14583,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ `.next()` call on the walker. They can be converted to iterators","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14584,"byte_end":14652,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ through the [`Walker`][w] trait.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14653,"byte_end":14689,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14690,"byte_end":14693,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ There is also the callback based traversal [`depth_first_search`][dfs].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14694,"byte_end":14769,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14770,"byte_end":14773,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [bfs]: struct.Bfs.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14774,"byte_end":14800,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/ [dfspo]: struct.DfsPostOrder.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14801,"byte_end":14838,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ [topo]: struct.Topo.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14839,"byte_end":14867,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ [dfs]: fn.depth_first_search.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14868,"byte_end":14905,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/ [w]: trait.Walker.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14906,"byte_end":14932,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14933,"byte_end":14936,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ### Other Graph Traits","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14937,"byte_end":14963,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14964,"byte_end":14967,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The traits are rather loosely coupled at the moment (which is intentional,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":14968,"byte_end":15046,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ but will develop a bit), and there are traits missing that could be added.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15047,"byte_end":15125,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15126,"byte_end":15129,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Not much is needed to be able to use the visitors on a graph. A graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15130,"byte_end":15203,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ needs to define [`GraphBase`][gb], [`IntoNeighbors`][in] and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15204,"byte_end":15268,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/ [`Visitable`][vis] as a minimum.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15269,"byte_end":15305,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15306,"byte_end":15309,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [gb]: trait.GraphBase.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15310,"byte_end":15340,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ [in]: trait.IntoNeighbors.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15341,"byte_end":15375,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/ [vis]: trait.Visitable.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15376,"byte_end":15407,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15408,"byte_end":15411,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ### Graph Trait Implementations","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15412,"byte_end":15447,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15448,"byte_end":15451,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The following table lists the traits that are implemented for each graph type:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15452,"byte_end":15534,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15535,"byte_end":15538,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ |                       | Graph | StableGraph | GraphMap | MatrixGraph | Csr   | List  |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15539,"byte_end":15631,"line_start":43,"line_end":43,"column_start":1,"column_end":93}},{"value":"/ | --------------------- | :---: | :---------: | :------: | :---------: | :---: | :---: |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15632,"byte_end":15724,"line_start":44,"line_end":44,"column_start":1,"column_end":93}},{"value":"/ | GraphBase             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15725,"byte_end":15817,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ | GraphProp             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15818,"byte_end":15910,"line_start":46,"line_end":46,"column_start":1,"column_end":93}},{"value":"/ | NodeCount             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":15911,"byte_end":16003,"line_start":47,"line_end":47,"column_start":1,"column_end":93}},{"value":"/ | NodeIndexable         | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16004,"byte_end":16096,"line_start":48,"line_end":48,"column_start":1,"column_end":93}},{"value":"/ | NodeCompactIndexable  | x     |             |    x     |             | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16097,"byte_end":16189,"line_start":49,"line_end":49,"column_start":1,"column_end":93}},{"value":"/ | EdgeCount             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16190,"byte_end":16282,"line_start":50,"line_end":50,"column_start":1,"column_end":93}},{"value":"/ | EdgeIndexable         | x     |  x          |    x     |             |       |       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16283,"byte_end":16375,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ | Data                  | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16376,"byte_end":16468,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/ | IntoNodeIdentifiers   | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16469,"byte_end":16561,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"/ | IntoNodeReferences    | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16562,"byte_end":16654,"line_start":54,"line_end":54,"column_start":1,"column_end":93}},{"value":"/ | IntoEdgeReferences    | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16655,"byte_end":16747,"line_start":55,"line_end":55,"column_start":1,"column_end":93}},{"value":"/ | IntoNeighbors         | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16748,"byte_end":16840,"line_start":56,"line_end":56,"column_start":1,"column_end":93}},{"value":"/ | IntoNeighborsDirected | x     |  x          |    x     | x           |       |       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16841,"byte_end":16933,"line_start":57,"line_end":57,"column_start":1,"column_end":93}},{"value":"/ | IntoEdges             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":16934,"byte_end":17026,"line_start":58,"line_end":58,"column_start":1,"column_end":93}},{"value":"/ | IntoEdgesDirected     | x     |  x          |    x     | x           |       |       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17027,"byte_end":17119,"line_start":59,"line_end":59,"column_start":1,"column_end":93}},{"value":"/ | Visitable             | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17120,"byte_end":17212,"line_start":60,"line_end":60,"column_start":1,"column_end":93}},{"value":"/ | GetAdjacencyMatrix    | x     |  x          |    x     | x           | x     |  x    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17213,"byte_end":17305,"line_start":61,"line_end":61,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":3536},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":32963,"byte_end":32967,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Time","qualname":"::visit::dfsvisit::Time","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strictly monotonically increasing event time for a depth first search.\n","sig":null,"attributes":[{"value":"/ Strictly monotonically increasing event time for a depth first search.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":32800,"byte_end":32874,"line_start":4,"line_end":4,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":3538},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":32968,"byte_end":32977,"line_start":6,"line_end":6,"column_start":17,"column_end":26},"name":"0","qualname":"::visit::dfsvisit::Time::0","value":"usize","parent":{"krate":0,"index":3536},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3562},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33084,"byte_end":33092,"line_start":11,"line_end":11,"column_start":5,"column_end":13},"name":"Discover","qualname":"::visit::dfsvisit::DfsEvent::Discover","value":"DfsEvent::Discover(N, Time)","parent":{"krate":0,"index":3560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3564},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33093,"byte_end":33094,"line_start":11,"line_end":11,"column_start":14,"column_end":15},"name":"0","qualname":"::visit::dfsvisit::DfsEvent::Discover::0","value":"N","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3565},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33096,"byte_end":33100,"line_start":11,"line_end":11,"column_start":17,"column_end":21},"name":"1","qualname":"::visit::dfsvisit::DfsEvent::Discover::1","value":"visit::dfsvisit::Time","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3566},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33160,"byte_end":33168,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"TreeEdge","qualname":"::visit::dfsvisit::DfsEvent::TreeEdge","value":"DfsEvent::TreeEdge(N, N)","parent":{"krate":0,"index":3560},"children":[],"decl_id":null,"docs":" An edge of the tree formed by the traversal.\n","sig":null,"attributes":[{"value":"/ An edge of the tree formed by the traversal.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33107,"byte_end":33155,"line_start":12,"line_end":12,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":3568},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33169,"byte_end":33170,"line_start":13,"line_end":13,"column_start":14,"column_end":15},"name":"0","qualname":"::visit::dfsvisit::DfsEvent::TreeEdge::0","value":"N","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3569},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33172,"byte_end":33173,"line_start":13,"line_end":13,"column_start":17,"column_end":18},"name":"1","qualname":"::visit::dfsvisit::DfsEvent::TreeEdge::1","value":"N","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3570},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33224,"byte_end":33232,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"name":"BackEdge","qualname":"::visit::dfsvisit::DfsEvent::BackEdge","value":"DfsEvent::BackEdge(N, N)","parent":{"krate":0,"index":3560},"children":[],"decl_id":null,"docs":" An edge to an already visited node.\n","sig":null,"attributes":[{"value":"/ An edge to an already visited node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33180,"byte_end":33219,"line_start":14,"line_end":14,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3572},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33233,"byte_end":33234,"line_start":15,"line_end":15,"column_start":14,"column_end":15},"name":"0","qualname":"::visit::dfsvisit::DfsEvent::BackEdge::0","value":"N","parent":{"krate":0,"index":3570},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3573},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33236,"byte_end":33237,"line_start":15,"line_end":15,"column_start":17,"column_end":18},"name":"1","qualname":"::visit::dfsvisit::DfsEvent::BackEdge::1","value":"N","parent":{"krate":0,"index":3570},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33418,"byte_end":33434,"line_start":20,"line_end":20,"column_start":5,"column_end":21},"name":"CrossForwardEdge","qualname":"::visit::dfsvisit::DfsEvent::CrossForwardEdge","value":"DfsEvent::CrossForwardEdge(N, N)","parent":{"krate":0,"index":3560},"children":[],"decl_id":null,"docs":" A cross or forward edge.","sig":null,"attributes":[{"value":"/ A cross or forward edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33244,"byte_end":33272,"line_start":16,"line_end":16,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33277,"byte_end":33280,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ For an edge *(u, v)*, if the discover time of *v* is greater than *u*,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33285,"byte_end":33359,"line_start":18,"line_end":18,"column_start":5,"column_end":79}},{"value":"/ then it is a forward edge, else a cross edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33364,"byte_end":33413,"line_start":19,"line_end":19,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3576},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33435,"byte_end":33436,"line_start":20,"line_end":20,"column_start":22,"column_end":23},"name":"0","qualname":"::visit::dfsvisit::DfsEvent::CrossForwardEdge::0","value":"N","parent":{"krate":0,"index":3574},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3577},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33438,"byte_end":33439,"line_start":20,"line_end":20,"column_start":25,"column_end":26},"name":"1","qualname":"::visit::dfsvisit::DfsEvent::CrossForwardEdge::1","value":"N","parent":{"krate":0,"index":3574},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3578},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33496,"byte_end":33502,"line_start":22,"line_end":22,"column_start":5,"column_end":11},"name":"Finish","qualname":"::visit::dfsvisit::DfsEvent::Finish","value":"DfsEvent::Finish(N, Time)","parent":{"krate":0,"index":3560},"children":[],"decl_id":null,"docs":" All edges from a node have been reported.\n","sig":null,"attributes":[{"value":"/ All edges from a node have been reported.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33446,"byte_end":33491,"line_start":21,"line_end":21,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":3580},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33503,"byte_end":33504,"line_start":22,"line_end":22,"column_start":12,"column_end":13},"name":"0","qualname":"::visit::dfsvisit::DfsEvent::Finish::0","value":"N","parent":{"krate":0,"index":3578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3581},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33506,"byte_end":33510,"line_start":22,"line_end":22,"column_start":15,"column_end":19},"name":"1","qualname":"::visit::dfsvisit::DfsEvent::Finish::1","value":"visit::dfsvisit::Time","parent":{"krate":0,"index":3578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3560},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":33066,"byte_end":33074,"line_start":10,"line_end":10,"column_start":10,"column_end":18},"name":"DfsEvent","qualname":"::visit::dfsvisit::DfsEvent","value":"enum DfsEvent<N> {\n    Discover(N, Time),\n    TreeEdge(N, N),\n    BackEdge(N, N),\n    CrossForwardEdge(N, N),\n    Finish(N, Time),\n}","parent":null,"children":[{"krate":0,"index":3562},{"krate":0,"index":3566},{"krate":0,"index":3570},{"krate":0,"index":3574},{"krate":0,"index":3578}],"decl_id":null,"docs":" A depth first search (DFS) visitor event.\n","sig":null,"attributes":[{"value":"/ A depth first search (DFS) visitor event.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":32981,"byte_end":33026,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3592},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34184,"byte_end":34192,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"name":"Continue","qualname":"::visit::dfsvisit::Control::Continue","value":"Control::Continue","parent":{"krate":0,"index":3590},"children":[],"decl_id":null,"docs":" Continue the DFS traversal as normal.\n","sig":null,"attributes":[{"value":"/ Continue the DFS traversal as normal.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34138,"byte_end":34179,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3594},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34486,"byte_end":34491,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"Prune","qualname":"::visit::dfsvisit::Control::Prune","value":"Control::Prune","parent":{"krate":0,"index":3590},"children":[],"decl_id":null,"docs":" Prune the current node from the DFS traversal. No more edges from this\n node will be reported to the callback. A `DfsEvent::Finish` for this\n node will still be reported. This can be returned in response to any\n `DfsEvent`, except `Finish`, which will panic.\n","sig":null,"attributes":[{"value":"/ Prune the current node from the DFS traversal. No more edges from this","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34198,"byte_end":34272,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/ node will be reported to the callback. A `DfsEvent::Finish` for this","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34277,"byte_end":34349,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ node will still be reported. This can be returned in response to any","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34354,"byte_end":34426,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ `DfsEvent`, except `Finish`, which will panic.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34431,"byte_end":34481,"line_start":54,"line_end":54,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3596},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34559,"byte_end":34564,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Break","qualname":"::visit::dfsvisit::Control::Break","value":"Control::Break(B)","parent":{"krate":0,"index":3590},"children":[],"decl_id":null,"docs":" Stop the DFS traversal and return the provided value.\n","sig":null,"attributes":[{"value":"/ Stop the DFS traversal and return the provided value.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34497,"byte_end":34554,"line_start":56,"line_end":56,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":3598},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34565,"byte_end":34566,"line_start":57,"line_end":57,"column_start":11,"column_end":12},"name":"0","qualname":"::visit::dfsvisit::Control::Break::0","value":"B","parent":{"krate":0,"index":3596},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3590},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34121,"byte_end":34128,"line_start":48,"line_end":48,"column_start":10,"column_end":17},"name":"Control","qualname":"::visit::dfsvisit::Control","value":"enum Control<B> { Continue, Prune, Break(B), }","parent":null,"children":[{"krate":0,"index":3592},{"krate":0,"index":3594},{"krate":0,"index":3596}],"decl_id":null,"docs":" Control flow for `depth_first_search` callbacks.\n","sig":null,"attributes":[{"value":"/ Control flow for `depth_first_search` callbacks.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34029,"byte_end":34081,"line_start":46,"line_end":46,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34604,"byte_end":34612,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"breaking","qualname":"<Control<B>>::breaking","value":"fn breaking() -> Control<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34734,"byte_end":34745,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"break_value","qualname":"<Control<B>>::break_value","value":"fn break_value(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" Get the value in `Control::Break(_)`, if present.\n","sig":null,"attributes":[{"value":"/ Get the value in `Control::Break(_)`, if present.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34669,"byte_end":34722,"line_start":64,"line_end":64,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35010,"byte_end":35021,"line_start":76,"line_end":76,"column_start":11,"column_end":22},"name":"ControlFlow","qualname":"::visit::dfsvisit::ControlFlow","value":"ControlFlow","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"decl_id":null,"docs":" Control flow for callbacks.","sig":null,"attributes":[{"value":"/ Control flow for callbacks.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34905,"byte_end":34936,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34937,"byte_end":34940,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The empty return value `()` is equivalent to continue.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34941,"byte_end":34999,"line_start":75,"line_end":75,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35031,"byte_end":35041,"line_start":77,"line_end":77,"column_start":8,"column_end":18},"name":"continuing","qualname":"::visit::dfsvisit::ControlFlow::continuing","value":"fn continuing() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35060,"byte_end":35072,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"should_break","qualname":"::visit::dfsvisit::ControlFlow::should_break","value":"fn should_break<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35096,"byte_end":35108,"line_start":79,"line_end":79,"column_start":8,"column_end":20},"name":"should_prune","qualname":"::visit::dfsvisit::ControlFlow::should_prune","value":"fn should_prune<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35161,"byte_end":35171,"line_start":83,"line_end":83,"column_start":8,"column_end":18},"name":"continuing","qualname":"<() as visit::dfsvisit::ControlFlow>::continuing","value":"fn continuing()","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35198,"byte_end":35210,"line_start":85,"line_end":85,"column_start":8,"column_end":20},"name":"should_break","qualname":"<() as visit::dfsvisit::ControlFlow>::should_break","value":"fn should_break<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35181,"byte_end":35190,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35269,"byte_end":35281,"line_start":89,"line_end":89,"column_start":8,"column_end":20},"name":"should_prune","qualname":"<() as visit::dfsvisit::ControlFlow>::should_prune","value":"fn should_prune<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":65},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35252,"byte_end":35261,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35366,"byte_end":35376,"line_start":95,"line_end":95,"column_start":8,"column_end":18},"name":"continuing","qualname":"<Control<B> as visit::dfsvisit::ControlFlow>::continuing","value":"fn continuing() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35428,"byte_end":35440,"line_start":98,"line_end":98,"column_start":8,"column_end":20},"name":"should_break","qualname":"<Control<B> as visit::dfsvisit::ControlFlow>::should_break","value":"fn should_break<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35576,"byte_end":35588,"line_start":105,"line_end":105,"column_start":8,"column_end":20},"name":"should_prune","qualname":"<Control<B> as visit::dfsvisit::ControlFlow>::should_prune","value":"fn should_prune<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":65},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35805,"byte_end":35815,"line_start":114,"line_end":114,"column_start":8,"column_end":18},"name":"continuing","qualname":"<Result<C, E> as visit::dfsvisit::ControlFlow>::continuing","value":"fn continuing() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35869,"byte_end":35881,"line_start":117,"line_end":117,"column_start":8,"column_end":20},"name":"should_break","qualname":"<Result<C, E> as visit::dfsvisit::ControlFlow>::should_break","value":"fn should_break<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36020,"byte_end":36032,"line_start":124,"line_end":124,"column_start":8,"column_end":20},"name":"should_prune","qualname":"<Result<C, E> as visit::dfsvisit::ControlFlow>::should_prune","value":"fn should_prune<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":{"krate":0,"index":65},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36239,"byte_end":36246,"line_start":135,"line_end":135,"column_start":8,"column_end":15},"name":"default","qualname":"<Control<B> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":40162,"byte_end":40180,"line_start":247,"line_end":247,"column_start":8,"column_end":26},"name":"depth_first_search","qualname":"::visit::dfsvisit::depth_first_search","value":"fn depth_first_search<G, I, F, C>(G, I, F) -> C where G: IntoNeighbors +\nVisitable, I: IntoIterator<Item = G::NodeId>, F: FnMut(DfsEvent<G::NodeId>) ->\nC, C: ControlFlow","parent":null,"children":[],"decl_id":null,"docs":" A recursive depth first search.","sig":null,"attributes":[{"value":"/ A recursive depth first search.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36294,"byte_end":36329,"line_start":140,"line_end":140,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36330,"byte_end":36333,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Starting points are the nodes in the iterator `starts` (specify just one","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36334,"byte_end":36410,"line_start":142,"line_end":142,"column_start":1,"column_end":77}},{"value":"/ start vertex *x* by using `Some(x)`).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36411,"byte_end":36452,"line_start":143,"line_end":143,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36453,"byte_end":36456,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The traversal emits discovery and finish events for each reachable vertex,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36457,"byte_end":36535,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ and edge classification of each reachable edge. `visitor` is called for each","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36536,"byte_end":36616,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ event, see [`DfsEvent`][de] for possible values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36617,"byte_end":36669,"line_start":147,"line_end":147,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36670,"byte_end":36673,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The return value should implement the trait `ControlFlow`, and can be used to change","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36674,"byte_end":36762,"line_start":149,"line_end":149,"column_start":1,"column_end":89}},{"value":"/ the control flow of the search.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36763,"byte_end":36798,"line_start":150,"line_end":150,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36799,"byte_end":36802,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ `Control` Implements `ControlFlow` such that `Control::Continue` resumes the search.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36803,"byte_end":36891,"line_start":152,"line_end":152,"column_start":1,"column_end":89}},{"value":"/ `Control::Break` will stop the visit early, returning the contained value.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36892,"byte_end":36970,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ `Control::Prune` will stop traversing any additional edges from the current","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36971,"byte_end":37050,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ node and proceed immediately to the `Finish` event.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37051,"byte_end":37106,"line_start":155,"line_end":155,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37107,"byte_end":37110,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ There are implementations of `ControlFlow` for `()`, and `Result<C, E>` where","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37111,"byte_end":37192,"line_start":157,"line_end":157,"column_start":1,"column_end":82}},{"value":"/ `C: ControlFlow`. The implementation for `()` will continue until finished.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37193,"byte_end":37272,"line_start":158,"line_end":158,"column_start":1,"column_end":80}},{"value":"/ For `Result`, upon encountering an `E` it will break, otherwise acting the same as `C`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37273,"byte_end":37364,"line_start":159,"line_end":159,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37365,"byte_end":37368,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ***Panics** if you attempt to prune a node from its `Finish` event.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37369,"byte_end":37440,"line_start":161,"line_end":161,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37441,"byte_end":37444,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [de]: enum.DfsEvent.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37445,"byte_end":37473,"line_start":163,"line_end":163,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37474,"byte_end":37477,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ # Example returning `Control`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37478,"byte_end":37512,"line_start":165,"line_end":165,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37513,"byte_end":37516,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ Find a path from vertex 0 to 5, and exit the visit as soon as we reach","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37517,"byte_end":37591,"line_start":167,"line_end":167,"column_start":1,"column_end":75}},{"value":"/ the goal vertex.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37592,"byte_end":37612,"line_start":168,"line_end":168,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37613,"byte_end":37616,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37617,"byte_end":37624,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37625,"byte_end":37654,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"/ use petgraph::graph::node_index as n;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37655,"byte_end":37696,"line_start":172,"line_end":172,"column_start":1,"column_end":42}},{"value":"/ use petgraph::visit::depth_first_search;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37697,"byte_end":37741,"line_start":173,"line_end":173,"column_start":1,"column_end":45}},{"value":"/ use petgraph::visit::{DfsEvent, Control};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37742,"byte_end":37787,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37788,"byte_end":37791,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ let gr: Graph<(), ()> = Graph::from_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37792,"byte_end":37840,"line_start":176,"line_end":176,"column_start":1,"column_end":49}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37841,"byte_end":37872,"line_start":177,"line_end":177,"column_start":1,"column_end":32}},{"value":"/     (1, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37873,"byte_end":37888,"line_start":178,"line_end":178,"column_start":1,"column_end":16}},{"value":"/     (2, 3), (2, 4),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37889,"byte_end":37912,"line_start":179,"line_end":179,"column_start":1,"column_end":24}},{"value":"/     (4, 0), (4, 5),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37913,"byte_end":37936,"line_start":180,"line_end":180,"column_start":1,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37937,"byte_end":37944,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37945,"byte_end":37948,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ // record each predecessor, mapping node → node","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":37949,"byte_end":38002,"line_start":183,"line_end":183,"column_start":1,"column_end":52}},{"value":"/ let mut predecessor = vec![NodeIndex::end(); gr.node_count()];","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38003,"byte_end":38069,"line_start":184,"line_end":184,"column_start":1,"column_end":67}},{"value":"/ let start = n(0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38070,"byte_end":38091,"line_start":185,"line_end":185,"column_start":1,"column_end":22}},{"value":"/ let goal = n(5);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38092,"byte_end":38112,"line_start":186,"line_end":186,"column_start":1,"column_end":21}},{"value":"/ depth_first_search(&gr, Some(start), |event| {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38113,"byte_end":38163,"line_start":187,"line_end":187,"column_start":1,"column_end":51}},{"value":"/     if let DfsEvent::TreeEdge(u, v) = event {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38164,"byte_end":38213,"line_start":188,"line_end":188,"column_start":1,"column_end":50}},{"value":"/         predecessor[v.index()] = u;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38214,"byte_end":38253,"line_start":189,"line_end":189,"column_start":1,"column_end":40}},{"value":"/         if v == goal {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38254,"byte_end":38280,"line_start":190,"line_end":190,"column_start":1,"column_end":27}},{"value":"/             return Control::Break(v);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38281,"byte_end":38322,"line_start":191,"line_end":191,"column_start":1,"column_end":42}},{"value":"/         }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38323,"byte_end":38336,"line_start":192,"line_end":192,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38337,"byte_end":38346,"line_start":193,"line_end":193,"column_start":1,"column_end":10}},{"value":"/     Control::Continue","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38347,"byte_end":38372,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/ });","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38373,"byte_end":38380,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38381,"byte_end":38384,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ let mut next = goal;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38385,"byte_end":38409,"line_start":197,"line_end":197,"column_start":1,"column_end":25}},{"value":"/ let mut path = vec![next];","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38410,"byte_end":38440,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ while next != start {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38441,"byte_end":38466,"line_start":199,"line_end":199,"column_start":1,"column_end":26}},{"value":"/     let pred = predecessor[next.index()];","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38467,"byte_end":38512,"line_start":200,"line_end":200,"column_start":1,"column_end":46}},{"value":"/     path.push(pred);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38513,"byte_end":38537,"line_start":201,"line_end":201,"column_start":1,"column_end":25}},{"value":"/     next = pred;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38538,"byte_end":38558,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38559,"byte_end":38564,"line_start":203,"line_end":203,"column_start":1,"column_end":6}},{"value":"/ path.reverse();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38565,"byte_end":38584,"line_start":204,"line_end":204,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(&path, &[n(0), n(2), n(4), n(5)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38585,"byte_end":38634,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38635,"byte_end":38642,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38643,"byte_end":38646,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ # Example returning a `Result`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38647,"byte_end":38682,"line_start":208,"line_end":208,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38683,"byte_end":38690,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/ use petgraph::graph::node_index as n;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38691,"byte_end":38732,"line_start":210,"line_end":210,"column_start":1,"column_end":42}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38733,"byte_end":38762,"line_start":211,"line_end":211,"column_start":1,"column_end":30}},{"value":"/ use petgraph::visit::depth_first_search;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38763,"byte_end":38807,"line_start":212,"line_end":212,"column_start":1,"column_end":45}},{"value":"/ use petgraph::visit::{DfsEvent, Time};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38808,"byte_end":38850,"line_start":213,"line_end":213,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38851,"byte_end":38854,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ let gr: Graph<(), ()> = Graph::from_edges(&[(0, 1), (1, 2), (1, 1), (2, 1)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38855,"byte_end":38936,"line_start":215,"line_end":215,"column_start":1,"column_end":82}},{"value":"/ let start = n(0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38937,"byte_end":38958,"line_start":216,"line_end":216,"column_start":1,"column_end":22}},{"value":"/ let mut back_edges = 0;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38959,"byte_end":38986,"line_start":217,"line_end":217,"column_start":1,"column_end":28}},{"value":"/ let mut discover_time = 0;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":38987,"byte_end":39017,"line_start":218,"line_end":218,"column_start":1,"column_end":31}},{"value":"/ // Stop the search, the first time a BackEdge is encountered.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39018,"byte_end":39083,"line_start":219,"line_end":219,"column_start":1,"column_end":66}},{"value":"/ let result = depth_first_search(&gr, Some(start), |event| {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39084,"byte_end":39147,"line_start":220,"line_end":220,"column_start":1,"column_end":64}},{"value":"/     match event {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39148,"byte_end":39169,"line_start":221,"line_end":221,"column_start":1,"column_end":22}},{"value":"/         // In the cases where Ok(()) is returned,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39170,"byte_end":39223,"line_start":222,"line_end":222,"column_start":1,"column_end":54}},{"value":"/         // Result falls back to the implementation of Control on the value ().","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39224,"byte_end":39306,"line_start":223,"line_end":223,"column_start":1,"column_end":83}},{"value":"/         // In the case of (), this is to always return Control::Continue.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39307,"byte_end":39384,"line_start":224,"line_end":224,"column_start":1,"column_end":78}},{"value":"/         // continuing the search.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39385,"byte_end":39422,"line_start":225,"line_end":225,"column_start":1,"column_end":38}},{"value":"/         DfsEvent::Discover(_, Time(t)) => {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39423,"byte_end":39470,"line_start":226,"line_end":226,"column_start":1,"column_end":48}},{"value":"/             discover_time = t;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39471,"byte_end":39505,"line_start":227,"line_end":227,"column_start":1,"column_end":35}},{"value":"/             Ok(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39506,"byte_end":39528,"line_start":228,"line_end":228,"column_start":1,"column_end":23}},{"value":"/         }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39529,"byte_end":39542,"line_start":229,"line_end":229,"column_start":1,"column_end":14}},{"value":"/         DfsEvent::BackEdge(_, _) => {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39543,"byte_end":39584,"line_start":230,"line_end":230,"column_start":1,"column_end":42}},{"value":"/             back_edges += 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39585,"byte_end":39617,"line_start":231,"line_end":231,"column_start":1,"column_end":33}},{"value":"/             // the implementation of ControlFlow for Result,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39618,"byte_end":39682,"line_start":232,"line_end":232,"column_start":1,"column_end":65}},{"value":"/             // treats this Err value as Continue::Break","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39683,"byte_end":39742,"line_start":233,"line_end":233,"column_start":1,"column_end":60}},{"value":"/             Err(event)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39743,"byte_end":39769,"line_start":234,"line_end":234,"column_start":1,"column_end":27}},{"value":"/         }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39770,"byte_end":39783,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/         _ => Ok(()),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39784,"byte_end":39808,"line_start":236,"line_end":236,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39809,"byte_end":39818,"line_start":237,"line_end":237,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39819,"byte_end":39826,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39827,"byte_end":39830,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ // Even though the graph has more than one cycle,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39831,"byte_end":39884,"line_start":240,"line_end":240,"column_start":1,"column_end":54}},{"value":"/ // The number of back_edges visited by the search should always be 1.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39885,"byte_end":39958,"line_start":241,"line_end":241,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(back_edges, 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39959,"byte_end":39989,"line_start":242,"line_end":242,"column_start":1,"column_end":31}},{"value":"/ println!(\"discover time:{:?}\", discover_time);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":39990,"byte_end":40040,"line_start":243,"line_end":243,"column_start":1,"column_end":51}},{"value":"/ println!(\"number of backedges encountered: {}\", back_edges);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":40041,"byte_end":40105,"line_start":244,"line_end":244,"column_start":1,"column_end":65}},{"value":"/ println!(\"back edge: {:?}\", result);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":40106,"byte_end":40146,"line_start":245,"line_end":245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":40147,"byte_end":40154,"line_start":246,"line_end":246,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3607},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43192,"byte_end":43195,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"Dfs","qualname":"::visit::traversal::Dfs","value":"Dfs { stack, discovered }","parent":null,"children":[{"krate":0,"index":3610},{"krate":0,"index":3611}],"decl_id":null,"docs":" Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in\n preorder (when they are first discovered).","sig":null,"attributes":[{"value":"/ Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42206,"byte_end":42280,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ preorder (when they are first discovered).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42281,"byte_end":42327,"line_start":7,"line_end":7,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42328,"byte_end":42331,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42332,"byte_end":42407,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42408,"byte_end":42420,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42421,"byte_end":42424,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ `Dfs` is not recursive.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42425,"byte_end":42452,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42453,"byte_end":42456,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ `Dfs` does not itself borrow the graph, and because of this you can run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42457,"byte_end":42532,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ a traversal over a graph while still retaining mutable access to it, if you","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42533,"byte_end":42612,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ use it like the following example:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42613,"byte_end":42651,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42652,"byte_end":42655,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42656,"byte_end":42663,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42664,"byte_end":42688,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42689,"byte_end":42718,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42719,"byte_end":42722,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_,()>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42723,"byte_end":42764,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ let a = graph.add_node(0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42765,"byte_end":42795,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42796,"byte_end":42799,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut dfs = Dfs::new(&graph, a);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42800,"byte_end":42838,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ while let Some(nx) = dfs.next(&graph) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42839,"byte_end":42882,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/     // we can access `graph` mutably here still","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42883,"byte_end":42934,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/     graph[nx] += 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42935,"byte_end":42958,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42959,"byte_end":42964,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42965,"byte_end":42968,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(graph[a], 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42969,"byte_end":42997,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":42998,"byte_end":43005,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43006,"byte_end":43009,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ **Note:** The algorithm may not behave correctly if nodes are removed","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43010,"byte_end":43083,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ during iteration. It may not necessarily visit added nodes or edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43084,"byte_end":43156,"line_start":35,"line_end":35,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3610},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43249,"byte_end":43254,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::Dfs::stack","value":"std::vec::Vec<N>","parent":{"krate":0,"index":3607},"children":[],"decl_id":null,"docs":" The stack of nodes to visit\n","sig":null,"attributes":[{"value":"/ The stack of nodes to visit","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43209,"byte_end":43240,"line_start":38,"line_end":38,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3611},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43308,"byte_end":43318,"line_start":41,"line_end":41,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::Dfs::discovered","value":"VM","parent":{"krate":0,"index":3607},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43268,"byte_end":43299,"line_start":40,"line_end":40,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43394,"byte_end":43401,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"default","qualname":"<Dfs<N, VM> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43724,"byte_end":43727,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<Dfs<N, VM>>::new","value":"fn new<G>(G, N) -> Self where G: GraphRef + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Dfs**, using the graph's visitor map, and put **start**\n in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new **Dfs**, using the graph's visitor map, and put **start**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43598,"byte_end":43672,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ in the stack of nodes to visit.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43677,"byte_end":43712,"line_start":62,"line_end":62,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43982,"byte_end":43992,"line_start":73,"line_end":73,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Dfs<N, VM>>::from_parts","value":"fn from_parts(Vec<N>, VM) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dfs` from a vector and a visit map\n","sig":null,"attributes":[{"value":"/ Create a `Dfs` from a vector and a visit map","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43922,"byte_end":43970,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44116,"byte_end":44121,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"reset","qualname":"<Dfs<N, VM>>::reset","value":"fn reset<G, '_>(&'_ mut Self, G) where G: GraphRef + Visitable<NodeId = N, Map\n= VM>","parent":null,"children":[],"decl_id":null,"docs":" Clear the visit state\n","sig":null,"attributes":[{"value":"/ Clear the visit state","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44079,"byte_end":44104,"line_start":77,"line_end":77,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44384,"byte_end":44389,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"empty","qualname":"<Dfs<N, VM>>::empty","value":"fn empty<G>(G) -> Self where G: GraphRef + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Dfs** using the graph's visitor map, and no stack.\n","sig":null,"attributes":[{"value":"/ Create a new **Dfs** using the graph's visitor map, and no stack.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44303,"byte_end":44372,"line_start":86,"line_end":86,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44709,"byte_end":44716,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"move_to","qualname":"<Dfs<N, VM>>::move_to","value":"fn move_to<'_>(&'_ mut Self, N)","parent":null,"children":[],"decl_id":null,"docs":" Keep the discovered map, but clear the visit stack and restart\n the dfs from a particular node.\n","sig":null,"attributes":[{"value":"/ Keep the discovered map, but clear the visit stack and restart","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44591,"byte_end":44657,"line_start":97,"line_end":97,"column_start":5,"column_end":71}},{"value":"/ the dfs from a particular node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44662,"byte_end":44697,"line_start":98,"line_end":98,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44897,"byte_end":44901,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"next","qualname":"<Dfs<N, VM>>::next","value":"fn next<G, '_>(&'_ mut Self, G) -> Option<N> where G: IntoNeighbors<NodeId =\nN>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the dfs, or **None** if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the dfs, or **None** if the traversal is done.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":44811,"byte_end":44885,"line_start":104,"line_end":104,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3620},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45672,"byte_end":45684,"line_start":131,"line_end":131,"column_start":12,"column_end":24},"name":"DfsPostOrder","qualname":"::visit::traversal::DfsPostOrder","value":"DfsPostOrder { stack, discovered, finished }","parent":null,"children":[{"krate":0,"index":3623},{"krate":0,"index":3624},{"krate":0,"index":3625}],"decl_id":null,"docs":" Visit nodes in a depth-first-search (DFS) emitting nodes in postorder\n (each node after all its descendants have been emitted).","sig":null,"attributes":[{"value":"/ Visit nodes in a depth-first-search (DFS) emitting nodes in postorder","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45368,"byte_end":45441,"line_start":123,"line_end":123,"column_start":1,"column_end":74}},{"value":"/ (each node after all its descendants have been emitted).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45442,"byte_end":45502,"line_start":124,"line_end":124,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45503,"byte_end":45506,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ `DfsPostOrder` is not recursive.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45507,"byte_end":45543,"line_start":126,"line_end":126,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45544,"byte_end":45547,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45548,"byte_end":45623,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45624,"byte_end":45636,"line_start":129,"line_end":129,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":3623},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45738,"byte_end":45743,"line_start":133,"line_end":133,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::DfsPostOrder::stack","value":"std::vec::Vec<N>","parent":{"krate":0,"index":3620},"children":[],"decl_id":null,"docs":" The stack of nodes to visit\n","sig":null,"attributes":[{"value":"/ The stack of nodes to visit","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45698,"byte_end":45729,"line_start":132,"line_end":132,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3624},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45797,"byte_end":45807,"line_start":135,"line_end":135,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::DfsPostOrder::discovered","value":"VM","parent":{"krate":0,"index":3620},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45757,"byte_end":45788,"line_start":134,"line_end":134,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3625},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45855,"byte_end":45863,"line_start":137,"line_end":137,"column_start":9,"column_end":17},"name":"finished","qualname":"::visit::traversal::DfsPostOrder::finished","value":"VM","parent":{"krate":0,"index":3620},"children":[],"decl_id":null,"docs":" The map of finished nodes\n","sig":null,"attributes":[{"value":"/ The map of finished nodes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45817,"byte_end":45846,"line_start":136,"line_end":136,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45948,"byte_end":45955,"line_start":144,"line_end":144,"column_start":8,"column_end":15},"name":"default","qualname":"<DfsPostOrder<N, VM> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46337,"byte_end":46340,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<DfsPostOrder<N, VM>>::new","value":"fn new<G>(G, N) -> Self where G: GraphRef + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DfsPostOrder` using the graph's visitor map, and put\n `start` in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new `DfsPostOrder` using the graph's visitor map, and put","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46207,"byte_end":46277,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ `start` in the stack of nodes to visit.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46282,"byte_end":46325,"line_start":159,"line_end":159,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46624,"byte_end":46629,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"empty","qualname":"<DfsPostOrder<N, VM>>::empty","value":"fn empty<G>(G) -> Self where G: GraphRef + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DfsPostOrder` using the graph's visitor map, and no stack.\n","sig":null,"attributes":[{"value":"/ Create a new `DfsPostOrder` using the graph's visitor map, and no stack.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46536,"byte_end":46612,"line_start":169,"line_end":169,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46918,"byte_end":46923,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"reset","qualname":"<DfsPostOrder<N, VM>>::reset","value":"fn reset<G, '_>(&'_ mut Self, G) where G: GraphRef + Visitable<NodeId = N, Map\n= VM>","parent":null,"children":[],"decl_id":null,"docs":" Clear the visit state\n","sig":null,"attributes":[{"value":"/ Clear the visit state","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46881,"byte_end":46906,"line_start":181,"line_end":181,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":47281,"byte_end":47288,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"move_to","qualname":"<DfsPostOrder<N, VM>>::move_to","value":"fn move_to<'_>(&'_ mut Self, N)","parent":null,"children":[],"decl_id":null,"docs":" Keep the discovered and finished map, but clear the visit stack and restart\n the dfs from a particular node.\n","sig":null,"attributes":[{"value":"/ Keep the discovered and finished map, but clear the visit stack and restart","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":47150,"byte_end":47229,"line_start":191,"line_end":191,"column_start":5,"column_end":84}},{"value":"/ the dfs from a particular node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":47234,"byte_end":47269,"line_start":192,"line_end":192,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":47473,"byte_end":47477,"line_start":199,"line_end":199,"column_start":12,"column_end":16},"name":"next","qualname":"<DfsPostOrder<N, VM>>::next","value":"fn next<G, '_>(&'_ mut Self, G) -> Option<N> where G: IntoNeighbors<NodeId =\nN>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the traversal, or `None` if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the traversal, or `None` if the traversal is done.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":47383,"byte_end":47461,"line_start":198,"line_end":198,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":3634},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49118,"byte_end":49121,"line_start":253,"line_end":253,"column_start":12,"column_end":15},"name":"Bfs","qualname":"::visit::traversal::Bfs","value":"Bfs { stack, discovered }","parent":null,"children":[{"krate":0,"index":3637},{"krate":0,"index":3638}],"decl_id":null,"docs":" A breadth first search (BFS) of a graph.","sig":null,"attributes":[{"value":"/ A breadth first search (BFS) of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48216,"byte_end":48260,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48261,"byte_end":48264,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48265,"byte_end":48340,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48341,"byte_end":48353,"line_start":226,"line_end":226,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48354,"byte_end":48357,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ `Bfs` is not recursive.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48358,"byte_end":48385,"line_start":228,"line_end":228,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48386,"byte_end":48389,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ `Bfs` does not itself borrow the graph, and because of this you can run","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48390,"byte_end":48465,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"/ a traversal over a graph while still retaining mutable access to it, if you","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48466,"byte_end":48545,"line_start":231,"line_end":231,"column_start":1,"column_end":80}},{"value":"/ use it like the following example:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48546,"byte_end":48584,"line_start":232,"line_end":232,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48585,"byte_end":48588,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48589,"byte_end":48596,"line_start":234,"line_end":234,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48597,"byte_end":48621,"line_start":235,"line_end":235,"column_start":1,"column_end":25}},{"value":"/ use petgraph::visit::Bfs;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48622,"byte_end":48651,"line_start":236,"line_end":236,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48652,"byte_end":48655,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_,()>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48656,"byte_end":48697,"line_start":238,"line_end":238,"column_start":1,"column_end":42}},{"value":"/ let a = graph.add_node(0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48698,"byte_end":48728,"line_start":239,"line_end":239,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48729,"byte_end":48732,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ let mut bfs = Bfs::new(&graph, a);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48733,"byte_end":48771,"line_start":241,"line_end":241,"column_start":1,"column_end":39}},{"value":"/ while let Some(nx) = bfs.next(&graph) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48772,"byte_end":48815,"line_start":242,"line_end":242,"column_start":1,"column_end":44}},{"value":"/     // we can access `graph` mutably here still","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48816,"byte_end":48867,"line_start":243,"line_end":243,"column_start":1,"column_end":52}},{"value":"/     graph[nx] += 1;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48868,"byte_end":48891,"line_start":244,"line_end":244,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48892,"byte_end":48897,"line_start":245,"line_end":245,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48898,"byte_end":48901,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(graph[a], 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48902,"byte_end":48930,"line_start":247,"line_end":247,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48931,"byte_end":48938,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48939,"byte_end":48942,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ **Note:** The algorithm may not behave correctly if nodes are removed","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":48943,"byte_end":49016,"line_start":250,"line_end":250,"column_start":1,"column_end":74}},{"value":"/ during iteration. It may not necessarily visit added nodes or edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49017,"byte_end":49089,"line_start":251,"line_end":251,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3637},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49175,"byte_end":49180,"line_start":255,"line_end":255,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::Bfs::stack","value":"std::collections::VecDeque<N>","parent":{"krate":0,"index":3634},"children":[],"decl_id":null,"docs":" The queue of nodes to visit\n","sig":null,"attributes":[{"value":"/ The queue of nodes to visit","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49135,"byte_end":49166,"line_start":254,"line_end":254,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3638},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49239,"byte_end":49249,"line_start":257,"line_end":257,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::Bfs::discovered","value":"VM","parent":{"krate":0,"index":3634},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49199,"byte_end":49230,"line_start":256,"line_end":256,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49325,"byte_end":49332,"line_start":264,"line_end":264,"column_start":8,"column_end":15},"name":"default","qualname":"<Bfs<N, VM> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49660,"byte_end":49663,"line_start":279,"line_end":279,"column_start":12,"column_end":15},"name":"new","qualname":"<Bfs<N, VM>>::new","value":"fn new<G>(G, N) -> Self where G: GraphRef + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Bfs**, using the graph's visitor map, and put **start**\n in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new **Bfs**, using the graph's visitor map, and put **start**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49534,"byte_end":49608,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ in the stack of nodes to visit.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49613,"byte_end":49648,"line_start":278,"line_end":278,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50052,"byte_end":50056,"line_start":291,"line_end":291,"column_start":12,"column_end":16},"name":"next","qualname":"<Bfs<N, VM>>::next","value":"fn next<G, '_>(&'_ mut Self, G) -> Option<N> where G: IntoNeighbors<NodeId =\nN>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the bfs, or **None** if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the bfs, or **None** if the traversal is done.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49966,"byte_end":50040,"line_start":290,"line_end":290,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3643},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50737,"byte_end":50741,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"Topo","qualname":"::visit::traversal::Topo","value":"Topo {  }","parent":null,"children":[{"krate":0,"index":3646},{"krate":0,"index":3647}],"decl_id":null,"docs":" A topological order traversal for a graph.","sig":null,"attributes":[{"value":"/ A topological order traversal for a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50442,"byte_end":50488,"line_start":308,"line_end":308,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50489,"byte_end":50492,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note** that `Topo` only visits nodes that are not part of cycles,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50493,"byte_end":50564,"line_start":310,"line_end":310,"column_start":1,"column_end":72}},{"value":"/ i.e. nodes in a true DAG. Use other visitors like `DfsPostOrder` or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50565,"byte_end":50636,"line_start":311,"line_end":311,"column_start":1,"column_end":72}},{"value":"/ algorithms like kosaraju_scc to handle graphs with possible cycles.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50637,"byte_end":50708,"line_start":312,"line_end":312,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50860,"byte_end":50867,"line_start":323,"line_end":323,"column_start":8,"column_end":15},"name":"default","qualname":"<Topo<N, VM> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":51188,"byte_end":51191,"line_start":338,"line_end":338,"column_start":12,"column_end":15},"name":"new","qualname":"<Topo<N, VM>>::new","value":"fn new<G>(G) -> Self where G: IntoNodeIdentifiers + IntoNeighborsDirected +\nVisitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Topo`, using the graph's visitor map, and put all\n initial nodes in the to visit list.\n","sig":null,"attributes":[{"value":"/ Create a new `Topo`, using the graph's visitor map, and put all","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":51065,"byte_end":51132,"line_start":336,"line_end":336,"column_start":5,"column_end":72}},{"value":"/ initial nodes in the to visit list.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":51137,"byte_end":51176,"line_start":337,"line_end":337,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52226,"byte_end":52231,"line_start":372,"line_end":372,"column_start":12,"column_end":17},"name":"reset","qualname":"<Topo<N, VM>>::reset","value":"fn reset<G, '_>(&'_ mut Self, G) where G: IntoNodeIdentifiers +\nIntoNeighborsDirected + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Clear visited state, and put all initial nodes in the to visit list.\n","sig":null,"attributes":[{"value":"/ Clear visited state, and put all initial nodes in the to visit list.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52142,"byte_end":52214,"line_start":371,"line_end":371,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52795,"byte_end":52799,"line_start":386,"line_end":386,"column_start":12,"column_end":16},"name":"next","qualname":"<Topo<N, VM>>::next","value":"fn next<G, '_>(&'_ mut Self, G) -> Option<N> where G: IntoNeighborsDirected +\nVisitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the current topological order traversal, or\n `None` if the traversal is at the end.","sig":null,"attributes":[{"value":"/ Return the next node in the current topological order traversal, or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52489,"byte_end":52560,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/ `None` if the traversal is at the end.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52565,"byte_end":52607,"line_start":382,"line_end":382,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52612,"byte_end":52615,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ *Note:* The graph may not have a complete topological order, and the only","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52620,"byte_end":52697,"line_start":384,"line_end":384,"column_start":5,"column_end":82}},{"value":"/ way to know is to run the whole traversal and make sure it visits every node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":52702,"byte_end":52783,"line_start":385,"line_end":385,"column_start":5,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53904,"byte_end":53910,"line_start":417,"line_end":417,"column_start":11,"column_end":17},"name":"Walker","qualname":"::visit::traversal::Walker","value":"Walker<Context>","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":" A walker is a traversal state, but where part of the traversal\n information is supplied manually to each next call.","sig":null,"attributes":[{"value":"/ A walker is a traversal state, but where part of the traversal","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53659,"byte_end":53725,"line_start":412,"line_end":412,"column_start":1,"column_end":67}},{"value":"/ information is supplied manually to each next call.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53726,"byte_end":53781,"line_start":413,"line_end":413,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53782,"byte_end":53785,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ This for example allows graph traversals that don't hold a borrow of the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53786,"byte_end":53862,"line_start":415,"line_end":415,"column_start":1,"column_end":77}},{"value":"/ graph they are traversing.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53863,"byte_end":53893,"line_start":416,"line_end":416,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53931,"byte_end":53935,"line_start":418,"line_end":418,"column_start":10,"column_end":14},"name":"Item","qualname":"::visit::traversal::Walker::Item","value":"type Item;","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53977,"byte_end":53986,"line_start":420,"line_end":420,"column_start":8,"column_end":17},"name":"walk_next","qualname":"::visit::traversal::Walker::walk_next","value":"fn walk_next<'_>(&'_ mut Self, Context) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Advance to the next item\n","sig":null,"attributes":[{"value":"/ Advance to the next item","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":53941,"byte_end":53969,"line_start":419,"line_end":419,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54113,"byte_end":54117,"line_start":423,"line_end":423,"column_start":8,"column_end":12},"name":"iter","qualname":"::visit::traversal::Walker::iter","value":"fn iter(Self, Context) -> WalkerIter<Self, Context> where Self: Sized,\nContext: Clone","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Create an iterator out of the walker and given `context`.\n","sig":null,"attributes":[{"value":"/ Create an iterator out of the walker and given `context`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54044,"byte_end":54105,"line_start":422,"line_end":422,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3652},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54409,"byte_end":54419,"line_start":437,"line_end":437,"column_start":12,"column_end":22},"name":"WalkerIter","qualname":"::visit::traversal::WalkerIter","value":"WalkerIter {  }","parent":null,"children":[{"krate":0,"index":3655},{"krate":0,"index":3656}],"decl_id":null,"docs":" A walker and its context wrapped into an iterator.\n","sig":null,"attributes":[{"value":"/ A walker and its context wrapped into an iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54319,"byte_end":54373,"line_start":435,"line_end":435,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54541,"byte_end":54548,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"context","qualname":"<WalkerIter<W, C>>::context","value":"fn context<'_>(&'_ Self) -> C","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54610,"byte_end":54619,"line_start":451,"line_end":451,"column_start":12,"column_end":21},"name":"inner_ref","qualname":"<WalkerIter<W, C>>::inner_ref","value":"fn inner_ref<'_>(&'_ Self) -> &'_ W","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54674,"byte_end":54683,"line_start":455,"line_end":455,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<WalkerIter<W, C>>::inner_mut","value":"fn inner_mut<'_>(&'_ mut Self) -> &'_ mut W","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54854,"byte_end":54858,"line_start":466,"line_end":466,"column_start":8,"column_end":12},"name":"next","qualname":"<WalkerIter<W, C> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55060,"byte_end":55069,"line_start":476,"line_end":476,"column_start":8,"column_end":17},"name":"walk_next","qualname":"<&'a mut W as visit::traversal::Walker>::walk_next","value":"fn walk_next<'_>(&'_ mut Self, C) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":{"krate":0,"index":190},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55283,"byte_end":55292,"line_start":486,"line_end":486,"column_start":8,"column_end":17},"name":"walk_next","qualname":"<Dfs<G::NodeId, G::Map> as visit::traversal::Walker>::walk_next","value":"fn walk_next<'_>(&'_ mut Self, G) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":{"krate":0,"index":190},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55506,"byte_end":55515,"line_start":496,"line_end":496,"column_start":8,"column_end":17},"name":"walk_next","qualname":"<DfsPostOrder<G::NodeId, G::Map> as visit::traversal::Walker>::walk_next","value":"fn walk_next<'_>(&'_ mut Self, G) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":{"krate":0,"index":190},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55720,"byte_end":55729,"line_start":506,"line_end":506,"column_start":8,"column_end":17},"name":"walk_next","qualname":"<Bfs<G::NodeId, G::Map> as visit::traversal::Walker>::walk_next","value":"fn walk_next<'_>(&'_ mut Self, G) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":{"krate":0,"index":190},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55943,"byte_end":55952,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"walk_next","qualname":"<Topo<G::NodeId, G::Map> as visit::traversal::Walker>::walk_next","value":"fn walk_next<'_>(&'_ mut Self, G) -> Option<Self::Item>","parent":{"krate":0,"index":187},"children":[],"decl_id":{"krate":0,"index":190},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3666},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":17877,"byte_end":17886,"line_start":88,"line_end":88,"column_start":11,"column_end":20},"name":"GraphBase","qualname":"::visit::GraphBase","value":"GraphBase","parent":null,"children":[{"krate":0,"index":3667},{"krate":0,"index":3668}],"decl_id":null,"docs":" Base graph trait: defines the associated node identifier and\n edge identifier types.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3667},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18066,"byte_end":18072,"line_start":94,"line_end":94,"column_start":10,"column_end":16},"name":"EdgeId","qualname":"::visit::GraphBase::EdgeId","value":"type EdgeId: Copy + PartialEq;","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" edge identifier\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3668},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18125,"byte_end":18131,"line_start":96,"line_end":96,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::GraphBase::NodeId","value":"type NodeId: Copy + PartialEq;","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" node identifier\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18292,"byte_end":18300,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"GraphRef","qualname":"::visit::GraphRef","value":"GraphRef: Copy + GraphBase","parent":null,"children":[],"decl_id":null,"docs":" A copyable reference to a graph.\n","sig":null,"attributes":[{"value":"/ A copyable reference to a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18245,"byte_end":18281,"line_start":103,"line_end":103,"column_start":1,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":3680},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18631,"byte_end":18644,"line_start":115,"line_end":115,"column_start":11,"column_end":24},"name":"IntoNeighbors","qualname":"::visit::IntoNeighbors","value":"IntoNeighbors: GraphRef","parent":null,"children":[{"krate":0,"index":3681},{"krate":0,"index":3682}],"decl_id":null,"docs":" Access to the neighbors of each node","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3681},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18685,"byte_end":18694,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"Neighbors","qualname":"::visit::IntoNeighbors::Neighbors","value":"type Neighbors: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":3680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18807,"byte_end":18816,"line_start":120,"line_end":120,"column_start":8,"column_end":17},"name":"neighbors","qualname":"::visit::IntoNeighbors::neighbors","value":"fn neighbors(Self, Self::NodeId) -> Self::Neighbors","parent":{"krate":0,"index":3680},"children":[],"decl_id":null,"docs":" Return an iterator of the neighbors of node `a`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3689},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":19292,"byte_end":19313,"line_start":135,"line_end":135,"column_start":11,"column_end":32},"name":"IntoNeighborsDirected","qualname":"::visit::IntoNeighborsDirected","value":"IntoNeighborsDirected: IntoNeighbors","parent":null,"children":[{"krate":0,"index":3690},{"krate":0,"index":3691}],"decl_id":null,"docs":" Access to the neighbors of each node, through incoming or outgoing edges.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3690},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":19359,"byte_end":19376,"line_start":137,"line_end":137,"column_start":10,"column_end":27},"name":"NeighborsDirected","qualname":"::visit::IntoNeighborsDirected::NeighborsDirected","value":"type NeighborsDirected: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":3689},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3691},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":19432,"byte_end":19450,"line_start":139,"line_end":139,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"::visit::IntoNeighborsDirected::neighbors_directed","value":"fn neighbors_directed(Self, Self::NodeId, Direction)\n-> Self::NeighborsDirected","parent":{"krate":0,"index":3689},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3693},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20017,"byte_end":20026,"line_start":157,"line_end":157,"column_start":11,"column_end":20},"name":"IntoEdges","qualname":"::visit::IntoEdges","value":"IntoEdges: IntoEdgeReferences + IntoNeighbors","parent":null,"children":[{"krate":0,"index":3694},{"krate":0,"index":3695}],"decl_id":null,"docs":" Access to the edges of each node.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3694},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20093,"byte_end":20098,"line_start":159,"line_end":159,"column_start":10,"column_end":15},"name":"Edges","qualname":"::visit::IntoEdges::Edges","value":"type Edges: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":3693},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3695},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20155,"byte_end":20160,"line_start":161,"line_end":161,"column_start":8,"column_end":13},"name":"edges","qualname":"::visit::IntoEdges::edges","value":"fn edges(Self, Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3702},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20954,"byte_end":20971,"line_start":183,"line_end":183,"column_start":11,"column_end":28},"name":"IntoEdgesDirected","qualname":"::visit::IntoEdgesDirected","value":"IntoEdgesDirected: IntoEdges + IntoNeighborsDirected","parent":null,"children":[{"krate":0,"index":3703},{"krate":0,"index":3704}],"decl_id":null,"docs":" Access to all edges of each node, in the specified direction.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3703},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21037,"byte_end":21050,"line_start":185,"line_end":185,"column_start":10,"column_end":23},"name":"EdgesDirected","qualname":"::visit::IntoEdgesDirected::EdgesDirected","value":"type EdgesDirected: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3704},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21107,"byte_end":21121,"line_start":187,"line_end":187,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"::visit::IntoEdgesDirected::edges_directed","value":"fn edges_directed(Self, Self::NodeId, Direction) -> Self::EdgesDirected","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3711},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21312,"byte_end":21331,"line_start":195,"line_end":195,"column_start":11,"column_end":30},"name":"IntoNodeIdentifiers","qualname":"::visit::IntoNodeIdentifiers","value":"IntoNodeIdentifiers: GraphRef","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713}],"decl_id":null,"docs":" Access to the sequence of the graph’s `NodeId`s.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3712},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21372,"byte_end":21387,"line_start":197,"line_end":197,"column_start":10,"column_end":25},"name":"NodeIdentifiers","qualname":"::visit::IntoNodeIdentifiers::NodeIdentifiers","value":"type NodeIdentifiers: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":3711},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3713},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21443,"byte_end":21459,"line_start":199,"line_end":199,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"::visit::IntoNodeIdentifiers::node_identifiers","value":"fn node_identifiers(Self) -> Self::NodeIdentifiers","parent":{"krate":0,"index":3711},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3725},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21655,"byte_end":21659,"line_start":208,"line_end":208,"column_start":11,"column_end":15},"name":"Data","qualname":"::visit::Data","value":"Data: GraphBase","parent":null,"children":[{"krate":0,"index":3726},{"krate":0,"index":3727}],"decl_id":null,"docs":" Define associated data for nodes and edges\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3726},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21701,"byte_end":21711,"line_start":210,"line_end":210,"column_start":10,"column_end":20},"name":"NodeWeight","qualname":"::visit::Data::NodeWeight","value":"type NodeWeight;","parent":{"krate":0,"index":3725},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3727},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21722,"byte_end":21732,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"EdgeWeight","qualname":"::visit::Data::EdgeWeight","value":"type EdgeWeight;","parent":{"krate":0,"index":3725},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":253},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21932,"byte_end":21939,"line_start":221,"line_end":221,"column_start":11,"column_end":18},"name":"EdgeRef","qualname":"::visit::EdgeRef","value":"EdgeRef: Copy","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"decl_id":null,"docs":" An edge reference.","sig":null,"attributes":[{"value":"/ An edge reference.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21818,"byte_end":21840,"line_start":218,"line_end":218,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21841,"byte_end":21844,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Edge references are used by traits `IntoEdges` and `IntoEdgeReferences`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21845,"byte_end":21921,"line_start":220,"line_end":220,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":254},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21957,"byte_end":21963,"line_start":222,"line_end":222,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::EdgeRef::NodeId","value":"type NodeId;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":255},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21974,"byte_end":21980,"line_start":223,"line_end":223,"column_start":10,"column_end":16},"name":"EdgeId","qualname":"::visit::EdgeRef::EdgeId","value":"type EdgeId;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":256},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21991,"byte_end":21997,"line_start":224,"line_end":224,"column_start":10,"column_end":16},"name":"Weight","qualname":"::visit::EdgeRef::Weight","value":"type Weight;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22043,"byte_end":22049,"line_start":226,"line_end":226,"column_start":8,"column_end":14},"name":"source","qualname":"::visit::EdgeRef::source","value":"fn source<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The source node of the edge.\n","sig":null,"attributes":[{"value":"/ The source node of the edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22003,"byte_end":22035,"line_start":225,"line_end":225,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22118,"byte_end":22124,"line_start":228,"line_end":228,"column_start":8,"column_end":14},"name":"target","qualname":"::visit::EdgeRef::target","value":"fn target<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The target node of the edge.\n","sig":null,"attributes":[{"value":"/ The target node of the edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22078,"byte_end":22110,"line_start":227,"line_end":227,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22203,"byte_end":22209,"line_start":230,"line_end":230,"column_start":8,"column_end":14},"name":"weight","qualname":"::visit::EdgeRef::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" A reference to the weight of the edge.\n","sig":null,"attributes":[{"value":"/ A reference to the weight of the edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22153,"byte_end":22195,"line_start":229,"line_end":229,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22275,"byte_end":22277,"line_start":232,"line_end":232,"column_start":8,"column_end":10},"name":"id","qualname":"::visit::EdgeRef::id","value":"fn id<'_>(&'_ Self) -> Self::EdgeId","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The edge’s identifier.\n","sig":null,"attributes":[{"value":"/ The edge’s identifier.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22239,"byte_end":22267,"line_start":231,"line_end":231,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22443,"byte_end":22449,"line_start":243,"line_end":243,"column_start":8,"column_end":14},"name":"source","qualname":"<(N, N, &'a E) as visit::EdgeRef>::source","value":"fn source<'_>(&'_ Self) -> N","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":257},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22492,"byte_end":22498,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"target","qualname":"<(N, N, &'a E) as visit::EdgeRef>::target","value":"fn target<'_>(&'_ Self) -> N","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":258},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22541,"byte_end":22547,"line_start":249,"line_end":249,"column_start":8,"column_end":14},"name":"weight","qualname":"<(N, N, &'a E) as visit::EdgeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ E","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22591,"byte_end":22593,"line_start":252,"line_end":252,"column_start":8,"column_end":10},"name":"id","qualname":"<(N, N, &'a E) as visit::EdgeRef>::id","value":"fn id<'_>(&'_ Self) -> (N, N)","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":260},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":272},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22679,"byte_end":22686,"line_start":258,"line_end":258,"column_start":11,"column_end":18},"name":"NodeRef","qualname":"::visit::NodeRef","value":"NodeRef: Copy","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"decl_id":null,"docs":" A node reference.\n","sig":null,"attributes":[{"value":"/ A node reference.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22647,"byte_end":22668,"line_start":257,"line_end":257,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":273},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22704,"byte_end":22710,"line_start":259,"line_end":259,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::NodeRef::NodeId","value":"type NodeId;","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22721,"byte_end":22727,"line_start":260,"line_end":260,"column_start":10,"column_end":16},"name":"Weight","qualname":"::visit::NodeRef::Weight","value":"type Weight;","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22736,"byte_end":22738,"line_start":261,"line_end":261,"column_start":8,"column_end":10},"name":"id","qualname":"::visit::NodeRef::id","value":"fn id<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22770,"byte_end":22776,"line_start":262,"line_end":262,"column_start":8,"column_end":14},"name":"weight","qualname":"::visit::NodeRef::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3739},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22883,"byte_end":22901,"line_start":267,"line_end":267,"column_start":11,"column_end":29},"name":"IntoNodeReferences","qualname":"::visit::IntoNodeReferences","value":"IntoNodeReferences: Data + IntoNodeIdentifiers","parent":null,"children":[{"krate":0,"index":3740},{"krate":0,"index":3741},{"krate":0,"index":3742}],"decl_id":null,"docs":" Access to the sequence of the graph’s nodes\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3740},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22960,"byte_end":22967,"line_start":269,"line_end":269,"column_start":10,"column_end":17},"name":"NodeRef","qualname":"::visit::IntoNodeReferences::NodeRef","value":"type NodeRef: NodeRef<NodeId=Self::NodeId, Weight=Self::NodeWeight>;","parent":{"krate":0,"index":3739},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3741},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23033,"byte_end":23047,"line_start":270,"line_end":270,"column_start":10,"column_end":24},"name":"NodeReferences","qualname":"::visit::IntoNodeReferences::NodeReferences","value":"type NodeReferences: Iterator<Item=Self::NodeRef>;","parent":{"krate":0,"index":3739},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3742},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23104,"byte_end":23119,"line_start":272,"line_end":272,"column_start":8,"column_end":23},"name":"node_references","qualname":"::visit::IntoNodeReferences::node_references","value":"fn node_references(Self) -> Self::NodeReferences","parent":{"krate":0,"index":3739},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23299,"byte_end":23301,"line_start":284,"line_end":284,"column_start":8,"column_end":10},"name":"id","qualname":"<(Id, ()) as visit::NodeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":272},"children":[],"decl_id":{"krate":0,"index":275},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23355,"byte_end":23361,"line_start":287,"line_end":287,"column_start":8,"column_end":14},"name":"weight","qualname":"<(Id, ()) as visit::NodeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":272},"children":[],"decl_id":{"krate":0,"index":276},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23555,"byte_end":23557,"line_start":299,"line_end":299,"column_start":8,"column_end":10},"name":"id","qualname":"<(Id, &'a W) as visit::NodeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":272},"children":[],"decl_id":{"krate":0,"index":275},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23611,"byte_end":23617,"line_start":302,"line_end":302,"column_start":8,"column_end":14},"name":"weight","qualname":"<(Id, &'a W) as visit::NodeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":272},"children":[],"decl_id":{"krate":0,"index":276},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3750},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23746,"byte_end":23764,"line_start":309,"line_end":309,"column_start":11,"column_end":29},"name":"IntoEdgeReferences","qualname":"::visit::IntoEdgeReferences","value":"IntoEdgeReferences: Data + GraphRef","parent":null,"children":[{"krate":0,"index":3751},{"krate":0,"index":3752},{"krate":0,"index":3753}],"decl_id":null,"docs":" Access to the sequence of the graph’s edges\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3751},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23812,"byte_end":23819,"line_start":311,"line_end":311,"column_start":10,"column_end":17},"name":"EdgeRef","qualname":"::visit::IntoEdgeReferences::EdgeRef","value":"type EdgeRef: EdgeRef<NodeId=Self::NodeId, EdgeId=Self::EdgeId,\n                          Weight=Self::EdgeWeight>;","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3752},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23932,"byte_end":23946,"line_start":313,"line_end":313,"column_start":10,"column_end":24},"name":"EdgeReferences","qualname":"::visit::IntoEdgeReferences::EdgeReferences","value":"type EdgeReferences: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24003,"byte_end":24018,"line_start":315,"line_end":315,"column_start":8,"column_end":23},"name":"edge_references","qualname":"::visit::IntoEdgeReferences::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3761},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24182,"byte_end":24191,"line_start":323,"line_end":323,"column_start":11,"column_end":20},"name":"GraphProp","qualname":"::visit::GraphProp","value":"GraphProp: GraphBase","parent":null,"children":[{"krate":0,"index":3762},{"krate":0,"index":3763}],"decl_id":null,"docs":" Edge kind property (directed or undirected edges)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3762},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24270,"byte_end":24278,"line_start":326,"line_end":326,"column_start":10,"column_end":18},"name":"EdgeType","qualname":"::visit::GraphProp::EdgeType","value":"type EdgeType: EdgeType;","parent":{"krate":0,"index":3761},"children":[],"decl_id":null,"docs":" The kind edges in the graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3763},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24322,"byte_end":24333,"line_start":329,"line_end":329,"column_start":8,"column_end":19},"name":"is_directed","qualname":"::visit::GraphProp::is_directed","value":"fn is_directed<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":3761},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3769},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24563,"byte_end":24576,"line_start":340,"line_end":340,"column_start":15,"column_end":28},"name":"NodeIndexable","qualname":"::visit::NodeIndexable","value":"NodeIndexable: GraphBase","parent":null,"children":[{"krate":0,"index":3770},{"krate":0,"index":3771},{"krate":0,"index":3772}],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3770},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24740,"byte_end":24750,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"node_bound","qualname":"::visit::NodeIndexable::node_bound","value":"fn node_bound<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":null,"docs":" Return an upper bound of the node indices in the graph\n (suitable for the size of a bitmap).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24830,"byte_end":24838,"line_start":346,"line_end":346,"column_start":12,"column_end":20},"name":"to_index","qualname":"::visit::NodeIndexable::to_index","value":"fn to_index<'_>(&'_ Self, Self::NodeId) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":null,"docs":" Convert `a` to an integer index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3772},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24971,"byte_end":24981,"line_start":348,"line_end":348,"column_start":12,"column_end":22},"name":"from_index","qualname":"::visit::NodeIndexable::from_index","value":"fn from_index<'_>(&'_ Self, usize) -> Self::NodeId","parent":{"krate":0,"index":3769},"children":[],"decl_id":null,"docs":" Convert `i` to a node index. `i` must be a valid value in the graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3780},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25196,"byte_end":25209,"line_start":357,"line_end":357,"column_start":15,"column_end":28},"name":"EdgeIndexable","qualname":"::visit::EdgeIndexable","value":"EdgeIndexable: GraphBase","parent":null,"children":[{"krate":0,"index":3781},{"krate":0,"index":3782},{"krate":0,"index":3783}],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3781},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25373,"byte_end":25383,"line_start":361,"line_end":361,"column_start":12,"column_end":22},"name":"edge_bound","qualname":"::visit::EdgeIndexable::edge_bound","value":"fn edge_bound<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3780},"children":[],"decl_id":null,"docs":" Return an upper bound of the edge indices in the graph\n (suitable for the size of a bitmap).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3782},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25463,"byte_end":25471,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"to_index","qualname":"::visit::EdgeIndexable::to_index","value":"fn to_index<'_>(&'_ Self, Self::EdgeId) -> usize","parent":{"krate":0,"index":3780},"children":[],"decl_id":null,"docs":" Convert `a` to an integer index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25605,"byte_end":25615,"line_start":365,"line_end":365,"column_start":12,"column_end":22},"name":"from_index","qualname":"::visit::EdgeIndexable::from_index","value":"fn from_index<'_>(&'_ Self, usize) -> Self::EdgeId","parent":{"krate":0,"index":3780},"children":[],"decl_id":null,"docs":" Convert `i` to an edge index. `i` must be a valid value in the graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3791},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25812,"byte_end":25821,"line_start":374,"line_end":374,"column_start":11,"column_end":20},"name":"NodeCount","qualname":"::visit::NodeCount","value":"NodeCount: GraphBase","parent":null,"children":[{"krate":0,"index":3792}],"decl_id":null,"docs":" A graph with a known node count.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3792},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25861,"byte_end":25871,"line_start":376,"line_end":376,"column_start":8,"column_end":18},"name":"node_count","qualname":"::visit::NodeCount::node_count","value":"fn node_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3791},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3798},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26128,"byte_end":26148,"line_start":387,"line_end":387,"column_start":11,"column_end":31},"name":"NodeCompactIndexable","qualname":"::visit::NodeCompactIndexable","value":"NodeCompactIndexable: NodeIndexable + NodeCount","parent":null,"children":[],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices, in a range without holes.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26297,"byte_end":26305,"line_start":393,"line_end":393,"column_start":11,"column_end":19},"name":"VisitMap","qualname":"::visit::VisitMap","value":"VisitMap<N>","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"decl_id":null,"docs":" A mapping for storing the visited status for NodeId `N`.\n","sig":null,"attributes":[{"value":"/ A mapping for storing the visited status for NodeId `N`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26226,"byte_end":26286,"line_start":392,"line_end":392,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26424,"byte_end":26429,"line_start":397,"line_end":397,"column_start":8,"column_end":13},"name":"visit","qualname":"::visit::VisitMap::visit","value":"fn visit<'_>(&'_ mut Self, N) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Mark `a` as visited.","sig":null,"attributes":[{"value":"/ Mark `a` as visited.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26315,"byte_end":26339,"line_start":394,"line_end":394,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26344,"byte_end":26347,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ Return **true** if this is the first visit, false otherwise.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26352,"byte_end":26416,"line_start":396,"line_end":396,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26516,"byte_end":26526,"line_start":400,"line_end":400,"column_start":8,"column_end":18},"name":"is_visited","qualname":"::visit::VisitMap::is_visited","value":"fn is_visited<'_, '_>(&'_ Self, &'_ N) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Return whether `a` has been visited before.\n","sig":null,"attributes":[{"value":"/ Return whether `a` has been visited before.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26461,"byte_end":26508,"line_start":399,"line_end":399,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26625,"byte_end":26630,"line_start":407,"line_end":407,"column_start":8,"column_end":13},"name":"visit","qualname":"<FixedBitSet as visit::VisitMap>::visit","value":"fn visit<'_>(&'_ mut Self, Ix) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26701,"byte_end":26711,"line_start":410,"line_end":410,"column_start":8,"column_end":18},"name":"is_visited","qualname":"<FixedBitSet as visit::VisitMap>::is_visited","value":"fn is_visited<'_, '_>(&'_ Self, &'_ Ix) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":{"krate":0,"index":295},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26873,"byte_end":26878,"line_start":420,"line_end":420,"column_start":8,"column_end":13},"name":"visit","qualname":"<HashSet<N, S> as visit::VisitMap>::visit","value":"fn visit<'_>(&'_ mut Self, N) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26942,"byte_end":26952,"line_start":423,"line_end":423,"column_start":8,"column_end":18},"name":"is_visited","qualname":"<HashSet<N, S> as visit::VisitMap>::is_visited","value":"fn is_visited<'_, '_>(&'_ Self, &'_ N) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":{"krate":0,"index":295},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3803},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27165,"byte_end":27174,"line_start":431,"line_end":431,"column_start":11,"column_end":20},"name":"Visitable","qualname":"::visit::Visitable","value":"Visitable: GraphBase","parent":null,"children":[{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3806}],"decl_id":null,"docs":" A graph that can create a map that tracks the visited status of its nodes.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":3804},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27248,"byte_end":27251,"line_start":434,"line_end":434,"column_start":10,"column_end":13},"name":"Map","qualname":"::visit::Visitable::Map","value":"type Map: VisitMap<Self::NodeId>;","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" The associated map type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3805},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27335,"byte_end":27344,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"visit_map","qualname":"::visit::Visitable::visit_map","value":"fn visit_map<'_>(&'_ Self) -> Self::Map","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" Create a new visitor map\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27453,"byte_end":27462,"line_start":439,"line_end":439,"column_start":8,"column_end":17},"name":"reset_map","qualname":"::visit::Visitable::reset_map","value":"fn reset_map<'_, '_>(&'_ Self, &'_ mut Self::Map)","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" Reset the visitor map (and resize to new size of graph if needed)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3814},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27808,"byte_end":27826,"line_start":450,"line_end":450,"column_start":11,"column_end":29},"name":"GetAdjacencyMatrix","qualname":"::visit::GetAdjacencyMatrix","value":"GetAdjacencyMatrix: GraphBase","parent":null,"children":[{"krate":0,"index":3815},{"krate":0,"index":3816},{"krate":0,"index":3817}],"decl_id":null,"docs":" Create or access the adjacency matrix of a graph.","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":3815},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27913,"byte_end":27922,"line_start":453,"line_end":453,"column_start":10,"column_end":19},"name":"AdjMatrix","qualname":"::visit::GetAdjacencyMatrix::AdjMatrix","value":"type AdjMatrix;","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":" The associated adjacency matrix type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27985,"byte_end":28001,"line_start":456,"line_end":456,"column_start":8,"column_end":24},"name":"adjacency_matrix","qualname":"::visit::GetAdjacencyMatrix::adjacency_matrix","value":"fn adjacency_matrix<'_>(&'_ Self) -> Self::AdjMatrix","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":" Create the adjacency matrix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":28155,"byte_end":28166,"line_start":460,"line_end":460,"column_start":8,"column_end":19},"name":"is_adjacent","qualname":"::visit::GetAdjacencyMatrix::is_adjacent","value":"fn is_adjacent<'_,\n'_>(&'_ Self, &'_ Self::AdjMatrix, Self::NodeId, Self::NodeId) -> bool","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":" Return true if there is an edge from `a` to `b`, false otherwise.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3825},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":28406,"byte_end":28415,"line_start":469,"line_end":469,"column_start":11,"column_end":20},"name":"EdgeCount","qualname":"::visit::EdgeCount","value":"EdgeCount: GraphBase","parent":null,"children":[{"krate":0,"index":3826}],"decl_id":null,"docs":" A graph with a known edge count.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":28504,"byte_end":28514,"line_start":472,"line_end":472,"column_start":8,"column_end":18},"name":"edge_count","qualname":"::visit::EdgeCount::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3825},"children":[],"decl_id":null,"docs":" Return the number of edges in the graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":372},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56524,"byte_end":56534,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"name":"FilterNode","qualname":"::visit::filter::FilterNode","value":"FilterNode<N>","parent":null,"children":[{"krate":0,"index":374}],"decl_id":null,"docs":" A graph filter for nodes.\n","sig":null,"attributes":[{"value":"/ A graph filter for nodes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56484,"byte_end":56513,"line_start":15,"line_end":15,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56605,"byte_end":56617,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"include_node","qualname":"::visit::filter::FilterNode::include_node","value":"fn include_node<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Return true to have the node be part of the graph\n","sig":null,"attributes":[{"value":"/ Return true to have the node be part of the graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56544,"byte_end":56597,"line_start":17,"line_end":17,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56714,"byte_end":56726,"line_start":25,"line_end":25,"column_start":8,"column_end":20},"name":"include_node","qualname":"<F as visit::filter::FilterNode>::include_node","value":"fn include_node<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":{"krate":0,"index":374},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56927,"byte_end":56939,"line_start":35,"line_end":35,"column_start":8,"column_end":20},"name":"include_node","qualname":"<FixedBitSet as visit::filter::FilterNode>::include_node","value":"fn include_node<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":{"krate":0,"index":374},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57156,"byte_end":57168,"line_start":45,"line_end":45,"column_start":8,"column_end":20},"name":"include_node","qualname":"<HashSet<N, S> as visit::filter::FilterNode>::include_node","value":"fn include_node<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":{"krate":0,"index":374},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57425,"byte_end":57437,"line_start":56,"line_end":56,"column_start":8,"column_end":20},"name":"include_node","qualname":"<&'_ FixedBitSet as visit::filter::FilterNode>::include_node","value":"fn include_node<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":{"krate":0,"index":374},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57589,"byte_end":57601,"line_start":65,"line_end":65,"column_start":8,"column_end":20},"name":"include_node","qualname":"<&'_ HashSet<N, S> as visit::filter::FilterNode>::include_node","value":"fn include_node<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":372},"children":[],"decl_id":{"krate":0,"index":374},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3831},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57739,"byte_end":57751,"line_start":72,"line_end":72,"column_start":12,"column_end":24},"name":"NodeFiltered","qualname":"::visit::filter::NodeFiltered","value":"","parent":null,"children":[],"decl_id":null,"docs":" A node-filtering graph adaptor.\n","sig":null,"attributes":[{"value":"/ A node-filtering graph adaptor.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57662,"byte_end":57697,"line_start":70,"line_end":70,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3835},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57758,"byte_end":57763,"line_start":72,"line_end":72,"column_start":31,"column_end":36},"name":"0","qualname":"::visit::filter::NodeFiltered::0","value":"G","parent":{"krate":0,"index":3831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3836},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57765,"byte_end":57770,"line_start":72,"line_end":72,"column_start":38,"column_end":43},"name":"1","qualname":"::visit::filter::NodeFiltered::1","value":"F","parent":{"krate":0,"index":3831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57939,"byte_end":57946,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<NodeFiltered<G, F>>::from_fn","value":"fn from_fn(G, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `NodeFiltered` adaptor from the closure `filter`.\n","sig":null,"attributes":[{"value":"/ Create an `NodeFiltered` adaptor from the closure `filter`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57864,"byte_end":57927,"line_start":79,"line_end":79,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58342,"byte_end":58351,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"neighbors","qualname":"<&'a NodeFiltered<G, F> as visit::IntoNeighbors>::neighbors","value":"fn neighbors(Self, G::NodeId) -> Self::Neighbors","parent":{"krate":0,"index":3680},"children":[],"decl_id":{"krate":0,"index":3682},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3848},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58629,"byte_end":58650,"line_start":110,"line_end":110,"column_start":12,"column_end":33},"name":"NodeFilteredNeighbors","qualname":"::visit::filter::NodeFilteredNeighbors","value":"NodeFilteredNeighbors {  }","parent":null,"children":[{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854}],"decl_id":null,"docs":" A filtered neighbors iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58559,"byte_end":58593,"line_start":108,"line_end":108,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58887,"byte_end":58891,"line_start":123,"line_end":123,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeFilteredNeighbors as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":59108,"byte_end":59117,"line_start":131,"line_end":131,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeFilteredNeighbors as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":59449,"byte_end":59467,"line_start":143,"line_end":143,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"<&'a NodeFiltered<G, F> as visit::IntoNeighborsDirected>::neighbors_directed","value":"fn neighbors_directed(Self, G::NodeId, Direction) -> Self::NeighborsDirected","parent":{"krate":0,"index":3689},"children":[],"decl_id":{"krate":0,"index":3691},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":59925,"byte_end":59941,"line_start":158,"line_end":158,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"<&'a NodeFiltered<G, F> as visit::IntoNodeIdentifiers>::node_identifiers","value":"fn node_identifiers(Self) -> Self::NodeIdentifiers","parent":{"krate":0,"index":3711},"children":[],"decl_id":{"krate":0,"index":3713},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":60364,"byte_end":60379,"line_start":174,"line_end":174,"column_start":8,"column_end":23},"name":"node_references","qualname":"<&'a NodeFiltered<G, F> as visit::IntoNodeReferences>::node_references","value":"fn node_references(Self) -> Self::NodeReferences","parent":{"krate":0,"index":3739},"children":[],"decl_id":{"krate":0,"index":3742},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3865},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":60637,"byte_end":60654,"line_start":185,"line_end":185,"column_start":12,"column_end":29},"name":"NodeFilteredNodes","qualname":"::visit::filter::NodeFilteredNodes","value":"NodeFilteredNodes {  }","parent":null,"children":[{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3871}],"decl_id":null,"docs":" A filtered node references iterator.\n","sig":null,"attributes":[{"value":"/ A filtered node references iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":60561,"byte_end":60601,"line_start":183,"line_end":183,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":60918,"byte_end":60922,"line_start":198,"line_end":198,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeFilteredNodes as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":61144,"byte_end":61153,"line_start":206,"line_end":206,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeFilteredNodes as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":61512,"byte_end":61527,"line_start":219,"line_end":219,"column_start":8,"column_end":23},"name":"edge_references","qualname":"<&'a NodeFiltered<G, F> as visit::IntoEdgeReferences>::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":{"krate":0,"index":3753},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3882},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":61782,"byte_end":61808,"line_start":230,"line_end":230,"column_start":12,"column_end":38},"name":"NodeFilteredEdgeReferences","qualname":"::visit::filter::NodeFilteredEdgeReferences","value":"NodeFilteredEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":3887},{"krate":0,"index":3888},{"krate":0,"index":3889}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":61716,"byte_end":61746,"line_start":228,"line_end":228,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":62089,"byte_end":62093,"line_start":243,"line_end":243,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeFilteredEdgeReferences as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":62279,"byte_end":62288,"line_start":248,"line_end":248,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeFilteredEdgeReferences as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":62571,"byte_end":62576,"line_start":260,"line_end":260,"column_start":8,"column_end":13},"name":"edges","qualname":"<&'a NodeFiltered<G, F> as visit::IntoEdges>::edges","value":"fn edges(Self, G::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":{"krate":0,"index":3695},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":63045,"byte_end":63059,"line_start":277,"line_end":277,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"<&'a NodeFiltered<G, F> as visit::IntoEdgesDirected>::edges_directed","value":"fn edges_directed(Self, G::NodeId, Direction) -> Self::EdgesDirected","parent":{"krate":0,"index":3702},"children":[],"decl_id":{"krate":0,"index":3704},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3902},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":63408,"byte_end":63425,"line_start":290,"line_end":290,"column_start":12,"column_end":29},"name":"NodeFilteredEdges","qualname":"::visit::filter::NodeFilteredEdges","value":"NodeFilteredEdges {  }","parent":null,"children":[{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":63342,"byte_end":63372,"line_start":288,"line_end":288,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":63734,"byte_end":63738,"line_start":305,"line_end":305,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeFilteredEdges as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":64160,"byte_end":64169,"line_start":319,"line_end":319,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeFilteredEdges as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":64384,"byte_end":64395,"line_start":330,"line_end":330,"column_start":8,"column_end":19},"name":"node_weight","qualname":"<NodeFiltered<G, F> as data::DataMap>::node_weight","value":"fn node_weight<'_>(&'_ Self, Self::NodeId) -> Option<&'_ Self::NodeWeight>","parent":{"krate":0,"index":4150},"children":[],"decl_id":{"krate":0,"index":4151},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":64582,"byte_end":64593,"line_start":338,"line_end":338,"column_start":8,"column_end":19},"name":"edge_weight","qualname":"<NodeFiltered<G, F> as data::DataMap>::edge_weight","value":"fn edge_weight<'_>(&'_ Self, Self::EdgeId) -> Option<&'_ Self::EdgeWeight>","parent":{"krate":0,"index":4150},"children":[],"decl_id":{"krate":0,"index":4152},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":486},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65138,"byte_end":65148,"line_start":356,"line_end":356,"column_start":11,"column_end":21},"name":"FilterEdge","qualname":"::visit::filter::FilterEdge","value":"FilterEdge<Edge>","parent":null,"children":[{"krate":0,"index":488}],"decl_id":null,"docs":" A graph filter for edges\n","sig":null,"attributes":[{"value":"/ A graph filter for edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65099,"byte_end":65127,"line_start":355,"line_end":355,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65222,"byte_end":65234,"line_start":358,"line_end":358,"column_start":8,"column_end":20},"name":"include_edge","qualname":"::visit::filter::FilterEdge::include_edge","value":"fn include_edge<'_>(&'_ Self, Edge) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Return true to have the edge be part of the graph\n","sig":null,"attributes":[{"value":"/ Return true to have the edge be part of the graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65161,"byte_end":65214,"line_start":357,"line_end":357,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65334,"byte_end":65346,"line_start":365,"line_end":365,"column_start":8,"column_end":20},"name":"include_edge","qualname":"<F as visit::filter::FilterEdge>::include_edge","value":"fn include_edge<'_>(&'_ Self, N) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":{"krate":0,"index":488},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3951},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65757,"byte_end":65769,"line_start":379,"line_end":379,"column_start":12,"column_end":24},"name":"EdgeFiltered","qualname":"::visit::filter::EdgeFiltered","value":"","parent":null,"children":[],"decl_id":null,"docs":" An edge-filtering graph adaptor.","sig":null,"attributes":[{"value":"/ An edge-filtering graph adaptor.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65398,"byte_end":65434,"line_start":370,"line_end":370,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65435,"byte_end":65438,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ The adaptor may filter out edges. The filter implements the trait","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65439,"byte_end":65508,"line_start":372,"line_end":372,"column_start":1,"column_end":70}},{"value":"/ `FilterEdge`. Closures of type `Fn(G::EdgeRef) -> bool` already","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65509,"byte_end":65576,"line_start":373,"line_end":373,"column_start":1,"column_end":68}},{"value":"/ implement this trait.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65577,"byte_end":65602,"line_start":374,"line_end":374,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65603,"byte_end":65606,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ The filter may use edge source, target, id, and weight to select whether to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65607,"byte_end":65686,"line_start":376,"line_end":376,"column_start":1,"column_end":80}},{"value":"/ include the edge or not.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65687,"byte_end":65715,"line_start":377,"line_end":377,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":3955},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65776,"byte_end":65781,"line_start":379,"line_end":379,"column_start":31,"column_end":36},"name":"0","qualname":"::visit::filter::EdgeFiltered::0","value":"G","parent":{"krate":0,"index":3951},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3956},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65783,"byte_end":65788,"line_start":379,"line_end":379,"column_start":38,"column_end":43},"name":"1","qualname":"::visit::filter::EdgeFiltered::1","value":"F","parent":{"krate":0,"index":3951},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65967,"byte_end":65974,"line_start":387,"line_end":387,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<EdgeFiltered<G, F>>::from_fn","value":"fn from_fn(G, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EdgeFiltered` adaptor from the closure `filter`.\n","sig":null,"attributes":[{"value":"/ Create an `EdgeFiltered` adaptor from the closure `filter`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65892,"byte_end":65955,"line_start":386,"line_end":386,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":66356,"byte_end":66365,"line_start":406,"line_end":406,"column_start":8,"column_end":17},"name":"neighbors","qualname":"<&'a EdgeFiltered<G, F> as visit::IntoNeighbors>::neighbors","value":"fn neighbors(Self, G::NodeId) -> Self::Neighbors","parent":{"krate":0,"index":3680},"children":[],"decl_id":{"krate":0,"index":3682},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":66723,"byte_end":66741,"line_start":420,"line_end":420,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"<&'a EdgeFiltered<G, F> as visit::IntoNeighborsDirected>::neighbors_directed","value":"fn neighbors_directed(Self, G::NodeId, Direction) -> Self::NeighborsDirected","parent":{"krate":0,"index":3689},"children":[],"decl_id":{"krate":0,"index":3691},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3968},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":67030,"byte_end":67051,"line_start":431,"line_end":431,"column_start":12,"column_end":33},"name":"EdgeFilteredNeighbors","qualname":"::visit::filter::EdgeFilteredNeighbors","value":"EdgeFilteredNeighbors {  }","parent":null,"children":[{"krate":0,"index":3972},{"krate":0,"index":3973}],"decl_id":null,"docs":" A filtered neighbors iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":66960,"byte_end":66994,"line_start":429,"line_end":429,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":67280,"byte_end":67284,"line_start":445,"line_end":445,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeFilteredNeighbors as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":67605,"byte_end":67614,"line_start":457,"line_end":457,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeFilteredNeighbors as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":67965,"byte_end":67980,"line_start":470,"line_end":470,"column_start":8,"column_end":23},"name":"edge_references","qualname":"<&'a EdgeFiltered<G, F> as visit::IntoEdgeReferences>::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":{"krate":0,"index":3753},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":68332,"byte_end":68337,"line_start":485,"line_end":485,"column_start":8,"column_end":13},"name":"edges","qualname":"<&'a EdgeFiltered<G, F> as visit::IntoEdges>::edges","value":"fn edges(Self, G::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":{"krate":0,"index":3695},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":68718,"byte_end":68732,"line_start":501,"line_end":501,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"<&'a EdgeFiltered<G, F> as visit::IntoEdgesDirected>::edges_directed","value":"fn edges_directed(Self, G::NodeId, Direction) -> Self::EdgesDirected","parent":{"krate":0,"index":3702},"children":[],"decl_id":{"krate":0,"index":3704},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3984},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69012,"byte_end":69029,"line_start":512,"line_end":512,"column_start":12,"column_end":29},"name":"EdgeFilteredEdges","qualname":"::visit::filter::EdgeFilteredEdges","value":"EdgeFilteredEdges {  }","parent":null,"children":[{"krate":0,"index":3989},{"krate":0,"index":3990},{"krate":0,"index":3991}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":68946,"byte_end":68976,"line_start":510,"line_end":510,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69302,"byte_end":69306,"line_start":525,"line_end":525,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeFilteredEdges as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69437,"byte_end":69446,"line_start":529,"line_end":529,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeFilteredEdges as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4004},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69637,"byte_end":69666,"line_start":537,"line_end":537,"column_start":12,"column_end":41},"name":"EdgeFilteredNeighborsDirected","qualname":"::visit::filter::EdgeFilteredNeighborsDirected","value":"EdgeFilteredNeighborsDirected {  }","parent":null,"children":[{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4010}],"decl_id":null,"docs":" A filtered neighbors-directed iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors-directed iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69558,"byte_end":69601,"line_start":535,"line_end":535,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69948,"byte_end":69952,"line_start":552,"line_end":552,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeFilteredNeighborsDirected as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":70497,"byte_end":70506,"line_start":569,"line_end":569,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeFilteredNeighborsDirected as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4068},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71777,"byte_end":71785,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Reversed","qualname":"::visit::reversed::Reversed","value":"","parent":null,"children":[],"decl_id":null,"docs":" An edge-reversing graph adaptor.","sig":null,"attributes":[{"value":"/ An edge-reversing graph adaptor.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71636,"byte_end":71672,"line_start":10,"line_end":10,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71673,"byte_end":71676,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ All edges have the opposite direction with `Reversed`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71677,"byte_end":71735,"line_start":12,"line_end":12,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4071},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71789,"byte_end":71794,"line_start":14,"line_end":14,"column_start":24,"column_end":29},"name":"0","qualname":"::visit::reversed::Reversed::0","value":"G","parent":{"krate":0,"index":4068},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72133,"byte_end":72142,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"neighbors","qualname":"<Reversed<G> as visit::IntoNeighbors>::neighbors","value":"fn neighbors(Self, G::NodeId) -> G::NeighborsDirected","parent":{"krate":0,"index":3680},"children":[],"decl_id":{"krate":0,"index":3682},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72387,"byte_end":72405,"line_start":40,"line_end":40,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"<Reversed<G> as visit::IntoNeighborsDirected>::neighbors_directed","value":"fn neighbors_directed(Self, G::NodeId, Direction) -> G::NeighborsDirected","parent":{"krate":0,"index":3689},"children":[],"decl_id":{"krate":0,"index":3691},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72651,"byte_end":72656,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"edges","qualname":"<Reversed<G> as visit::IntoEdges>::edges","value":"fn edges(Self, Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":{"krate":0,"index":3695},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72935,"byte_end":72949,"line_start":62,"line_end":62,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"<Reversed<G> as visit::IntoEdgesDirected>::edges_directed","value":"fn edges_directed(Self, Self::NodeId, Direction) -> Self::Edges","parent":{"krate":0,"index":3702},"children":[],"decl_id":{"krate":0,"index":3704},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73186,"byte_end":73195,"line_start":71,"line_end":71,"column_start":8,"column_end":17},"name":"visit_map","qualname":"<Reversed<G> as visit::Visitable>::visit_map","value":"fn visit_map<'_>(&'_ Self) -> G::Map","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3805},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73255,"byte_end":73264,"line_start":74,"line_end":74,"column_start":8,"column_end":17},"name":"reset_map","qualname":"<Reversed<G> as visit::Visitable>::reset_map","value":"fn reset_map<'_, '_>(&'_ Self, &'_ mut Self::Map)","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3806},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4084},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73401,"byte_end":73414,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"ReversedEdges","qualname":"::visit::reversed::ReversedEdges","value":"ReversedEdges {  }","parent":null,"children":[{"krate":0,"index":4086}],"decl_id":null,"docs":" A reversed edges iterator.\n","sig":null,"attributes":[{"value":"/ A reversed edges iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73335,"byte_end":73365,"line_start":79,"line_end":79,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73576,"byte_end":73580,"line_start":91,"line_end":91,"column_start":8,"column_end":12},"name":"next","qualname":"<ReversedEdges<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73681,"byte_end":73690,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<ReversedEdges<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4093},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73836,"byte_end":73857,"line_start":101,"line_end":101,"column_start":12,"column_end":33},"name":"ReversedEdgeReference","qualname":"::visit::reversed::ReversedEdgeReference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A reversed edge reference\n","sig":null,"attributes":[{"value":"/ A reversed edge reference","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73765,"byte_end":73794,"line_start":99,"line_end":99,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73968,"byte_end":73981,"line_start":105,"line_end":105,"column_start":12,"column_end":25},"name":"as_unreversed","qualname":"<ReversedEdgeReference<R>>::as_unreversed","value":"fn as_unreversed<'_>(&'_ Self) -> &'_ R","parent":null,"children":[],"decl_id":null,"docs":" Return the original, unreversed edge reference.\n","sig":null,"attributes":[{"value":"/ Return the original, unreversed edge reference.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73905,"byte_end":73956,"line_start":104,"line_end":104,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74106,"byte_end":74121,"line_start":110,"line_end":110,"column_start":12,"column_end":27},"name":"into_unreversed","qualname":"<ReversedEdgeReference<R>>::into_unreversed","value":"fn into_unreversed(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and return the original, unreversed edge reference.\n","sig":null,"attributes":[{"value":"/ Consume `self` and return the original, unreversed edge reference.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74024,"byte_end":74094,"line_start":109,"line_end":109,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74344,"byte_end":74350,"line_start":123,"line_end":123,"column_start":8,"column_end":14},"name":"source","qualname":"<ReversedEdgeReference<R> as visit::EdgeRef>::source","value":"fn source<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":257},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74413,"byte_end":74419,"line_start":126,"line_end":126,"column_start":8,"column_end":14},"name":"target","qualname":"<ReversedEdgeReference<R> as visit::EdgeRef>::target","value":"fn target<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":258},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74482,"byte_end":74488,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"weight","qualname":"<ReversedEdgeReference<R> as visit::EdgeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74552,"byte_end":74554,"line_start":132,"line_end":132,"column_start":8,"column_end":10},"name":"id","qualname":"<ReversedEdgeReference<R> as visit::EdgeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::EdgeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":260},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74817,"byte_end":74832,"line_start":143,"line_end":143,"column_start":8,"column_end":23},"name":"edge_references","qualname":"<Reversed<G> as visit::IntoEdgeReferences>::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":{"krate":0,"index":3753},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4105},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":75037,"byte_end":75059,"line_start":152,"line_end":152,"column_start":12,"column_end":34},"name":"ReversedEdgeReferences","qualname":"::visit::reversed::ReversedEdgeReferences","value":"ReversedEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4107}],"decl_id":null,"docs":" A reversed edge references iterator.\n","sig":null,"attributes":[{"value":"/ A reversed edge references iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74961,"byte_end":75001,"line_start":150,"line_end":150,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":75230,"byte_end":75234,"line_start":162,"line_end":162,"column_start":8,"column_end":12},"name":"next","qualname":"<ReversedEdgeReferences<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":75335,"byte_end":75344,"line_start":165,"line_end":165,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<ReversedEdgeReferences<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":680},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"data","qualname":"::data","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":4149},{"krate":0,"index":4150},{"krate":0,"index":703},{"krate":0,"index":4153},{"krate":0,"index":4158},{"krate":0,"index":4163},{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4171},{"krate":0,"index":4176},{"krate":0,"index":704},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":717},{"krate":0,"index":724},{"krate":0,"index":731},{"krate":0,"index":739},{"krate":0,"index":4180},{"krate":0,"index":4189},{"krate":0,"index":4193},{"krate":0,"index":4197},{"krate":0,"index":4200},{"krate":0,"index":4205},{"krate":0,"index":4208},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":752},{"krate":0,"index":759},{"krate":0,"index":764},{"krate":0,"index":4212},{"krate":0,"index":4219},{"krate":0,"index":4223},{"krate":0,"index":768}],"decl_id":null,"docs":" Graph traits for associated data and graph construction.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5524,"byte_end":5536,"line_start":133,"line_end":133,"column_start":1,"column_end":13}},{"value":"/ Graph traits for associated data and graph construction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":76054,"byte_end":76114,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":4150},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":76522,"byte_end":76529,"line_start":15,"line_end":15,"column_start":11,"column_end":18},"name":"DataMap","qualname":"::data::DataMap","value":"DataMap: Data","parent":null,"children":[{"krate":0,"index":4151},{"krate":0,"index":4152}],"decl_id":null,"docs":" Access node and edge weights (associated data).\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4151},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":76564,"byte_end":76575,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"node_weight","qualname":"::data::DataMap::node_weight","value":"fn node_weight<'_>(&'_ Self, Self::NodeId) -> Option<&'_ Self::NodeWeight>","parent":{"krate":0,"index":4150},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4152},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":76644,"byte_end":76655,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"edge_weight","qualname":"::data::DataMap::edge_weight","value":"fn edge_weight<'_>(&'_ Self, Self::EdgeId) -> Option<&'_ Self::EdgeWeight>","parent":{"krate":0,"index":4150},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4168},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77055,"byte_end":77065,"line_start":35,"line_end":35,"column_start":11,"column_end":21},"name":"DataMapMut","qualname":"::data::DataMapMut","value":"DataMapMut: DataMap","parent":null,"children":[{"krate":0,"index":4169},{"krate":0,"index":4170}],"decl_id":null,"docs":" Access node and edge weights mutably.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_arbitrary_self_type)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/macros.rs","byte_start":29249,"byte_end":29256,"line_start":20,"line_end":20,"column_start":15,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4169},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77103,"byte_end":77118,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"node_weight_mut","qualname":"::data::DataMapMut::node_weight_mut","value":"fn node_weight_mut<'_>(&'_ mut Self, Self::NodeId)\n-> Option<&'_ mut Self::NodeWeight>","parent":{"krate":0,"index":4168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4170},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77195,"byte_end":77210,"line_start":38,"line_end":38,"column_start":8,"column_end":23},"name":"edge_weight_mut","qualname":"::data::DataMapMut::edge_weight_mut","value":"fn edge_weight_mut<'_>(&'_ mut Self, Self::EdgeId)\n-> Option<&'_ mut Self::EdgeWeight>","parent":{"krate":0,"index":4168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":704},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77482,"byte_end":77487,"line_start":46,"line_end":46,"column_start":11,"column_end":16},"name":"Build","qualname":"::data::Build","value":"Build: Data + NodeCount","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707}],"decl_id":null,"docs":" A graph that can be extended with further nodes and edges\n","sig":null,"attributes":[{"value":"/ A graph that can be extended with further nodes and edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77410,"byte_end":77471,"line_start":45,"line_end":45,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77515,"byte_end":77523,"line_start":47,"line_end":47,"column_start":8,"column_end":16},"name":"add_node","qualname":"::data::Build::add_node","value":"fn add_node<'_>(&'_ mut Self, Self::NodeWeight) -> Self::NodeId","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77707,"byte_end":77715,"line_start":50,"line_end":50,"column_start":8,"column_end":16},"name":"add_edge","qualname":"::data::Build::add_edge","value":"fn add_edge<'_>(&'_ mut Self, Self::NodeId, Self::NodeId, Self::EdgeWeight)\n-> Option<Self::EdgeId>","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":" Add a new edge. If parallel edges (duplicate) are not allowed and\n the edge already exists, return `None`.\n","sig":null,"attributes":[{"value":"/ Add a new edge. If parallel edges (duplicate) are not allowed and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77582,"byte_end":77651,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ the edge already exists, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77656,"byte_end":77699,"line_start":49,"line_end":49,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78002,"byte_end":78013,"line_start":60,"line_end":60,"column_start":8,"column_end":19},"name":"update_edge","qualname":"::data::Build::update_edge","value":"fn update_edge<'_>(&'_ mut Self, Self::NodeId, Self::NodeId, Self::EdgeWeight)\n-> Self::EdgeId","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":" Add or update the edge from `a` to `b`. Return the id of the affected\n edge.\n","sig":null,"attributes":[{"value":"/ Add or update the edge from `a` to `b`. Return the id of the affected","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77907,"byte_end":77980,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/ edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77985,"byte_end":77994,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":708},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78186,"byte_end":78192,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"Create","qualname":"::data::Create","value":"Create: Build + Default","parent":null,"children":[{"krate":0,"index":709}],"decl_id":null,"docs":" A graph that can be created\n","sig":null,"attributes":[{"value":"/ A graph that can be created","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78144,"byte_end":78175,"line_start":68,"line_end":68,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78219,"byte_end":78232,"line_start":70,"line_end":70,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::data::Create::with_capacity","value":"fn with_capacity(usize, usize) -> Self","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78504,"byte_end":78515,"line_start":86,"line_end":86,"column_start":8,"column_end":19},"name":"node_weight","qualname":"<Graph<N, E, Ty, Ix> as data::DataMap>::node_weight","value":"fn node_weight<'_>(&'_ Self, Self::NodeId) -> Option<&'_ Self::NodeWeight>","parent":{"krate":0,"index":4150},"children":[],"decl_id":{"krate":0,"index":4151},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78614,"byte_end":78625,"line_start":89,"line_end":89,"column_start":8,"column_end":19},"name":"edge_weight","qualname":"<Graph<N, E, Ty, Ix> as data::DataMap>::edge_weight","value":"fn edge_weight<'_>(&'_ Self, Self::EdgeId) -> Option<&'_ Self::EdgeWeight>","parent":{"krate":0,"index":4150},"children":[],"decl_id":{"krate":0,"index":4152},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78826,"byte_end":78841,"line_start":99,"line_end":99,"column_start":8,"column_end":23},"name":"node_weight_mut","qualname":"<Graph<N, E, Ty, Ix> as data::DataMapMut>::node_weight_mut","value":"fn node_weight_mut<'_>(&'_ mut Self, Self::NodeId)\n-> Option<&'_ mut Self::NodeWeight>","parent":{"krate":0,"index":4168},"children":[],"decl_id":{"krate":0,"index":4169},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78952,"byte_end":78967,"line_start":102,"line_end":102,"column_start":8,"column_end":23},"name":"edge_weight_mut","qualname":"<Graph<N, E, Ty, Ix> as data::DataMapMut>::edge_weight_mut","value":"fn edge_weight_mut<'_>(&'_ mut Self, Self::EdgeId)\n-> Option<&'_ mut Self::EdgeWeight>","parent":{"krate":0,"index":4168},"children":[],"decl_id":{"krate":0,"index":4170},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":79926,"byte_end":79934,"line_start":140,"line_end":140,"column_start":8,"column_end":16},"name":"add_node","qualname":"<Graph<N, E, Ty, Ix> as data::Build>::add_node","value":"fn add_node<'_>(&'_ mut Self, Self::NodeWeight) -> Self::NodeId","parent":{"krate":0,"index":704},"children":[],"decl_id":{"krate":0,"index":705},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":80033,"byte_end":80041,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"add_edge","qualname":"<Graph<N, E, Ty, Ix> as data::Build>::add_edge","value":"fn add_edge<'_>(&'_ mut Self, Self::NodeId, Self::NodeId, Self::EdgeWeight)\n-> Option<Self::EdgeId>","parent":{"krate":0,"index":704},"children":[],"decl_id":{"krate":0,"index":706},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":80233,"byte_end":80244,"line_start":151,"line_end":151,"column_start":8,"column_end":19},"name":"update_edge","qualname":"<Graph<N, E, Ty, Ix> as data::Build>::update_edge","value":"fn update_edge<'_>(&'_ mut Self, Self::NodeId, Self::NodeId, Self::EdgeWeight)\n-> Self::EdgeId","parent":{"krate":0,"index":704},"children":[],"decl_id":{"krate":0,"index":707},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":81944,"byte_end":81957,"line_start":227,"line_end":227,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"<Graph<N, E, Ty, Ix> as data::Create>::with_capacity","value":"fn with_capacity(usize, usize) -> Self","parent":{"krate":0,"index":708},"children":[],"decl_id":{"krate":0,"index":709},"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":4183},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82855,"byte_end":82859,"line_start":262,"line_end":262,"column_start":5,"column_end":9},"name":"Node","qualname":"::data::Element::Node","value":"Element::Node { weight }","parent":{"krate":0,"index":4180},"children":[],"decl_id":null,"docs":" A graph node.\n","sig":null,"attributes":[{"value":"/ A graph node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82833,"byte_end":82850,"line_start":261,"line_end":261,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":4184},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82862,"byte_end":82868,"line_start":262,"line_end":262,"column_start":12,"column_end":18},"name":"weight","qualname":"::data::Element::Node::weight","value":"N","parent":{"krate":0,"index":4183},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":4185},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82901,"byte_end":82905,"line_start":264,"line_end":264,"column_start":5,"column_end":9},"name":"Edge","qualname":"::data::Element::Edge","value":"Element::Edge { source, target, weight }","parent":{"krate":0,"index":4180},"children":[],"decl_id":null,"docs":" A graph edge.\n","sig":null,"attributes":[{"value":"/ A graph edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82879,"byte_end":82896,"line_start":263,"line_end":263,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":4186},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82916,"byte_end":82922,"line_start":265,"line_end":265,"column_start":9,"column_end":15},"name":"source","qualname":"::data::Element::Edge::source","value":"usize","parent":{"krate":0,"index":4185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4187},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82939,"byte_end":82945,"line_start":266,"line_end":266,"column_start":9,"column_end":15},"name":"target","qualname":"::data::Element::Edge::target","value":"usize","parent":{"krate":0,"index":4185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4188},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82962,"byte_end":82968,"line_start":267,"line_end":267,"column_start":9,"column_end":15},"name":"weight","qualname":"::data::Element::Edge::weight","value":"E","parent":{"krate":0,"index":4185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4180},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82813,"byte_end":82820,"line_start":260,"line_end":260,"column_start":10,"column_end":17},"name":"Element","qualname":"::data::Element","value":"enum Element<N, E> {\n    Node {\n            weight: N,\n        },\n    Edge {\n            source: usize,\n            target: usize,\n            weight: E,\n        },\n}","parent":null,"children":[{"krate":0,"index":4183},{"krate":0,"index":4185}],"decl_id":null,"docs":" A graph element.","sig":null,"attributes":[{"value":"/ A graph element.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82519,"byte_end":82539,"line_start":254,"line_end":254,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82540,"byte_end":82543,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ A sequence of Elements, for example an iterator, is laid out as follows:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82544,"byte_end":82620,"line_start":256,"line_end":256,"column_start":1,"column_end":77}},{"value":"/ Nodes are implicitly given the index of their appearance in the sequence.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82621,"byte_end":82698,"line_start":257,"line_end":257,"column_start":1,"column_end":78}},{"value":"/ The edges’ source and target fields refer to these indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82699,"byte_end":82764,"line_start":258,"line_end":258,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":745},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":83042,"byte_end":83054,"line_start":272,"line_end":272,"column_start":11,"column_end":23},"name":"FromElements","qualname":"::data::FromElements","value":"FromElements: Create","parent":null,"children":[{"krate":0,"index":746}],"decl_id":null,"docs":" Create a graph from an iterator of elements.\n","sig":null,"attributes":[{"value":"/ Create a graph from an iterator of elements.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":82983,"byte_end":83031,"line_start":271,"line_end":271,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":83072,"byte_end":83085,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"from_elements","qualname":"::data::FromElements::from_elements","value":"fn from_elements<I>(I) -> Self where Self: Sized, I: IntoIterator<Item =\nElement<Self::NodeWeight, Self::EdgeWeight>>","parent":{"krate":0,"index":745},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":84573,"byte_end":84586,"line_start":330,"line_end":330,"column_start":8,"column_end":21},"name":"from_elements","qualname":"<Graph<N, E, Ty, Ix> as data::FromElements>::from_elements","value":"fn from_elements<I>(I) -> Self where Self: Sized, I: IntoIterator<Item =\nElement<Self::NodeWeight, Self::EdgeWeight>>","parent":{"krate":0,"index":745},"children":[],"decl_id":{"krate":0,"index":746},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":759},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85520,"byte_end":85535,"line_start":370,"line_end":370,"column_start":11,"column_end":26},"name":"ElementIterator","qualname":"::data::ElementIterator","value":"ElementIterator<N, E>: Iterator<Item = Element<N, E>>","parent":null,"children":[{"krate":0,"index":762}],"decl_id":null,"docs":" Iterator adaptors for iterators of `Element`.\n","sig":null,"attributes":[{"value":"/ Iterator adaptors for iterators of `Element`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85460,"byte_end":85509,"line_start":369,"line_end":369,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86087,"byte_end":86102,"line_start":380,"line_end":380,"column_start":8,"column_end":23},"name":"filter_elements","qualname":"::data::ElementIterator::filter_elements","value":"fn filter_elements<F>(Self, F) -> FilterElements<Self, F> where Self: Sized,\nF: for<'_, '_> FnMut(Element<&'_ mut N, &'_ mut E>) -> bool","parent":{"krate":0,"index":759},"children":[],"decl_id":null,"docs":" Create an iterator adaptor that filters graph elements.","sig":null,"attributes":[{"value":"/ Create an iterator adaptor that filters graph elements.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85580,"byte_end":85639,"line_start":371,"line_end":371,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85644,"byte_end":85647,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The function `f` is called with each element and if its return value","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85652,"byte_end":85724,"line_start":373,"line_end":373,"column_start":5,"column_end":77}},{"value":"/ is `true` the element is accepted and if `false` it is removed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85729,"byte_end":85796,"line_start":374,"line_end":374,"column_start":5,"column_end":72}},{"value":"/ `f` is called with mutable references to the node and edge weights,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85801,"byte_end":85872,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ so that they can be mutated (but the edge endpoints can not).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85877,"byte_end":85942,"line_start":376,"line_end":376,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85947,"byte_end":85950,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This filter adapts the edge source and target indices in the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85955,"byte_end":86019,"line_start":378,"line_end":378,"column_start":5,"column_end":69}},{"value":"/ stream so that they are correct after the removals.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86024,"byte_end":86079,"line_start":379,"line_end":379,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4212},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86669,"byte_end":86683,"line_start":402,"line_end":402,"column_start":12,"column_end":26},"name":"FilterElements","qualname":"::data::FilterElements","value":"FilterElements {  }","parent":null,"children":[{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4217},{"krate":0,"index":4218}],"decl_id":null,"docs":" An iterator that filters graph elements.","sig":null,"attributes":[{"value":"/ An iterator that filters graph elements.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86466,"byte_end":86510,"line_start":396,"line_end":396,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86511,"byte_end":86514,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_elements()`][1] for more information.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86515,"byte_end":86570,"line_start":398,"line_end":398,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86571,"byte_end":86574,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ [1]: trait.ElementIterator.html#method.filter_elements","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86575,"byte_end":86633,"line_start":400,"line_end":400,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86946,"byte_end":86950,"line_start":416,"line_end":416,"column_start":8,"column_end":12},"name":"next","qualname":"<FilterElements<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":89017,"byte_end":89026,"line_start":477,"line_end":477,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<FilterElements<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":776},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adj","qualname":"::adj","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":806},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":4227},{"krate":0,"index":4231},{"krate":0,"index":4233},{"krate":0,"index":4236},{"krate":0,"index":4239},{"krate":0,"index":4243},{"krate":0,"index":4245},{"krate":0,"index":4249},{"krate":0,"index":4251},{"krate":0,"index":4254},{"krate":0,"index":4257},{"krate":0,"index":4265},{"krate":0,"index":4268},{"krate":0,"index":4271},{"krate":0,"index":4260},{"krate":0,"index":4274},{"krate":0,"index":4279},{"krate":0,"index":4283},{"krate":0,"index":4287},{"krate":0,"index":4292},{"krate":0,"index":4295},{"krate":0,"index":4300},{"krate":0,"index":4303},{"krate":0,"index":4307},{"krate":0,"index":4311},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":4322},{"krate":0,"index":4327},{"krate":0,"index":4332},{"krate":0,"index":4315},{"krate":0,"index":4337},{"krate":0,"index":4347},{"krate":0,"index":4352},{"krate":0,"index":4358},{"krate":0,"index":4363},{"krate":0,"index":4367},{"krate":0,"index":4372},{"krate":0,"index":4376},{"krate":0,"index":4382},{"krate":0,"index":4387},{"krate":0,"index":837},{"krate":0,"index":841},{"krate":0,"index":846},{"krate":0,"index":4392},{"krate":0,"index":4400},{"krate":0,"index":4405},{"krate":0,"index":857},{"krate":0,"index":4415},{"krate":0,"index":4418},{"krate":0,"index":4421},{"krate":0,"index":4410},{"krate":0,"index":4424},{"krate":0,"index":4432},{"krate":0,"index":4435},{"krate":0,"index":4439},{"krate":0,"index":4443},{"krate":0,"index":863},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":901},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":915},{"krate":0,"index":921},{"krate":0,"index":927},{"krate":0,"index":933},{"krate":0,"index":940},{"krate":0,"index":945},{"krate":0,"index":952},{"krate":0,"index":4447},{"krate":0,"index":4452},{"krate":0,"index":956},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":4466},{"krate":0,"index":4471},{"krate":0,"index":4476},{"krate":0,"index":4459},{"krate":0,"index":974},{"krate":0,"index":980},{"krate":0,"index":985},{"krate":0,"index":989},{"krate":0,"index":993},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1008},{"krate":0,"index":1014}],"decl_id":null,"docs":" Simple adjacency list.\n","sig":null,"attributes":[{"value":"/ Simple adjacency list.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89138,"byte_end":89164,"line_start":1,"line_end":1,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":828},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89558,"byte_end":89567,"line_start":15,"line_end":15,"column_start":10,"column_end":19},"name":"NodeIndex","qualname":"::adj::NodeIndex","value":"Ix","parent":null,"children":[],"decl_id":null,"docs":" Adjacency list node index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Adjacency list node index type, a plain integer.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89496,"byte_end":89548,"line_start":14,"line_end":14,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4227},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89726,"byte_end":89735,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"EdgeIndex","qualname":"::adj::EdgeIndex","value":"EdgeIndex {  }","parent":null,"children":[{"krate":0,"index":4229},{"krate":0,"index":4230}],"decl_id":null,"docs":" Adjacency list edge index type, a pair of integers.\n","sig":null,"attributes":[{"value":"/ Adjacency list edge index type, a pair of integers.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":89591,"byte_end":89646,"line_start":17,"line_end":17,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":4265},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":90107,"byte_end":90126,"line_start":35,"line_end":35,"column_start":8,"column_end":27},"name":"OutgoingEdgeIndices","qualname":"::adj::OutgoingEdgeIndices","value":"OutgoingEdgeIndices {  }","parent":null,"children":[{"krate":0,"index":4267}],"decl_id":null,"docs":" An Iterator over the indices of the outgoing edges from a node.","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/macros.rs","byte_start":10023,"byte_end":10056,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4322},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":90826,"byte_end":90835,"line_start":57,"line_end":57,"column_start":8,"column_end":17},"name":"Neighbors","qualname":"::adj::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":4326}],"decl_id":null,"docs":" An iterator over the indices of the neighbors of a node.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/macros.rs","byte_start":10023,"byte_end":10056,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4352},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91073,"byte_end":91086,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::adj::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":4356},{"krate":0,"index":4357}],"decl_id":null,"docs":" A reference to an edge of the graph.\n","sig":null,"attributes":[{"value":"/ A reference to an edge of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":90972,"byte_end":91012,"line_start":62,"line_end":62,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91393,"byte_end":91398,"line_start":73,"line_end":73,"column_start":8,"column_end":13},"name":"clone","qualname":"<EdgeReference as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91680,"byte_end":91686,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"source","qualname":"<EdgeReference as visit::EdgeRef>::source","value":"fn source<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":257},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91746,"byte_end":91752,"line_start":88,"line_end":88,"column_start":8,"column_end":14},"name":"target","qualname":"<EdgeReference as visit::EdgeRef>::target","value":"fn target<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":258},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91813,"byte_end":91815,"line_start":91,"line_end":91,"column_start":8,"column_end":10},"name":"id","qualname":"<EdgeReference as visit::EdgeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::EdgeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":260},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91870,"byte_end":91876,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"weight","qualname":"<EdgeReference as visit::EdgeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":259},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4392},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91973,"byte_end":91984,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::adj::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":4396},{"krate":0,"index":4397},{"krate":0,"index":4398},{"krate":0,"index":4399}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":92239,"byte_end":92243,"line_start":109,"line_end":109,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeIndices as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<EdgeIndex<Ix>>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4415},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93088,"byte_end":93099,"line_start":136,"line_end":136,"column_start":12,"column_end":23},"name":"NodeIndices","qualname":"::adj::NodeIndices","value":"NodeIndices {  }","parent":null,"children":[{"krate":0,"index":4417}],"decl_id":null,"docs":" An iterator over all node indices in the graph.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/macros.rs","byte_start":10023,"byte_end":10056,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4435},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93890,"byte_end":93894,"line_start":158,"line_end":158,"column_start":12,"column_end":16},"name":"List","qualname":"::adj::List","value":"List {  }","parent":null,"children":[{"krate":0,"index":4438}],"decl_id":null,"docs":" An adjacency list with labeled edges.","sig":null,"attributes":[{"value":"/ An adjacency list with labeled edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93188,"byte_end":93229,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93230,"byte_end":93233,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Can be interpreted as a directed graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93234,"byte_end":93276,"line_start":143,"line_end":143,"column_start":1,"column_end":43}},{"value":"/ with unweighted nodes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93277,"byte_end":93303,"line_start":144,"line_end":144,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93304,"byte_end":93307,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ This is the most simple adjacency list you can imagine. [`Graph`](../graph/struct.Graph.html), in contrast,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93308,"byte_end":93419,"line_start":146,"line_end":146,"column_start":1,"column_end":112}},{"value":"/ maintains both the list of successors and predecessors for each node,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93420,"byte_end":93493,"line_start":147,"line_end":147,"column_start":1,"column_end":74}},{"value":"/ which is a different trade-off.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93494,"byte_end":93529,"line_start":148,"line_end":148,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93530,"byte_end":93533,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ Allows parallel edges and self-loops.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93534,"byte_end":93575,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93576,"byte_end":93579,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ This data structure is append-only (except for [`clear`](#method.clear)), so indices","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93580,"byte_end":93668,"line_start":152,"line_end":152,"column_start":1,"column_end":89}},{"value":"/ returned at some point for a given graph will stay valid with this same","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93669,"byte_end":93744,"line_start":153,"line_end":153,"column_start":1,"column_end":76}},{"value":"/ graph until it is dropped or [`clear`](#method.clear) is called.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93745,"byte_end":93813,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93814,"byte_end":93817,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Space consumption: **O(|E|)**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93818,"byte_end":93852,"line_start":156,"line_end":156,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94063,"byte_end":94066,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<List<E, Ix>>::new","value":"fn new() -> List<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty adjacency list.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty adjacency list.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94011,"byte_end":94051,"line_start":166,"line_end":166,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94209,"byte_end":94222,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<List<E, Ix>>::with_capacity","value":"fn with_capacity(usize) -> List<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty adjacency list tailored for `nodes` nodes.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty adjacency list tailored for `nodes` nodes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94130,"byte_end":94197,"line_start":171,"line_end":171,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94392,"byte_end":94397,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"clear","qualname":"<List<E, Ix>>::clear","value":"fn clear<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all nodes and edges from the list.\n","sig":null,"attributes":[{"value":"/ Removes all nodes and edges from the list.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94334,"byte_end":94380,"line_start":178,"line_end":178,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94547,"byte_end":94557,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<List<E, Ix>>::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of edges in the list","sig":null,"attributes":[{"value":"/ Returns the number of edges in the list","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94447,"byte_end":94490,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94495,"byte_end":94498,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(|V|)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94503,"byte_end":94535,"line_start":185,"line_end":185,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94761,"byte_end":94769,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"add_node","qualname":"<List<E, Ix>>::add_node","value":"fn add_node<'_>(&'_ mut Self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node to the list. This allocates a new `Vec` and then should\n run in amortized **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list. This allocates a new `Vec` and then should","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94634,"byte_end":94709,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/ run in amortized **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94714,"byte_end":94749,"line_start":191,"line_end":191,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95024,"byte_end":95046,"line_start":200,"line_end":200,"column_start":12,"column_end":34},"name":"add_node_with_capacity","qualname":"<List<E, Ix>>::add_node_with_capacity","value":"fn add_node_with_capacity<'_>(&'_ mut Self, usize) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node to the list. This allocates a new `Vec` and then should\n run in amortized **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list. This allocates a new `Vec` and then should","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94897,"byte_end":94972,"line_start":198,"line_end":198,"column_start":5,"column_end":80}},{"value":"/ run in amortized **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":94977,"byte_end":95012,"line_start":199,"line_end":199,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95328,"byte_end":95347,"line_start":208,"line_end":208,"column_start":12,"column_end":31},"name":"add_node_from_edges","qualname":"<List<E, Ix>>::add_node_from_edges","value":"fn add_node_from_edges<I, '_>(&'_ mut Self, I) -> NodeIndex<Ix> where\nI: Iterator<Item = (NodeIndex<Ix>, E)>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node to the list by giving its list of successors and the corresponding\n weigths.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list by giving its list of successors and the corresponding","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95213,"byte_end":95299,"line_start":206,"line_end":206,"column_start":5,"column_end":91}},{"value":"/ weigths.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95304,"byte_end":95316,"line_start":207,"line_end":207,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":96048,"byte_end":96056,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<List<E, Ix>>::add_edge","value":"fn add_edge<'_>(&'_ mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E)\n-> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Add an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95608,"byte_end":95673,"line_start":218,"line_end":218,"column_start":5,"column_end":70}},{"value":"/ data `weight`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95678,"byte_end":95696,"line_start":219,"line_end":219,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95701,"byte_end":95704,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95709,"byte_end":95746,"line_start":221,"line_end":221,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95751,"byte_end":95754,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95759,"byte_end":95789,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95794,"byte_end":95797,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the source node does not exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95802,"byte_end":95855,"line_start":225,"line_end":225,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95860,"byte_end":95863,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ **Note:** `List` allows adding parallel (“duplicate”) edges. If you want","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95868,"byte_end":95948,"line_start":227,"line_end":227,"column_start":5,"column_end":81}},{"value":"/ to avoid this, use [`.update_edge(a, b, weight)`](#method.update_edge) instead.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":95953,"byte_end":96036,"line_start":228,"line_end":228,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97045,"byte_end":97059,"line_start":261,"line_end":261,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<List<E, Ix>>::edge_endpoints","value":"fn edge_endpoints<'_>(&'_ Self, EdgeIndex<Ix>)\n-> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Accesses the source and target of edge `e`","sig":null,"attributes":[{"value":"/ Accesses the source and target of edge `e`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":96950,"byte_end":96996,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97001,"byte_end":97004,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97009,"byte_end":97033,"line_start":260,"line_end":260,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97197,"byte_end":97214,"line_start":265,"line_end":265,"column_start":12,"column_end":29},"name":"edge_indices_from","qualname":"<List<E, Ix>>::edge_indices_from","value":"fn edge_indices_from<'_>(&'_ Self, NodeIndex<Ix>) -> OutgoingEdgeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97774,"byte_end":97787,"line_start":280,"line_end":280,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<List<E, Ix>>::contains_edge","value":"fn contains_edge<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lookups whether there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookups whether there is an edge from `a` to `b`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97616,"byte_end":97669,"line_start":277,"line_end":277,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97674,"byte_end":97677,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of successors of `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97682,"byte_end":97762,"line_start":279,"line_end":279,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98144,"byte_end":98153,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<List<E, Ix>>::find_edge","value":"fn find_edge<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>)\n-> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Lookups whether there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookups whether there is an edge from `a` to `b`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":97986,"byte_end":98039,"line_start":287,"line_end":287,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98044,"byte_end":98047,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of successors of `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98052,"byte_end":98132,"line_start":289,"line_end":289,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98653,"byte_end":98665,"line_start":305,"line_end":305,"column_start":12,"column_end":24},"name":"node_indices","qualname":"<List<E, Ix>>::node_indices","value":"fn node_indices<'_>(&'_ Self) -> NodeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all node indices of the graph.","sig":null,"attributes":[{"value":"/ Returns an iterator over all node indices of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98520,"byte_end":98579,"line_start":302,"line_end":302,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98584,"byte_end":98587,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Consuming the whole iterator take **O(|V|)**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98592,"byte_end":98641,"line_start":304,"line_end":304,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98928,"byte_end":98940,"line_start":314,"line_end":314,"column_start":12,"column_end":24},"name":"edge_indices","qualname":"<List<E, Ix>>::edge_indices","value":"fn edge_indices<'_>(&'_ Self) -> EdgeIndices","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all edge indices of the graph.","sig":null,"attributes":[{"value":"/ Returns an iterator over all edge indices of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98789,"byte_end":98848,"line_start":311,"line_end":311,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98853,"byte_end":98856,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Consuming the whole iterator take **O(|V| + |E|)**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":98861,"byte_end":98916,"line_start":313,"line_end":313,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":893},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99203,"byte_end":99217,"line_start":325,"line_end":325,"column_start":10,"column_end":24},"name":"UnweightedList","qualname":"::adj::UnweightedList","value":"List<(), Ix>","parent":null,"children":[],"decl_id":null,"docs":" A very simple adjacency list with no node or label weights.\n","sig":null,"attributes":[{"value":"/ A very simple adjacency list with no node or label weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99130,"byte_end":99193,"line_start":324,"line_end":324,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99413,"byte_end":99421,"line_start":330,"line_end":330,"column_start":8,"column_end":16},"name":"add_node","qualname":"<List<E, Ix> as data::Build>::add_node","value":"fn add_node<'_>(&'_ mut Self, ()) -> NodeIndex<Ix>","parent":{"krate":0,"index":704},"children":[],"decl_id":{"krate":0,"index":705},"docs":" Adds a new node to the list. This allocates a new `Vec` and then should\n run in amortized **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Adds a new node to the list. This allocates a new `Vec` and then should","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99290,"byte_end":99365,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ run in amortized **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99370,"byte_end":99405,"line_start":329,"line_end":329,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99936,"byte_end":99944,"line_start":345,"line_end":345,"column_start":8,"column_end":16},"name":"add_edge","qualname":"<List<E, Ix> as data::Build>::add_edge","value":"fn add_edge<'_>(&'_ mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E)\n-> Option<EdgeIndex<Ix>>","parent":{"krate":0,"index":704},"children":[],"decl_id":{"krate":0,"index":706},"docs":" Add an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Add an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99500,"byte_end":99565,"line_start":334,"line_end":334,"column_start":5,"column_end":70}},{"value":"/ data `weight`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99570,"byte_end":99588,"line_start":335,"line_end":335,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99593,"byte_end":99596,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99601,"byte_end":99638,"line_start":337,"line_end":337,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99643,"byte_end":99646,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99651,"byte_end":99681,"line_start":339,"line_end":339,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99686,"byte_end":99689,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the source node does not exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99694,"byte_end":99747,"line_start":341,"line_end":341,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99752,"byte_end":99755,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ **Note:** `List` allows adding parallel (“duplicate”) edges. If you want","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99760,"byte_end":99840,"line_start":343,"line_end":343,"column_start":5,"column_end":81}},{"value":"/ to avoid this, use [`.update_edge(a, b, weight)`](#method.update_edge) instead.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99845,"byte_end":99928,"line_start":344,"line_end":344,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100400,"byte_end":100411,"line_start":357,"line_end":357,"column_start":8,"column_end":19},"name":"update_edge","qualname":"<List<E, Ix> as data::Build>::update_edge","value":"fn update_edge<'_>(&'_ mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E)\n-> EdgeIndex<Ix>","parent":{"krate":0,"index":704},"children":[],"decl_id":{"krate":0,"index":707},"docs":" Updates or adds an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Updates or adds an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100083,"byte_end":100160,"line_start":349,"line_end":349,"column_start":5,"column_end":82}},{"value":"/ data `weight`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100165,"byte_end":100183,"line_start":350,"line_end":350,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100188,"byte_end":100191,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100196,"byte_end":100233,"line_start":352,"line_end":352,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100238,"byte_end":100241,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of successors of `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100246,"byte_end":100326,"line_start":354,"line_end":354,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100331,"byte_end":100334,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the source node does not exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":100339,"byte_end":100392,"line_start":356,"line_end":356,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":101081,"byte_end":101084,"line_start":382,"line_end":382,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EdgeReferences as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":101705,"byte_end":101708,"line_start":404,"line_end":404,"column_start":8,"column_end":11},"name":"fmt","qualname":"<List<E, Ix> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102329,"byte_end":102338,"line_start":428,"line_end":428,"column_start":8,"column_end":17},"name":"visit_map","qualname":"<List<E, Ix> as visit::Visitable>::visit_map","value":"fn visit_map<'_>(&'_ Self) -> FixedBitSet","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3805},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102430,"byte_end":102439,"line_start":431,"line_end":431,"column_start":8,"column_end":17},"name":"reset_map","qualname":"<List<E, Ix> as visit::Visitable>::reset_map","value":"fn reset_map<'_, '_>(&'_ Self, &'_ mut Self::Map)","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3806},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102664,"byte_end":102680,"line_start":439,"line_end":439,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"<&'a List<E, Ix> as visit::IntoNodeIdentifiers>::node_identifiers","value":"fn node_identifiers(Self) -> NodeIndices<Ix>","parent":{"krate":0,"index":3711},"children":[],"decl_id":{"krate":0,"index":3713},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102862,"byte_end":102864,"line_start":447,"line_end":447,"column_start":8,"column_end":10},"name":"id","qualname":"<NodeIndex<Ix> as visit::NodeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":272},"children":[],"decl_id":{"krate":0,"index":275},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102917,"byte_end":102923,"line_start":450,"line_end":450,"column_start":8,"column_end":14},"name":"weight","qualname":"<NodeIndex<Ix> as visit::NodeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ Self::Weight","parent":{"krate":0,"index":272},"children":[],"decl_id":{"krate":0,"index":276},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103130,"byte_end":103145,"line_start":458,"line_end":458,"column_start":8,"column_end":23},"name":"node_references","qualname":"<&'a List<E, Ix> as visit::IntoNodeReferences>::node_references","value":"fn node_references(Self) -> Self::NodeReferences","parent":{"krate":0,"index":3739},"children":[],"decl_id":{"krate":0,"index":3742},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103669,"byte_end":103678,"line_start":474,"line_end":474,"column_start":8,"column_end":17},"name":"neighbors","qualname":"<&'a List<E, Ix> as visit::IntoNeighbors>::neighbors","value":"fn neighbors(Self, NodeIndex<Ix>) -> Self::Neighbors","parent":{"krate":0,"index":3680},"children":[],"decl_id":{"krate":0,"index":3682},"docs":" Returns an iterator of all nodes with an edge starting from `a`.\n Panics if `a` is out of bounds.\n Use [`List::edge_indices_from`] instead if you do not want to borrow the adjacency list while\n iterating.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of all nodes with an edge starting from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103432,"byte_end":103500,"line_start":470,"line_end":470,"column_start":5,"column_end":73}},{"value":"/ Panics if `a` is out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103505,"byte_end":103540,"line_start":471,"line_end":471,"column_start":5,"column_end":40}},{"value":"/ Use [`List::edge_indices_from`] instead if you do not want to borrow the adjacency list while","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103545,"byte_end":103642,"line_start":472,"line_end":472,"column_start":5,"column_end":102}},{"value":"/ iterating.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103647,"byte_end":103661,"line_start":473,"line_end":473,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":4447},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":104200,"byte_end":104214,"line_start":489,"line_end":489,"column_start":8,"column_end":22},"name":"EdgeReferences","qualname":"::adj::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4451}],"decl_id":null,"docs":" An iterator over the [`EdgeReference`] of all the edges of the graph.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/macros.rs","byte_start":10023,"byte_end":10056,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":104561,"byte_end":104566,"line_start":503,"line_end":503,"column_start":8,"column_end":13},"name":"clone","qualname":"<EdgeReferences as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":105281,"byte_end":105296,"line_start":529,"line_end":529,"column_start":8,"column_end":23},"name":"edge_references","qualname":"<&'a List<E, Ix> as visit::IntoEdgeReferences>::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":{"krate":0,"index":3753},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4466},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":105582,"byte_end":105604,"line_start":539,"line_end":539,"column_start":8,"column_end":30},"name":"OutgoingEdgeReferences","qualname":"::adj::OutgoingEdgeReferences","value":"OutgoingEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4470}],"decl_id":null,"docs":" Iterator over the [`EdgeReference`] of the outgoing edges from a node.\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/macros.rs","byte_start":10023,"byte_end":10056,"line_start":27,"line_end":27,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":105827,"byte_end":105832,"line_start":546,"line_end":546,"column_start":8,"column_end":13},"name":"edges","qualname":"<&'a List<E, Ix> as visit::IntoEdges>::edges","value":"fn edges(Self, Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":{"krate":0,"index":3695},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106177,"byte_end":106188,"line_start":558,"line_end":558,"column_start":8,"column_end":19},"name":"is_directed","qualname":"<List<E, Ix> as visit::GraphProp>::is_directed","value":"fn is_directed<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":3761},"children":[],"decl_id":{"krate":0,"index":3763},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106377,"byte_end":106387,"line_start":567,"line_end":567,"column_start":8,"column_end":18},"name":"node_count","qualname":"<List<E, Ix> as visit::NodeCount>::node_count","value":"fn node_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3791},"children":[],"decl_id":{"krate":0,"index":3792},"docs":" Returns the number of nodes in the list","sig":null,"attributes":[{"value":"/ Returns the number of nodes in the list","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106283,"byte_end":106326,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106331,"byte_end":106334,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106339,"byte_end":106369,"line_start":566,"line_end":566,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106589,"byte_end":106599,"line_start":576,"line_end":576,"column_start":8,"column_end":18},"name":"edge_count","qualname":"<List<E, Ix> as visit::EdgeCount>::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3825},"children":[],"decl_id":{"krate":0,"index":3826},"docs":" Returns the number of edges in the list","sig":null,"attributes":[{"value":"/ Returns the number of edges in the list","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106493,"byte_end":106536,"line_start":573,"line_end":573,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106541,"byte_end":106544,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(|V|)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106549,"byte_end":106581,"line_start":575,"line_end":575,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106727,"byte_end":106737,"line_start":582,"line_end":582,"column_start":8,"column_end":18},"name":"node_bound","qualname":"<List<E, Ix> as visit::NodeIndexable>::node_bound","value":"fn node_bound<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3770},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106809,"byte_end":106817,"line_start":586,"line_end":586,"column_start":8,"column_end":16},"name":"to_index","qualname":"<List<E, Ix> as visit::NodeIndexable>::to_index","value":"fn to_index<'_>(&'_ Self, Self::NodeId) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3771},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106792,"byte_end":106801,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106898,"byte_end":106908,"line_start":590,"line_end":590,"column_start":8,"column_end":18},"name":"from_index","qualname":"<List<E, Ix> as visit::NodeIndexable>::from_index","value":"fn from_index<'_>(&'_ Self, usize) -> Self::NodeId","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3772},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106881,"byte_end":106890,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107099,"byte_end":107110,"line_start":598,"line_end":598,"column_start":8,"column_end":19},"name":"node_weight","qualname":"<List<E, Ix> as data::DataMap>::node_weight","value":"fn node_weight<'_>(&'_ Self, Self::NodeId) -> Option<&'_ ()>","parent":{"krate":0,"index":4150},"children":[],"decl_id":{"krate":0,"index":4151},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107349,"byte_end":107360,"line_start":609,"line_end":609,"column_start":8,"column_end":19},"name":"edge_weight","qualname":"<List<E, Ix> as data::DataMap>::edge_weight","value":"fn edge_weight<'_>(&'_ Self, EdgeIndex<Ix>) -> Option<&'_ E>","parent":{"krate":0,"index":4150},"children":[],"decl_id":{"krate":0,"index":4152},"docs":" Accesses the weight of edge `e`","sig":null,"attributes":[{"value":"/ Accesses the weight of edge `e`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107269,"byte_end":107304,"line_start":606,"line_end":606,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107309,"byte_end":107312,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107317,"byte_end":107341,"line_start":608,"line_end":608,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107514,"byte_end":107529,"line_start":615,"line_end":615,"column_start":8,"column_end":23},"name":"node_weight_mut","qualname":"<List<E, Ix> as data::DataMapMut>::node_weight_mut","value":"fn node_weight_mut<'_>(&'_ mut Self, Self::NodeId) -> Option<&'_ mut ()>","parent":{"krate":0,"index":4168},"children":[],"decl_id":{"krate":0,"index":4169},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107935,"byte_end":107950,"line_start":628,"line_end":628,"column_start":8,"column_end":23},"name":"edge_weight_mut","qualname":"<List<E, Ix> as data::DataMapMut>::edge_weight_mut","value":"fn edge_weight_mut<'_>(&'_ mut Self, EdgeIndex<Ix>) -> Option<&'_ mut E>","parent":{"krate":0,"index":4168},"children":[],"decl_id":{"krate":0,"index":4170},"docs":" Accesses the weight of edge `e`","sig":null,"attributes":[{"value":"/ Accesses the weight of edge `e`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107855,"byte_end":107890,"line_start":625,"line_end":625,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107895,"byte_end":107898,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107903,"byte_end":107927,"line_start":627,"line_end":627,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":108273,"byte_end":108289,"line_start":641,"line_end":641,"column_start":8,"column_end":24},"name":"adjacency_matrix","qualname":"<List<E, Ix> as visit::GetAdjacencyMatrix>::adjacency_matrix","value":"fn adjacency_matrix<'_>(&'_ Self) -> FixedBitSet","parent":{"krate":0,"index":3814},"children":[],"decl_id":{"krate":0,"index":3816},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":108690,"byte_end":108701,"line_start":654,"line_end":654,"column_start":8,"column_end":19},"name":"is_adjacent","qualname":"<List<E, Ix> as visit::GetAdjacencyMatrix>::is_adjacent","value":"fn is_adjacent<'_,\n'_>(&'_ Self, &'_ FixedBitSet, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":{"krate":0,"index":3814},"children":[],"decl_id":{"krate":0,"index":3817},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algo","qualname":"::algo","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1072},{"krate":0,"index":1110},{"krate":0,"index":1151},{"krate":0,"index":1219},{"krate":0,"index":1308},{"krate":0,"index":1342},{"krate":0,"index":1541},{"krate":0,"index":1578},{"krate":0,"index":1693},{"krate":0,"index":1725},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1768},{"krate":0,"index":1771},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1778},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1844},{"krate":0,"index":1847},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1905},{"krate":0,"index":4678},{"krate":0,"index":4682},{"krate":0,"index":4686},{"krate":0,"index":1907},{"krate":0,"index":1912},{"krate":0,"index":1916},{"krate":0,"index":1920},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":4690},{"krate":0,"index":4692},{"krate":0,"index":4693},{"krate":0,"index":4695},{"krate":0,"index":4697},{"krate":0,"index":4703},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1953},{"krate":0,"index":4706},{"krate":0,"index":4714},{"krate":0,"index":4717},{"krate":0,"index":1955},{"krate":0,"index":4720},{"krate":0,"index":4724},{"krate":0,"index":4727},{"krate":0,"index":4730},{"krate":0,"index":4732},{"krate":0,"index":1959},{"krate":0,"index":4736},{"krate":0,"index":4739},{"krate":0,"index":4741},{"krate":0,"index":4743},{"krate":0,"index":4744},{"krate":0,"index":1962},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1988},{"krate":0,"index":4747},{"krate":0,"index":4751},{"krate":0,"index":4755},{"krate":0,"index":4759},{"krate":0,"index":4763},{"krate":0,"index":4767},{"krate":0,"index":4771},{"krate":0,"index":4775},{"krate":0,"index":4779},{"krate":0,"index":4783},{"krate":0,"index":4787},{"krate":0,"index":4791},{"krate":0,"index":1989},{"krate":0,"index":4795},{"krate":0,"index":4799}],"decl_id":null,"docs":" Graph algorithms.","sig":null,"attributes":[{"value":"/ Graph algorithms.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":108899,"byte_end":108920,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":108921,"byte_end":108924,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It is a goal to gradually migrate the algorithms to be based on graph traits","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":108925,"byte_end":109005,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ so that they are generally applicable. For now, some of these still require","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109006,"byte_end":109085,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ the `Graph` type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109086,"byte_end":109107,"line_start":5,"line_end":5,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"astar","qualname":"::algo::astar","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1064},{"krate":0,"index":1067}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":139091,"byte_end":139096,"line_start":66,"line_end":66,"column_start":8,"column_end":13},"name":"astar","qualname":"::algo::astar::astar","value":"fn astar<G, F, H, K, IsGoal>(G, G::NodeId, IsGoal, F, H)\n-> Option<(K, Vec<G::NodeId>)> where G: IntoEdges + Visitable,\nIsGoal: FnMut(G::NodeId) -> bool, G::NodeId: Eq + Hash, F: FnMut(G::EdgeRef)\n-> K, H: FnMut(G::NodeId) -> K, K: Measure + Copy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] A* shortest path algorithm.","sig":null,"attributes":[{"value":"/ \\[Generic\\] A* shortest path algorithm.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137302,"byte_end":137345,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137346,"byte_end":137349,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computes the shortest path from `start` to `finish`, including the total path cost.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137350,"byte_end":137437,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137438,"byte_end":137441,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `finish` is implicitly given via the `is_goal` callback, which should return `true` if the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137442,"byte_end":137536,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ given node is the finish node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137537,"byte_end":137571,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137572,"byte_end":137575,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The function `edge_cost` should return the cost for a particular edge. Edge costs must be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137576,"byte_end":137669,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/ non-negative.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137670,"byte_end":137687,"line_start":19,"line_end":19,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137688,"byte_end":137691,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The function `estimate_cost` should return the estimated cost to the finish for a particular","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137692,"byte_end":137788,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ node. For the algorithm to find the actual shortest path, it should be admissible, meaning that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137789,"byte_end":137888,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ it should never overestimate the actual cost to get to the nearest goal node. Estimate costs","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137889,"byte_end":137985,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ must also be non-negative.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":137986,"byte_end":138016,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138017,"byte_end":138020,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138021,"byte_end":138083,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138084,"byte_end":138087,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138088,"byte_end":138101,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138102,"byte_end":138109,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138110,"byte_end":138134,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::astar;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138135,"byte_end":138165,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138166,"byte_end":138169,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138170,"byte_end":138199,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ let a = g.add_node((0., 0.));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138200,"byte_end":138233,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/ let b = g.add_node((2., 0.));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138234,"byte_end":138267,"line_start":35,"line_end":35,"column_start":1,"column_end":34}},{"value":"/ let c = g.add_node((1., 1.));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138268,"byte_end":138301,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"/ let d = g.add_node((0., 2.));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138302,"byte_end":138335,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/ let e = g.add_node((3., 3.));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138336,"byte_end":138369,"line_start":38,"line_end":38,"column_start":1,"column_end":34}},{"value":"/ let f = g.add_node((4., 2.));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138370,"byte_end":138403,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/ g.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138404,"byte_end":138430,"line_start":40,"line_end":40,"column_start":1,"column_end":27}},{"value":"/     (a, b, 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138431,"byte_end":138449,"line_start":41,"line_end":41,"column_start":1,"column_end":19}},{"value":"/     (a, d, 4),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138450,"byte_end":138468,"line_start":42,"line_end":42,"column_start":1,"column_end":19}},{"value":"/     (b, c, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138469,"byte_end":138487,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/     (b, f, 7),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138488,"byte_end":138506,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/     (c, e, 5),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138507,"byte_end":138525,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/     (e, f, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138526,"byte_end":138544,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/     (d, e, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138545,"byte_end":138563,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138564,"byte_end":138571,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138572,"byte_end":138575,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Graph represented with the weight of each edge","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138576,"byte_end":138629,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/ // Edges with '*' are part of the optimal path.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138630,"byte_end":138681,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138682,"byte_end":138688,"line_start":52,"line_end":52,"column_start":1,"column_end":7}},{"value":"/ //     2       1","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138689,"byte_end":138709,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/ // a ----- b ----- c","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138710,"byte_end":138734,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ // | 4*    | 7     |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138735,"byte_end":138759,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ // d       f       | 5","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138760,"byte_end":138786,"line_start":56,"line_end":56,"column_start":1,"column_end":27}},{"value":"/ // | 1*    | 1*    |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138787,"byte_end":138811,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/ // \\------ e ------/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138812,"byte_end":138836,"line_start":58,"line_end":58,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138837,"byte_end":138840,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let path = astar(&g, a, |finish| finish == f, |e| *e.weight(), |_| 0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138841,"byte_end":138915,"line_start":60,"line_end":60,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(path, Some((6, vec![a, d, e, f])));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138916,"byte_end":138966,"line_start":61,"line_end":61,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138967,"byte_end":138974,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138975,"byte_end":138978,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Returns the total cost + the path of subsequent `NodeId` from start to finish, if one was","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":138979,"byte_end":139072,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/ found.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":139073,"byte_end":139083,"line_start":65,"line_end":65,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bellman_ford","qualname":"::algo::bellman_ford","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":4481},{"krate":0,"index":4486},{"krate":0,"index":4490},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1107}],"decl_id":null,"docs":" Bellman-Ford algorithms.\n","sig":null,"attributes":[{"value":"/ Bellman-Ford algorithms.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142403,"byte_end":142431,"line_start":1,"line_end":1,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":4481},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142635,"byte_end":142640,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Paths","qualname":"::algo::bellman_ford::Paths","value":"Paths { distances, predecessors }","parent":null,"children":[{"krate":0,"index":4484},{"krate":0,"index":4485}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4484},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142671,"byte_end":142680,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"distances","qualname":"::algo::bellman_ford::Paths::distances","value":"std::vec::Vec<EdgeWeight>","parent":{"krate":0,"index":4481},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4485},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142707,"byte_end":142719,"line_start":12,"line_end":12,"column_start":9,"column_end":21},"name":"predecessors","qualname":"::algo::bellman_ford::Paths::predecessors","value":"std::vec::Vec<std::option::Option<NodeId>>","parent":{"krate":0,"index":4481},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144886,"byte_end":144898,"line_start":81,"line_end":81,"column_start":8,"column_end":20},"name":"bellman_ford","qualname":"::algo::bellman_ford::bellman_ford","value":"fn bellman_ford<G>(G, G::NodeId)\n-> Result<Paths<G::NodeId, G::EdgeWeight>, NegativeCycle> where G: NodeCount +\nIntoNodeIdentifiers + IntoEdges + NodeIndexable, G::EdgeWeight: FloatMeasure","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute shortest paths from node `source` to all other.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute shortest paths from node `source` to all other.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142745,"byte_end":142816,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142817,"byte_end":142820,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Using the [Bellman–Ford algorithm][bf]; negative edge costs are","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142821,"byte_end":142890,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ permitted, but the graph must not have a cycle of negative weights","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142891,"byte_end":142961,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ (in that case it will return an error).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":142962,"byte_end":143005,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143006,"byte_end":143009,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ On success, return one vec with path costs, and another one which points","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143010,"byte_end":143086,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ out the predecessor of a node along a shortest path. The vectors","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143087,"byte_end":143155,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ are indexed by the graph's node indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143156,"byte_end":143200,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143201,"byte_end":143204,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [bf]: https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143205,"byte_end":143275,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143276,"byte_end":143279,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143280,"byte_end":143293,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143294,"byte_end":143305,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143306,"byte_end":143330,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::bellman_ford;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143331,"byte_end":143368,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143369,"byte_end":143398,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143399,"byte_end":143402,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143403,"byte_end":143432,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ let a = g.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143433,"byte_end":143483,"line_start":34,"line_end":34,"column_start":1,"column_end":51}},{"value":"/ let b = g.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143484,"byte_end":143511,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ let c = g.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143512,"byte_end":143539,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/ let d = g.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143540,"byte_end":143567,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/ let e = g.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143568,"byte_end":143595,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/ let f = g.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143596,"byte_end":143623,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/ g.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143624,"byte_end":143650,"line_start":40,"line_end":40,"column_start":1,"column_end":27}},{"value":"/     (0, 1, 2.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143651,"byte_end":143671,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"/     (0, 3, 4.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143672,"byte_end":143692,"line_start":42,"line_end":42,"column_start":1,"column_end":21}},{"value":"/     (1, 2, 1.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143693,"byte_end":143713,"line_start":43,"line_end":43,"column_start":1,"column_end":21}},{"value":"/     (1, 5, 7.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143714,"byte_end":143734,"line_start":44,"line_end":44,"column_start":1,"column_end":21}},{"value":"/     (2, 4, 5.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143735,"byte_end":143755,"line_start":45,"line_end":45,"column_start":1,"column_end":21}},{"value":"/     (4, 5, 1.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143756,"byte_end":143776,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/     (3, 4, 1.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143777,"byte_end":143797,"line_start":47,"line_end":47,"column_start":1,"column_end":21}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143798,"byte_end":143805,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143806,"byte_end":143809,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Graph represented with the weight of each edge","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143810,"byte_end":143863,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/ //","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143864,"byte_end":143870,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/ //     2       1","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143871,"byte_end":143891,"line_start":52,"line_end":52,"column_start":1,"column_end":21}},{"value":"/ // a ----- b ----- c","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143892,"byte_end":143916,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ // | 4     | 7     |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143917,"byte_end":143941,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ // d       f       | 5","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143942,"byte_end":143968,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/ // | 1     | 1     |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143969,"byte_end":143993,"line_start":56,"line_end":56,"column_start":1,"column_end":25}},{"value":"/ // \\------ e ------/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":143994,"byte_end":144018,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144019,"byte_end":144022,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let path = bellman_ford(&g, a);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144023,"byte_end":144058,"line_start":59,"line_end":59,"column_start":1,"column_end":36}},{"value":"/ assert!(path.is_ok());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144059,"byte_end":144085,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/ let path = path.unwrap();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144086,"byte_end":144115,"line_start":61,"line_end":61,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(path.distances, vec![    0.0,     2.0,    3.0,    4.0,     5.0,     6.0]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144116,"byte_end":144205,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/ assert_eq!(path.predecessors, vec![None, Some(a),Some(b),Some(a), Some(d), Some(e)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144206,"byte_end":144295,"line_start":63,"line_end":63,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144296,"byte_end":144299,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Node f (indice 5) can be reach from a with a path costing 6.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144300,"byte_end":144367,"line_start":65,"line_end":65,"column_start":1,"column_end":68}},{"value":"/ // Predecessor of f is Some(e) which predecessor is Some(d) which predecessor is Some(a).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144368,"byte_end":144461,"line_start":66,"line_end":66,"column_start":1,"column_end":94}},{"value":"/ // Thus the path from a to f is a <-> d <-> e <-> f","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144462,"byte_end":144517,"line_start":67,"line_end":67,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144518,"byte_end":144521,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let graph_with_neg_cycle = Graph::<(), f32, Undirected>::from_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144522,"byte_end":144596,"line_start":69,"line_end":69,"column_start":1,"column_end":75}},{"value":"/         (0, 1, -2.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144597,"byte_end":144622,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/         (0, 3, -4.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144623,"byte_end":144648,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/         (1, 2, -1.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144649,"byte_end":144674,"line_start":72,"line_end":72,"column_start":1,"column_end":26}},{"value":"/         (1, 5, -25.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144675,"byte_end":144701,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"/         (2, 4, -5.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144702,"byte_end":144727,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/         (4, 5, -25.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144728,"byte_end":144754,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/         (3, 4, -1.0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144755,"byte_end":144780,"line_start":76,"line_end":76,"column_start":1,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144781,"byte_end":144788,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144789,"byte_end":144792,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ assert!(bellman_ford(&graph_with_neg_cycle, NodeIndex::new(0)).is_err());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144793,"byte_end":144870,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":144871,"byte_end":144878,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146885,"byte_end":146904,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"find_negative_cycle","qualname":"::algo::bellman_ford::find_negative_cycle","value":"fn find_negative_cycle<G>(G, G::NodeId) -> Option<Vec<G::NodeId>> where\nG: NodeCount + IntoNodeIdentifiers + IntoEdges + NodeIndexable + Visitable,\nG::EdgeWeight: FloatMeasure","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Find the path of a negative cycle reachable from node `source`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Find the path of a negative cycle reachable from node `source`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":145652,"byte_end":145731,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":145732,"byte_end":145735,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ Using the [find_negative_cycle][nc]; will search the Graph for negative cycles using","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":145736,"byte_end":145824,"line_start":113,"line_end":113,"column_start":1,"column_end":89}},{"value":"/ [Bellman–Ford algorithm][bf]. If no negative cycle is found the function will return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":145825,"byte_end":145923,"line_start":114,"line_end":114,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":145924,"byte_end":145927,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ If a negative cycle is found from source, return one vec with a path of `NodeId`s.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":145928,"byte_end":146014,"line_start":116,"line_end":116,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146015,"byte_end":146018,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The time complexity of this algorithm should be the same as the Bellman-Ford (O(|V|·|E|)).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146019,"byte_end":146114,"line_start":118,"line_end":118,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146115,"byte_end":146118,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ [nc]: https://blogs.asarkar.com/assets/docs/algorithms-curated/Negative-Weight%20Cycle%20Algorithms%20-%20Huang.pdf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146119,"byte_end":146238,"line_start":120,"line_end":120,"column_start":1,"column_end":120}},{"value":"/ [bf]: https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146239,"byte_end":146309,"line_start":121,"line_end":121,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146310,"byte_end":146313,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146314,"byte_end":146327,"line_start":123,"line_end":123,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146328,"byte_end":146339,"line_start":124,"line_end":124,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146340,"byte_end":146364,"line_start":125,"line_end":125,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::find_negative_cycle;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146365,"byte_end":146409,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146410,"byte_end":146439,"line_start":127,"line_end":127,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146440,"byte_end":146443,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ let graph_with_neg_cycle = Graph::<(), f32, Directed>::from_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146444,"byte_end":146516,"line_start":129,"line_end":129,"column_start":1,"column_end":73}},{"value":"/         (0, 1, 1.),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146517,"byte_end":146540,"line_start":130,"line_end":130,"column_start":1,"column_end":24}},{"value":"/         (0, 2, 1.),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146541,"byte_end":146564,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/         (0, 3, 1.),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146565,"byte_end":146588,"line_start":132,"line_end":132,"column_start":1,"column_end":24}},{"value":"/         (1, 3, 1.),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146589,"byte_end":146612,"line_start":133,"line_end":133,"column_start":1,"column_end":24}},{"value":"/         (2, 1, 1.),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146613,"byte_end":146636,"line_start":134,"line_end":134,"column_start":1,"column_end":24}},{"value":"/         (3, 2, -3.),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146637,"byte_end":146661,"line_start":135,"line_end":135,"column_start":1,"column_end":25}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146662,"byte_end":146669,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146670,"byte_end":146673,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ let path = find_negative_cycle(&graph_with_neg_cycle, NodeIndex::new(0));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146674,"byte_end":146751,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146752,"byte_end":146767,"line_start":139,"line_end":139,"column_start":1,"column_end":16}},{"value":"/     path,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146768,"byte_end":146781,"line_start":140,"line_end":140,"column_start":1,"column_end":14}},{"value":"/     Some([NodeIndex::new(1), NodeIndex::new(3), NodeIndex::new(2)].to_vec())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146782,"byte_end":146862,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/ );","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146863,"byte_end":146869,"line_start":142,"line_end":142,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/bellman_ford.rs","byte_start":146870,"byte_end":146877,"line_start":143,"line_end":143,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1110},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dijkstra","qualname":"::algo::dijkstra","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1144},{"krate":0,"index":1147}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152518,"byte_end":152526,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"dijkstra","qualname":"::algo::dijkstra::dijkstra","value":"fn dijkstra<G, F, K>(G, G::NodeId, Option<G::NodeId>, F)\n-> HashMap<G::NodeId, K> where G: IntoEdges + Visitable, G::NodeId: Eq + Hash,\nF: FnMut(G::EdgeRef) -> K, K: Measure + Copy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Dijkstra's shortest path algorithm.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Dijkstra's shortest path algorithm.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150717,"byte_end":150768,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150769,"byte_end":150772,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Compute the length of the shortest path from `start` to every reachable","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150773,"byte_end":150848,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150849,"byte_end":150858,"line_start":13,"line_end":13,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150859,"byte_end":150862,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`. The function","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150863,"byte_end":150938,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ `edge_cost` should return the cost for a particular edge, which is used","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":150939,"byte_end":151014,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ to compute path costs. Edge costs must be non-negative.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151015,"byte_end":151074,"line_start":17,"line_end":17,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151075,"byte_end":151078,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ If `goal` is not `None`, then the algorithm terminates once the `goal` node's","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151079,"byte_end":151160,"line_start":19,"line_end":19,"column_start":1,"column_end":82}},{"value":"/ cost is calculated.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151161,"byte_end":151184,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151185,"byte_end":151188,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Returns a `HashMap` that maps `NodeId` to path cost.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151189,"byte_end":151245,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151246,"byte_end":151259,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151260,"byte_end":151271,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151272,"byte_end":151296,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::dijkstra;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151297,"byte_end":151330,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151331,"byte_end":151360,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151361,"byte_end":151395,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151396,"byte_end":151399,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut graph: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151400,"byte_end":151458,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151459,"byte_end":151513,"line_start":31,"line_end":31,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151514,"byte_end":151545,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151546,"byte_end":151577,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151578,"byte_end":151609,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151610,"byte_end":151641,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151642,"byte_end":151673,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151674,"byte_end":151705,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151706,"byte_end":151737,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ // z will be in another connected component","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151738,"byte_end":151785,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ let z = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151786,"byte_end":151817,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151818,"byte_end":151821,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151822,"byte_end":151852,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151853,"byte_end":151868,"line_start":43,"line_end":43,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151869,"byte_end":151884,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151885,"byte_end":151900,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151901,"byte_end":151916,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151917,"byte_end":151932,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     (b, e),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151933,"byte_end":151948,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151949,"byte_end":151964,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151965,"byte_end":151980,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/     (h, e),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151981,"byte_end":151996,"line_start":51,"line_end":51,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":151997,"byte_end":152004,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ // a ----> b ----> e ----> f","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152005,"byte_end":152037,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152038,"byte_end":152070,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152071,"byte_end":152103,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152104,"byte_end":152136,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152137,"byte_end":152140,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let expected_res: HashMap<NodeIndex, usize> = [","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152141,"byte_end":152192,"line_start":58,"line_end":58,"column_start":1,"column_end":52}},{"value":"/     (a, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152193,"byte_end":152208,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/     (b, 0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152209,"byte_end":152224,"line_start":60,"line_end":60,"column_start":1,"column_end":16}},{"value":"/     (c, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152225,"byte_end":152240,"line_start":61,"line_end":61,"column_start":1,"column_end":16}},{"value":"/     (d, 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152241,"byte_end":152256,"line_start":62,"line_end":62,"column_start":1,"column_end":16}},{"value":"/     (e, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152257,"byte_end":152272,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/     (f, 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152273,"byte_end":152288,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"/     (g, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152289,"byte_end":152304,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/     (h, 4),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152305,"byte_end":152320,"line_start":66,"line_end":66,"column_start":1,"column_end":16}},{"value":"/ ].iter().cloned().collect();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152321,"byte_end":152353,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"/ let res = dijkstra(&graph, b, None, |_| 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152354,"byte_end":152401,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(res, expected_res);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152402,"byte_end":152436,"line_start":69,"line_end":69,"column_start":1,"column_end":35}},{"value":"/ // z is not inside res because there is not path from b to z.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152437,"byte_end":152502,"line_start":70,"line_end":70,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dijkstra.rs","byte_start":152503,"byte_end":152510,"line_start":71,"line_end":71,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1151},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dominators","qualname":"::algo::dominators","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":4494},{"krate":0,"index":4498},{"krate":0,"index":4501},{"krate":0,"index":1184},{"krate":0,"index":4504},{"krate":0,"index":4509},{"krate":0,"index":4513},{"krate":0,"index":1191},{"krate":0,"index":4517},{"krate":0,"index":4522},{"krate":0,"index":4526},{"krate":0,"index":1196},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1215},{"krate":0,"index":1217}],"decl_id":null,"docs":" Compute dominators of a control-flow graph.","sig":null,"attributes":[{"value":"/ Compute dominators of a control-flow graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154155,"byte_end":154202,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154203,"byte_end":154206,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # The Dominance Relation","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154207,"byte_end":154235,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154236,"byte_end":154239,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ In a directed graph with a root node **R**, a node **A** is said to *dominate* a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154240,"byte_end":154324,"line_start":5,"line_end":5,"column_start":1,"column_end":85}},{"value":"/ node **B** iff every path from **R** to **B** contains **A**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154325,"byte_end":154390,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154391,"byte_end":154394,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The node **A** is said to *strictly dominate* the node **B** iff **A** dominates","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154395,"byte_end":154479,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"/ **B** and **A ≠ B**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154480,"byte_end":154506,"line_start":9,"line_end":9,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154507,"byte_end":154510,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The node **A** is said to be the *immediate dominator* of a node **B** iff it","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154511,"byte_end":154592,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ strictly dominates **B** and there does not exist any node **C** where **A**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154593,"byte_end":154673,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ dominates **C** and **C** dominates **B**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154674,"byte_end":154720,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":4494},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154993,"byte_end":155003,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"Dominators","qualname":"::algo::dominators::Dominators","value":"Dominators {  }","parent":null,"children":[{"krate":0,"index":4496},{"krate":0,"index":4497}],"decl_id":null,"docs":" The dominance relation for some graph and root.\n","sig":null,"attributes":[{"value":"/ The dominance relation for some graph and root.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":154906,"byte_end":154957,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155224,"byte_end":155228,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"root","qualname":"<Dominators<N>>::root","value":"fn root<'_>(&'_ Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Get the root node used to construct these dominance relations.\n","sig":null,"attributes":[{"value":"/ Get the root node used to construct these dominance relations.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155146,"byte_end":155212,"line_start":35,"line_end":35,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155448,"byte_end":155467,"line_start":44,"line_end":44,"column_start":12,"column_end":31},"name":"immediate_dominator","qualname":"<Dominators<N>>::immediate_dominator","value":"fn immediate_dominator<'_>(&'_ Self, N) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Get the immediate dominator of the given node.","sig":null,"attributes":[{"value":"/ Get the immediate dominator of the given node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155272,"byte_end":155322,"line_start":40,"line_end":40,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155327,"byte_end":155330,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Returns `None` for any node that is not reachable from the root, and for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155335,"byte_end":155411,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ the root itself.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155416,"byte_end":155436,"line_start":43,"line_end":43,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155796,"byte_end":155813,"line_start":56,"line_end":56,"column_start":12,"column_end":29},"name":"strict_dominators","qualname":"<Dominators<N>>::strict_dominators","value":"fn strict_dominators<'_>(&'_ Self, N) -> Option<DominatorsIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the given node's strict dominators.","sig":null,"attributes":[{"value":"/ Iterate over the given node's strict dominators.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155633,"byte_end":155685,"line_start":52,"line_end":52,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155690,"byte_end":155693,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If the given node is not reachable from the root, then `None` is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155698,"byte_end":155766,"line_start":54,"line_end":54,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155771,"byte_end":155784,"line_start":55,"line_end":55,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156307,"byte_end":156317,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"dominators","qualname":"<Dominators<N>>::dominators","value":"fn dominators<'_>(&'_ Self, N) -> Option<DominatorsIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all of the given node's dominators (including the given\n node itself).","sig":null,"attributes":[{"value":"/ Iterate over all of the given node's dominators (including the given","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156102,"byte_end":156174,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ node itself).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156179,"byte_end":156196,"line_start":68,"line_end":68,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156201,"byte_end":156204,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ If the given node is not reachable from the root, then `None` is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156209,"byte_end":156277,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156282,"byte_end":156295,"line_start":71,"line_end":71,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156711,"byte_end":156735,"line_start":85,"line_end":85,"column_start":12,"column_end":36},"name":"immediately_dominated_by","qualname":"<Dominators<N>>::immediately_dominated_by","value":"fn immediately_dominated_by<'_>(&'_ Self, N) -> DominatedByIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all nodes immediately dominated by the given node (not\n including the given node itself).\n","sig":null,"attributes":[{"value":"/ Iterate over all nodes immediately dominated by the given node (not","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156586,"byte_end":156657,"line_start":83,"line_end":83,"column_start":5,"column_end":76}},{"value":"/ including the given node itself).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156662,"byte_end":156699,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4504},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156954,"byte_end":156968,"line_start":95,"line_end":95,"column_start":12,"column_end":26},"name":"DominatorsIter","qualname":"::algo::dominators::DominatorsIter","value":"DominatorsIter {  }","parent":null,"children":[{"krate":0,"index":4507},{"krate":0,"index":4508}],"decl_id":null,"docs":" Iterator for a node's dominators.\n","sig":null,"attributes":[{"value":"/ Iterator for a node's dominators.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":156881,"byte_end":156918,"line_start":93,"line_end":93,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157185,"byte_end":157189,"line_start":109,"line_end":109,"column_start":8,"column_end":12},"name":"next","qualname":"<DominatorsIter as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4517},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157481,"byte_end":157496,"line_start":120,"line_end":120,"column_start":12,"column_end":27},"name":"DominatedByIter","qualname":"::algo::dominators::DominatedByIter","value":"DominatedByIter {  }","parent":null,"children":[{"krate":0,"index":4520},{"krate":0,"index":4521}],"decl_id":null,"docs":" Iterator for nodes dominated by a given node.\n","sig":null,"attributes":[{"value":"/ Iterator for nodes dominated by a given node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157396,"byte_end":157445,"line_start":118,"line_end":118,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157697,"byte_end":157701,"line_start":134,"line_end":134,"column_start":8,"column_end":12},"name":"next","qualname":"<DominatedByIter as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157913,"byte_end":157922,"line_start":142,"line_end":142,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<DominatedByIter as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1203},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158634,"byte_end":158645,"line_start":161,"line_end":161,"column_start":8,"column_end":19},"name":"simple_fast","qualname":"::algo::dominators::simple_fast","value":"fn simple_fast<G>(G, G::NodeId) -> Dominators<G::NodeId> where\nG: IntoNeighbors + Visitable, <G as GraphBase>::NodeId: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" This is an implementation of the engineered [\"Simple, Fast Dominance\n Algorithm\"][0] discovered by Cooper et al.","sig":null,"attributes":[{"value":"/ This is an implementation of the engineered [\"Simple, Fast Dominance","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158177,"byte_end":158249,"line_start":152,"line_end":152,"column_start":1,"column_end":73}},{"value":"/ Algorithm\"][0] discovered by Cooper et al.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158250,"byte_end":158296,"line_start":153,"line_end":153,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158297,"byte_end":158300,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This algorithm is **O(|V|²)**, and therefore has slower theoretical running time","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158301,"byte_end":158386,"line_start":155,"line_end":155,"column_start":1,"column_end":85}},{"value":"/ than the Lengauer-Tarjan algorithm (which is **O(|E| log |V|)**. However,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158387,"byte_end":158464,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ Cooper et al found it to be faster in practice on control flow graphs of up","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158465,"byte_end":158544,"line_start":157,"line_end":157,"column_start":1,"column_end":80}},{"value":"/ to ~30,000 vertices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158545,"byte_end":158569,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158570,"byte_end":158573,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ [0]: http://www.cs.rice.edu/~keith/EMBED/dom.pdf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":158574,"byte_end":158626,"line_start":160,"line_end":160,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"feedback_arc_set","qualname":"::algo::feedback_arc_set","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1268},{"krate":0,"index":1273},{"krate":0,"index":4531},{"krate":0,"index":4533},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":4535},{"krate":0,"index":4540},{"krate":0,"index":4542},{"krate":0,"index":4545},{"krate":0,"index":4547},{"krate":0,"index":4548},{"krate":0,"index":4549},{"krate":0,"index":4552},{"krate":0,"index":4554},{"krate":0,"index":4560},{"krate":0,"index":1279},{"krate":0,"index":1284}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1263},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165720,"byte_end":165743,"line_start":62,"line_end":62,"column_start":8,"column_end":31},"name":"greedy_feedback_arc_set","qualname":"::algo::feedback_arc_set::greedy_feedback_arc_set","value":"fn greedy_feedback_arc_set<G>(G) -> /*impl Trait*/ where\nG: IntoEdgeReferences + GraphProp<EdgeType = Directed>, G::NodeId: GraphIndex,\nG: crate::visit::NodeCount","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Finds a [feedback arc set]: a set of edges in the given directed graph, which when\n removed, make the graph acyclic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Finds a [feedback arc set]: a set of edges in the given directed graph, which when","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164258,"byte_end":164356,"line_start":14,"line_end":14,"column_start":1,"column_end":99}},{"value":"/ removed, make the graph acyclic.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164357,"byte_end":164393,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164394,"byte_end":164397,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Uses a [greedy heuristic algorithm] to select a small number of edges, but does not necessarily","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164398,"byte_end":164497,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"/ find the minimum feedback arc set. Time complexity is roughly **O(|E|)** for an input graph with","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164498,"byte_end":164598,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ edges **E**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164599,"byte_end":164615,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164616,"byte_end":164619,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Does not consider edge/node weights when selecting edges for the feedback arc set.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164620,"byte_end":164706,"line_start":21,"line_end":21,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164707,"byte_end":164710,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Loops (edges to and from the same node) are always included in the returned set.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164711,"byte_end":164795,"line_start":23,"line_end":23,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164796,"byte_end":164799,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164800,"byte_end":164813,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164814,"byte_end":164817,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164818,"byte_end":164825,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"stable_graph\")] {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164826,"byte_end":164866,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/ use petgraph::{","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164867,"byte_end":164886,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/     algo::{greedy_feedback_arc_set, is_cyclic_directed},","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164887,"byte_end":164947,"line_start":30,"line_end":30,"column_start":1,"column_end":61}},{"value":"/     graph::EdgeIndex,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164948,"byte_end":164973,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/     stable_graph::StableGraph,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":164974,"byte_end":165008,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"/     visit::EdgeRef,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165009,"byte_end":165032,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ };","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165033,"byte_end":165039,"line_start":34,"line_end":34,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165040,"byte_end":165043,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let mut g: StableGraph<(), ()> = StableGraph::from_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165044,"byte_end":165107,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/     (0, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165108,"byte_end":165123,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/     (1, 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165124,"byte_end":165139,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/     (2, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165140,"byte_end":165155,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/     (3, 4),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165156,"byte_end":165171,"line_start":40,"line_end":40,"column_start":1,"column_end":16}},{"value":"/     (4, 5),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165172,"byte_end":165187,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/     (5, 0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165188,"byte_end":165203,"line_start":42,"line_end":42,"column_start":1,"column_end":16}},{"value":"/     (4, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165204,"byte_end":165219,"line_start":43,"line_end":43,"column_start":1,"column_end":16}},{"value":"/     (1, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165220,"byte_end":165235,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165236,"byte_end":165243,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165244,"byte_end":165247,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert!(is_cyclic_directed(&g));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165248,"byte_end":165284,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165285,"byte_end":165288,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let fas: Vec<EdgeIndex> = greedy_feedback_arc_set(&g).map(|e| e.id()).collect();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165289,"byte_end":165373,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165374,"byte_end":165377,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Remove edges in feedback arc set from original graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165378,"byte_end":165437,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ for edge_id in fas {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165438,"byte_end":165462,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     g.remove_edge(edge_id);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165463,"byte_end":165494,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165495,"byte_end":165500,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165501,"byte_end":165504,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ assert!(!is_cyclic_directed(&g));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165505,"byte_end":165542,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165543,"byte_end":165550,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165551,"byte_end":165558,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165559,"byte_end":165562,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ [feedback arc set]: https://en.wikipedia.org/wiki/Feedback_arc_set","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165563,"byte_end":165633,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/ [greedy heuristic algorithm]: https://doi.org/10.1016/0020-0190(93)90079-O","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":165634,"byte_end":165712,"line_start":61,"line_end":61,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"floyd_warshall","qualname":"::algo::floyd_warshall","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1326},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1335},{"krate":0,"index":1338}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1338},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":180186,"byte_end":180200,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"floyd_warshall","qualname":"::algo::floyd_warshall::floyd_warshall","value":"fn floyd_warshall<G, F, K>(G, F)\n-> Result<HashMap<(G::NodeId, G::NodeId), K>, NegativeCycle> where\nG: NodeCompactIndexable + IntoEdgeReferences + IntoNodeIdentifiers +\nGraphProp, G::NodeId: Eq + Hash, F: FnMut(G::EdgeRef) -> K,\nK: BoundedMeasure + Copy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] [Floyd–Warshall algorithm](https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is an algorithm for all pairs shortest path problem","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity, clippy :: needless_range_loop)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":177813,"byte_end":177875,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/ \\[Generic\\] [Floyd–Warshall algorithm](https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) is an algorithm for all pairs shortest path problem","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":177876,"byte_end":178036,"line_start":11,"line_end":11,"column_start":1,"column_end":159}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178037,"byte_end":178040,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Compute shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178041,"byte_end":178156,"line_start":13,"line_end":13,"column_start":1,"column_end":116}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178157,"byte_end":178160,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178161,"byte_end":178176,"line_start":15,"line_end":15,"column_start":1,"column_end":16}},{"value":"/ * `graph`: graph with no negative cycle","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178177,"byte_end":178220,"line_start":16,"line_end":16,"column_start":1,"column_end":44}},{"value":"/ * `edge_cost`: closure that returns cost of a particular edge","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178221,"byte_end":178286,"line_start":17,"line_end":17,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178287,"byte_end":178290,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178291,"byte_end":178304,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/ * `Ok`: (if graph contains no negative cycle) a hashmap containing all pairs shortest paths","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178305,"byte_end":178400,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ * `Err`: if graph contains negative cycle.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178401,"byte_end":178447,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178448,"byte_end":178451,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178452,"byte_end":178466,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178467,"byte_end":178478,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use petgraph::{prelude::*, Graph, Directed};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178479,"byte_end":178527,"line_start":25,"line_end":25,"column_start":1,"column_end":49}},{"value":"/ use petgraph::algo::floyd_warshall;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178528,"byte_end":178567,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178568,"byte_end":178602,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178603,"byte_end":178606,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut graph: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178607,"byte_end":178665,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ let a = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178666,"byte_end":178697,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178698,"byte_end":178729,"line_start":31,"line_end":31,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178730,"byte_end":178761,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178762,"byte_end":178793,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178794,"byte_end":178797,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178798,"byte_end":178828,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/    (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178829,"byte_end":178843,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/    (a, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178844,"byte_end":178858,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/    (a, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178859,"byte_end":178873,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/    (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178874,"byte_end":178888,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/    (b, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178889,"byte_end":178903,"line_start":40,"line_end":40,"column_start":1,"column_end":15}},{"value":"/    (c, d)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178904,"byte_end":178917,"line_start":41,"line_end":41,"column_start":1,"column_end":14}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178918,"byte_end":178925,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178926,"byte_end":178929,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let weight_map: HashMap<(NodeIndex, NodeIndex), i32> = [","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178930,"byte_end":178990,"line_start":44,"line_end":44,"column_start":1,"column_end":61}},{"value":"/    ((a, a), 0), ((a, b), 1), ((a, c), 4), ((a, d), 10),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":178991,"byte_end":179050,"line_start":45,"line_end":45,"column_start":1,"column_end":60}},{"value":"/    ((b, b), 0), ((b, c), 2), ((b, d), 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179051,"byte_end":179096,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"/    ((c, c), 0), ((c, d), 2)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179097,"byte_end":179128,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/ ].iter().cloned().collect();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179129,"byte_end":179161,"line_start":48,"line_end":48,"column_start":1,"column_end":33}},{"value":"/ //     ----- b --------","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179162,"byte_end":179189,"line_start":49,"line_end":49,"column_start":1,"column_end":28}},{"value":"/ //    |      ^         | 2","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179190,"byte_end":179220,"line_start":50,"line_end":50,"column_start":1,"column_end":31}},{"value":"/ //    |    1 |    4    v","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179221,"byte_end":179249,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ //  2 |      a ------> c","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179250,"byte_end":179278,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ //    |   10 |         | 2","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179279,"byte_end":179309,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/ //    |      v         v","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179310,"byte_end":179338,"line_start":54,"line_end":54,"column_start":1,"column_end":29}},{"value":"/ //     --->  d <-------","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179339,"byte_end":179366,"line_start":55,"line_end":55,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179367,"byte_end":179370,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ let inf = std::i32::MAX;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179371,"byte_end":179399,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/ let expected_res: HashMap<(NodeIndex, NodeIndex), i32> = [","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179400,"byte_end":179462,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/    ((a, a), 0), ((a, b), 1), ((a, c), 3), ((a, d), 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179463,"byte_end":179521,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/    ((b, a), inf), ((b, b), 0), ((b, c), 2), ((b, d), 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179522,"byte_end":179582,"line_start":60,"line_end":60,"column_start":1,"column_end":61}},{"value":"/    ((c, a), inf), ((c, b), inf), ((c, c), 0), ((c, d), 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179583,"byte_end":179645,"line_start":61,"line_end":61,"column_start":1,"column_end":63}},{"value":"/    ((d, a), inf), ((d, b), inf), ((d, c), inf), ((d, d), 0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179646,"byte_end":179710,"line_start":62,"line_end":62,"column_start":1,"column_end":65}},{"value":"/ ].iter().cloned().collect();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179711,"byte_end":179743,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179744,"byte_end":179747,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179748,"byte_end":179751,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let res = floyd_warshall(&graph, |edge| {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179752,"byte_end":179797,"line_start":66,"line_end":66,"column_start":1,"column_end":46}},{"value":"/     if let Some(weight) = weight_map.get(&(edge.source(), edge.target())) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179798,"byte_end":179877,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/         *weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179878,"byte_end":179897,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"/     } else {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179898,"byte_end":179914,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"/         inf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179915,"byte_end":179930,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179931,"byte_end":179940,"line_start":71,"line_end":71,"column_start":1,"column_end":10}},{"value":"/ }).unwrap();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179941,"byte_end":179957,"line_start":72,"line_end":72,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179958,"byte_end":179961,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let nodes = [a, b, c, d];","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179962,"byte_end":179991,"line_start":74,"line_end":74,"column_start":1,"column_end":30}},{"value":"/ for node1 in &nodes {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":179992,"byte_end":180017,"line_start":75,"line_end":75,"column_start":1,"column_end":26}},{"value":"/     for node2 in &nodes {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":180018,"byte_end":180047,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/         assert_eq!(res.get(&(*node1, *node2)).unwrap(), expected_res.get(&(*node1, *node2)).unwrap());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":180048,"byte_end":180154,"line_start":77,"line_end":77,"column_start":1,"column_end":107}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":180155,"byte_end":180164,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":180165,"byte_end":180170,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/floyd_warshall.rs","byte_start":180171,"byte_end":180178,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isomorphism","qualname":"::algo::isomorphism","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1346},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1355},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1410},{"krate":0,"index":1450},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1526},{"krate":0,"index":1529},{"krate":0,"index":1534}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209700,"byte_end":209713,"line_start":816,"line_end":816,"column_start":8,"column_end":21},"name":"is_isomorphic","qualname":"::algo::isomorphism::is_isomorphic","value":"fn is_isomorphic<G0, G1>(G0, G1) -> bool where G0: NodeCompactIndexable +\nEdgeCount + GetAdjacencyMatrix + GraphProp + IntoNeighborsDirected,\nG1: NodeCompactIndexable + EdgeCount + GetAdjacencyMatrix + GraphProp<EdgeType\n= G0::EdgeType> + IntoNeighborsDirected","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209318,"byte_end":209391,"line_start":805,"line_end":805,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209392,"byte_end":209395,"line_start":806,"line_end":806,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, only matching graph syntactically (graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209396,"byte_end":209465,"line_start":807,"line_end":807,"column_start":1,"column_end":70}},{"value":"/ structure).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209466,"byte_end":209481,"line_start":808,"line_end":808,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209482,"byte_end":209485,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209486,"byte_end":209527,"line_start":810,"line_end":810,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209528,"byte_end":209531,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ **Reference**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209532,"byte_end":209549,"line_start":812,"line_end":812,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209550,"byte_end":209553,"line_start":813,"line_end":813,"column_start":1,"column_end":4}},{"value":"/ * Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209554,"byte_end":209623,"line_start":814,"line_end":814,"column_start":1,"column_end":70}},{"value":"/   *A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs*","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":209624,"byte_end":209692,"line_start":815,"line_end":815,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1521},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210572,"byte_end":210594,"line_start":840,"line_end":840,"column_start":8,"column_end":30},"name":"is_isomorphic_matching","qualname":"::algo::isomorphism::is_isomorphic_matching","value":"fn is_isomorphic_matching<G0, G1, NM, EM>(G0, G1, NM, EM) -> bool where\nG0: NodeCompactIndexable + EdgeCount + DataMap + GetAdjacencyMatrix +\nGraphProp + IntoEdgesDirected, G1: NodeCompactIndexable + EdgeCount +\nDataMap + GetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoEdgesDirected,\nNM: for<'_, '_> FnMut(&'_ G0::NodeWeight, &'_ G1::NodeWeight) -> bool,\nEM: for<'_, '_> FnMut(&'_ G0::EdgeWeight, &'_ G1::EdgeWeight) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the graphs `g0` and `g1` are isomorphic.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210298,"byte_end":210371,"line_start":834,"line_end":834,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210372,"byte_end":210375,"line_start":835,"line_end":835,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, examining both syntactic and semantic","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210376,"byte_end":210442,"line_start":836,"line_end":836,"column_start":1,"column_end":67}},{"value":"/ graph isomorphism (graph structure and matching node and edge weights).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210443,"byte_end":210518,"line_start":837,"line_end":837,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210519,"byte_end":210522,"line_start":838,"line_end":838,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":210523,"byte_end":210564,"line_start":839,"line_end":839,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213017,"byte_end":213039,"line_start":903,"line_end":903,"column_start":8,"column_end":30},"name":"is_isomorphic_subgraph","qualname":"::algo::isomorphism::is_isomorphic_subgraph","value":"fn is_isomorphic_subgraph<G0, G1>(G0, G1) -> bool where\nG0: NodeCompactIndexable + EdgeCount + GetAdjacencyMatrix + GraphProp +\nIntoNeighborsDirected, G1: NodeCompactIndexable + EdgeCount +\nGetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoNeighborsDirected","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211401,"byte_end":211475,"line_start":870,"line_end":870,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211476,"byte_end":211479,"line_start":871,"line_end":871,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, only matching graph syntactically (graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211480,"byte_end":211549,"line_start":872,"line_end":872,"column_start":1,"column_end":70}},{"value":"/ structure).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211550,"byte_end":211565,"line_start":873,"line_end":873,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211566,"byte_end":211569,"line_start":874,"line_end":874,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211570,"byte_end":211611,"line_start":875,"line_end":875,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211612,"byte_end":211615,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ # Subgraph isomorphism","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211616,"byte_end":211642,"line_start":877,"line_end":877,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211643,"byte_end":211646,"line_start":878,"line_end":878,"column_start":1,"column_end":4}},{"value":"/ (adapted from [`networkx` documentation](https://networkx.github.io/documentation/stable/reference/algorithms/isomorphism.vf2.html))","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211647,"byte_end":211783,"line_start":879,"line_end":879,"column_start":1,"column_end":137}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211784,"byte_end":211787,"line_start":880,"line_end":880,"column_start":1,"column_end":4}},{"value":"/ Graph theory literature can be ambiguous about the meaning of the above statement,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211788,"byte_end":211874,"line_start":881,"line_end":881,"column_start":1,"column_end":87}},{"value":"/ and we seek to clarify it now.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211875,"byte_end":211909,"line_start":882,"line_end":882,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211910,"byte_end":211913,"line_start":883,"line_end":883,"column_start":1,"column_end":4}},{"value":"/ In the VF2 literature, a mapping **M** is said to be a *graph-subgraph isomorphism*","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":211914,"byte_end":212001,"line_start":884,"line_end":884,"column_start":1,"column_end":88}},{"value":"/ iff **M** is an isomorphism between **G2** and a subgraph of **G1**. Thus, to say","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212002,"byte_end":212087,"line_start":885,"line_end":885,"column_start":1,"column_end":86}},{"value":"/ that **G1** and **G2** are graph-subgraph isomorphic is to say that a subgraph of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212088,"byte_end":212173,"line_start":886,"line_end":886,"column_start":1,"column_end":86}},{"value":"/ **G1** is isomorphic to **G2**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212174,"byte_end":212209,"line_start":887,"line_end":887,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212210,"byte_end":212213,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ Other literature uses the phrase ‘subgraph isomorphic’ as in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212214,"byte_end":212282,"line_start":889,"line_end":889,"column_start":1,"column_end":65}},{"value":"/ ‘**G1** does not have a subgraph isomorphic to **G2**’. Another use is as an in adverb","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212283,"byte_end":212377,"line_start":890,"line_end":890,"column_start":1,"column_end":91}},{"value":"/ for isomorphic. Thus, to say that **G1** and **G2** are subgraph isomorphic is to say","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212378,"byte_end":212467,"line_start":891,"line_end":891,"column_start":1,"column_end":90}},{"value":"/ that a subgraph of **G1** is isomorphic to **G2**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212468,"byte_end":212522,"line_start":892,"line_end":892,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212523,"byte_end":212526,"line_start":893,"line_end":893,"column_start":1,"column_end":4}},{"value":"/ Finally, the term ‘subgraph’ can have multiple meanings. In this context,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212527,"byte_end":212608,"line_start":894,"line_end":894,"column_start":1,"column_end":78}},{"value":"/ ‘subgraph’ always means a ‘node-induced subgraph’. Edge-induced subgraph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212609,"byte_end":212693,"line_start":895,"line_end":895,"column_start":1,"column_end":77}},{"value":"/ isomorphisms are not directly supported. For subgraphs which are not","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212694,"byte_end":212766,"line_start":896,"line_end":896,"column_start":1,"column_end":73}},{"value":"/ induced, the term ‘monomorphism’ is preferred over ‘isomorphism’.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212767,"byte_end":212844,"line_start":897,"line_end":897,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212845,"byte_end":212848,"line_start":898,"line_end":898,"column_start":1,"column_end":4}},{"value":"/ **Reference**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212849,"byte_end":212866,"line_start":899,"line_end":899,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212867,"byte_end":212870,"line_start":900,"line_end":900,"column_start":1,"column_end":4}},{"value":"/ * Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212871,"byte_end":212940,"line_start":901,"line_end":901,"column_start":1,"column_end":70}},{"value":"/   *A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs*","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":212941,"byte_end":213009,"line_start":902,"line_end":902,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213896,"byte_end":213927,"line_start":927,"line_end":927,"column_start":8,"column_end":39},"name":"is_isomorphic_subgraph_matching","qualname":"::algo::isomorphism::is_isomorphic_subgraph_matching","value":"fn is_isomorphic_subgraph_matching<G0, G1, NM, EM>(G0, G1, NM, EM) -> bool\nwhere G0: NodeCompactIndexable + EdgeCount + DataMap + GetAdjacencyMatrix +\nGraphProp + IntoEdgesDirected, G1: NodeCompactIndexable + EdgeCount +\nDataMap + GetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoEdgesDirected,\nNM: for<'_, '_> FnMut(&'_ G0::NodeWeight, &'_ G1::NodeWeight) -> bool,\nEM: for<'_, '_> FnMut(&'_ G0::EdgeWeight, &'_ G1::EdgeWeight) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if `g0` is isomorphic to a subgraph of `g1`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213621,"byte_end":213695,"line_start":921,"line_end":921,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213696,"byte_end":213699,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, examining both syntactic and semantic","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213700,"byte_end":213766,"line_start":923,"line_end":923,"column_start":1,"column_end":67}},{"value":"/ graph isomorphism (graph structure and matching node and edge weights).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213767,"byte_end":213842,"line_start":924,"line_end":924,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213843,"byte_end":213846,"line_start":925,"line_end":925,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":213847,"byte_end":213888,"line_start":926,"line_end":926,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":215016,"byte_end":215042,"line_start":963,"line_end":963,"column_start":8,"column_end":34},"name":"subgraph_isomorphisms_iter","qualname":"::algo::isomorphism::subgraph_isomorphisms_iter","value":"fn subgraph_isomorphisms_iter<'a, G0, G1, NM,\nEM>(&'a G0, &'a G1, &'a mut NM, &'a mut EM) -> Option</*impl Trait*/> where\nG0: 'a + NodeCompactIndexable + EdgeCount + DataMap + GetAdjacencyMatrix +\nGraphProp + IntoEdgesDirected, G1: 'a + NodeCompactIndexable + EdgeCount +\nDataMap + GetAdjacencyMatrix + GraphProp<EdgeType = G0::EdgeType> +\nIntoEdgesDirected, NM: 'a +\nfor<'_, '_> FnMut(&'_ G0::NodeWeight, &'_ G1::NodeWeight) -> bool, EM: 'a +\nfor<'_, '_> FnMut(&'_ G0::EdgeWeight, &'_ G1::EdgeWeight) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Using the VF2 algorithm, examine both syntactic and semantic graph\n isomorphism (graph structure and matching node and edge weights) and,\n if `g0` is isomorphic to a subgraph of `g1`, return the mappings between\n them.","sig":null,"attributes":[{"value":"/ Using the VF2 algorithm, examine both syntactic and semantic graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":214731,"byte_end":214801,"line_start":957,"line_end":957,"column_start":1,"column_end":71}},{"value":"/ isomorphism (graph structure and matching node and edge weights) and,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":214802,"byte_end":214875,"line_start":958,"line_end":958,"column_start":1,"column_end":74}},{"value":"/ if `g0` is isomorphic to a subgraph of `g1`, return the mappings between","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":214876,"byte_end":214952,"line_start":959,"line_end":959,"column_start":1,"column_end":77}},{"value":"/ them.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":214953,"byte_end":214962,"line_start":960,"line_end":960,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":214963,"byte_end":214966,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":214967,"byte_end":215008,"line_start":962,"line_end":962,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"k_shortest_path","qualname":"::algo::k_shortest_path","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1562},{"krate":0,"index":1565},{"krate":0,"index":1568},{"krate":0,"index":1571},{"krate":0,"index":1574}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217976,"byte_end":217991,"line_start":73,"line_end":73,"column_start":8,"column_end":23},"name":"k_shortest_path","qualname":"::algo::k_shortest_path::k_shortest_path","value":"fn k_shortest_path<G, F, K>(G, G::NodeId, Option<G::NodeId>, usize, F)\n-> HashMap<G::NodeId, K> where G: IntoEdges + Visitable + NodeCount +\nNodeIndexable, G::NodeId: Eq + Hash, F: FnMut(G::EdgeRef) -> K, K: Measure +\nCopy","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] k'th shortest path algorithm.","sig":null,"attributes":[{"value":"/ \\[Generic\\] k'th shortest path algorithm.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216086,"byte_end":216131,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216132,"byte_end":216135,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Compute the length of the k'th shortest path from `start` to every reachable","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216136,"byte_end":216216,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216217,"byte_end":216226,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216227,"byte_end":216230,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`. The function","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216231,"byte_end":216306,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ `edge_cost` should return the cost for a particular edge, which is used","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216307,"byte_end":216382,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ to compute path costs. Edge costs must be non-negative.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216383,"byte_end":216442,"line_start":16,"line_end":16,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216443,"byte_end":216446,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If `goal` is not `None`, then the algorithm terminates once the `goal` node's","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216447,"byte_end":216528,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"/ cost is calculated.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216529,"byte_end":216552,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216553,"byte_end":216556,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Computes in **O(k * (|E| + |V|*log(|V|)))** time (average).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216557,"byte_end":216620,"line_start":21,"line_end":21,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216621,"byte_end":216624,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Returns a `HashMap` that maps `NodeId` to path cost.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216625,"byte_end":216681,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216682,"byte_end":216695,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216696,"byte_end":216707,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216708,"byte_end":216732,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::k_shortest_path;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216733,"byte_end":216773,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216774,"byte_end":216803,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216804,"byte_end":216838,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216839,"byte_end":216842,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed>= Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216843,"byte_end":216899,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216900,"byte_end":216954,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216955,"byte_end":216986,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":216987,"byte_end":217018,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217019,"byte_end":217050,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217051,"byte_end":217082,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217083,"byte_end":217114,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217115,"byte_end":217146,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217147,"byte_end":217178,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/ // z will be in another connected component","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217179,"byte_end":217226,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/ let z = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217227,"byte_end":217258,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217259,"byte_end":217262,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217263,"byte_end":217293,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217294,"byte_end":217309,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217310,"byte_end":217325,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217326,"byte_end":217341,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217342,"byte_end":217357,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217358,"byte_end":217373,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/     (b, e),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217374,"byte_end":217389,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217390,"byte_end":217405,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217406,"byte_end":217421,"line_start":51,"line_end":51,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217422,"byte_end":217436,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217437,"byte_end":217444,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ // a ----> b ----> e ----> f","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217445,"byte_end":217477,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217478,"byte_end":217510,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217511,"byte_end":217543,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217544,"byte_end":217576,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217577,"byte_end":217580,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let expected_res: HashMap<NodeIndex, usize> = [","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217581,"byte_end":217632,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/      (a, 7),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217633,"byte_end":217649,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/      (b, 4),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217650,"byte_end":217666,"line_start":61,"line_end":61,"column_start":1,"column_end":17}},{"value":"/      (c, 5),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217667,"byte_end":217683,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/      (d, 6),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217684,"byte_end":217700,"line_start":63,"line_end":63,"column_start":1,"column_end":17}},{"value":"/      (e, 5),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217701,"byte_end":217717,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/      (f, 6),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217718,"byte_end":217734,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/      (g, 7),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217735,"byte_end":217751,"line_start":66,"line_end":66,"column_start":1,"column_end":17}},{"value":"/      (h, 8)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217752,"byte_end":217767,"line_start":67,"line_end":67,"column_start":1,"column_end":16}},{"value":"/     ].iter().cloned().collect();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217768,"byte_end":217804,"line_start":68,"line_end":68,"column_start":1,"column_end":37}},{"value":"/ let res = k_shortest_path(&graph,b,None,2, |_| 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217805,"byte_end":217859,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(res, expected_res);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217860,"byte_end":217894,"line_start":70,"line_end":70,"column_start":1,"column_end":35}},{"value":"/ // z is not inside res because there is not path from b to z.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217895,"byte_end":217960,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/k_shortest_path.rs","byte_start":217961,"byte_end":217968,"line_start":72,"line_end":72,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"matching","qualname":"::algo::matching","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1589},{"krate":0,"index":1592},{"krate":0,"index":1595},{"krate":0,"index":1598},{"krate":0,"index":1601},{"krate":0,"index":1604},{"krate":0,"index":1607},{"krate":0,"index":1610},{"krate":0,"index":1613},{"krate":0,"index":1618},{"krate":0,"index":1621},{"krate":0,"index":1631},{"krate":0,"index":1634},{"krate":0,"index":1638},{"krate":0,"index":1643},{"krate":0,"index":1649},{"krate":0,"index":1653},{"krate":0,"index":1659},{"krate":0,"index":1663},{"krate":0,"index":1665},{"krate":0,"index":1668},{"krate":0,"index":4656},{"krate":0,"index":4673},{"krate":0,"index":4676},{"krate":0,"index":1671},{"krate":0,"index":1677},{"krate":0,"index":1680},{"krate":0,"index":1683},{"krate":0,"index":1687},{"krate":0,"index":1690}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1613},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219455,"byte_end":219463,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"Matching","qualname":"::algo::matching::Matching","value":"Matching {  }","parent":null,"children":[{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1617}],"decl_id":null,"docs":" Computed\n [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)#Definitions)\n of the graph.\n","sig":null,"attributes":[{"value":"/ Computed","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219329,"byte_end":219341,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)#Definitions)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219342,"byte_end":219425,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/ of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219426,"byte_end":219443,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219973,"byte_end":219977,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"mate","qualname":"<Matching<G>>::mate","value":"fn mate<'_>(&'_ Self, G::NodeId) -> Option<G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" Gets the matched counterpart of given node, if there is any.","sig":null,"attributes":[{"value":"/ Gets the matched counterpart of given node, if there is any.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219820,"byte_end":219884,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219889,"byte_end":219892,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the node is not matched or does not exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219897,"byte_end":219961,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1625},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220317,"byte_end":220322,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"edges","qualname":"<Matching<G>>::edges","value":"fn edges<'_>(&'_ Self) -> MatchedEdges","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all edges from the matching.","sig":null,"attributes":[{"value":"/ Iterates over all edges from the matching.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220104,"byte_end":220150,"line_start":42,"line_end":42,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220155,"byte_end":220158,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ An edge is represented by its endpoints. The graph is considered","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220163,"byte_end":220231,"line_start":44,"line_end":44,"column_start":5,"column_end":73}},{"value":"/ undirected and every pair of matched nodes is reported only once.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220236,"byte_end":220305,"line_start":45,"line_end":45,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1626},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220553,"byte_end":220558,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"nodes","qualname":"<Matching<G>>::nodes","value":"fn nodes<'_>(&'_ Self) -> MatchedNodes","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all nodes from the matching.\n","sig":null,"attributes":[{"value":"/ Iterates over all nodes from the matching.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220495,"byte_end":220541,"line_start":54,"line_end":54,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220890,"byte_end":220903,"line_start":66,"line_end":66,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Matching<G>>::contains_edge","value":"fn contains_edge<'_>(&'_ Self, G::NodeId, G::NodeId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if given edge is in the matching, or `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if given edge is in the matching, or `false` otherwise.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220731,"byte_end":220805,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220810,"byte_end":220813,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ If any of the nodes does not exist, `false` is returned.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":220818,"byte_end":220878,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221214,"byte_end":221227,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"contains_node","qualname":"<Matching<G>>::contains_node","value":"fn contains_node<'_>(&'_ Self, G::NodeId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if given node is in the matching, or `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if given node is in the matching, or `false` otherwise.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221063,"byte_end":221137,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221142,"byte_end":221145,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ If the node does not exist, `false` is returned.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221150,"byte_end":221202,"line_start":75,"line_end":75,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221360,"byte_end":221363,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"len","qualname":"<Matching<G>>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of matched **edges**.\n","sig":null,"attributes":[{"value":"/ Gets the number of matched **edges**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221307,"byte_end":221348,"line_start":80,"line_end":80,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221485,"byte_end":221493,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Matching<G>>::is_empty","value":"fn is_empty<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number of matched **edges** is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the number of matched **edges** is 0.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221414,"byte_end":221473,"line_start":85,"line_end":85,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221846,"byte_end":221856,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"is_perfect","qualname":"<Matching<G>>::is_perfect","value":"fn is_perfect<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the matching is perfect.","sig":null,"attributes":[{"value":"/ Returns `true` if the matching is perfect.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221594,"byte_end":221640,"line_start":95,"line_end":95,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221645,"byte_end":221648,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ A matching is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221653,"byte_end":221670,"line_start":97,"line_end":97,"column_start":5,"column_end":22}},{"value":"/ [*perfect*](https://en.wikipedia.org/wiki/Matching_(graph_theory)#Definitions)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221675,"byte_end":221757,"line_start":98,"line_end":98,"column_start":5,"column_end":87}},{"value":"/ if every node in the graph is incident to an edge from the matching.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221762,"byte_end":221834,"line_start":99,"line_end":99,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":222816,"byte_end":222828,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"MatchedNodes","qualname":"::algo::matching::MatchedNodes","value":"MatchedNodes {  }","parent":null,"children":[{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":223031,"byte_end":223035,"line_start":146,"line_end":146,"column_start":8,"column_end":12},"name":"next","qualname":"<MatchedNodes as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1653},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":223356,"byte_end":223368,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"MatchedEdges","qualname":"::algo::matching::MatchedEdges","value":"MatchedEdges {  }","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":223584,"byte_end":223588,"line_start":172,"line_end":172,"column_start":8,"column_end":12},"name":"next","qualname":"<MatchedEdges as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1663},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224751,"byte_end":224766,"line_start":205,"line_end":205,"column_start":8,"column_end":23},"name":"greedy_matching","qualname":"::algo::matching::greedy_matching","value":"fn greedy_matching<G>(G) -> Matching<G> where G: Visitable +\nIntoNodeIdentifiers + NodeIndexable + IntoNeighbors, G::NodeId: Eq + Hash,\nG::EdgeId: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute a\n [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using a\n greedy heuristic.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224247,"byte_end":224272,"line_start":192,"line_end":192,"column_start":1,"column_end":26}},{"value":"/ [*matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224273,"byte_end":224352,"line_start":193,"line_end":193,"column_start":1,"column_end":80}},{"value":"/ greedy heuristic.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224353,"byte_end":224374,"line_start":194,"line_end":194,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224375,"byte_end":224378,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected. The underlying heuristic is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224379,"byte_end":224455,"line_start":196,"line_end":196,"column_start":1,"column_end":77}},{"value":"/ unspecified, but is guaranteed to be bounded by *O(|V| + |E|)*. No","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224456,"byte_end":224526,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ guarantees about the output are given other than that it is a valid","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224527,"byte_end":224598,"line_start":198,"line_end":198,"column_start":1,"column_end":72}},{"value":"/ matching.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224599,"byte_end":224612,"line_start":199,"line_end":199,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224613,"byte_end":224616,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ If you require a maximum matching, use [`maximum_matching`][1] function","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224617,"byte_end":224692,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224693,"byte_end":224705,"line_start":202,"line_end":202,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224706,"byte_end":224709,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ [1]: fn.maximum_matching.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":224710,"byte_end":224743,"line_start":204,"line_end":204,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1683},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229404,"byte_end":229420,"line_start":368,"line_end":368,"column_start":8,"column_end":24},"name":"maximum_matching","qualname":"::algo::matching::maximum_matching","value":"fn maximum_matching<G>(G) -> Matching<G> where G: Visitable + NodeIndexable +\nIntoNodeIdentifiers + IntoEdges","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the [*maximum\n matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using\n [Gabow's algorithm][1].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the [*maximum","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228071,"byte_end":228108,"line_start":325,"line_end":325,"column_start":1,"column_end":38}},{"value":"/ matching*](https://en.wikipedia.org/wiki/Matching_(graph_theory)) using","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228109,"byte_end":228184,"line_start":326,"line_end":326,"column_start":1,"column_end":76}},{"value":"/ [Gabow's algorithm][1].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228185,"byte_end":228212,"line_start":327,"line_end":327,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228213,"byte_end":228216,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [1]: https://dl.acm.org/doi/10.1145/321941.321942","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228217,"byte_end":228270,"line_start":329,"line_end":329,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228271,"byte_end":228274,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected. The algorithm runs in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228275,"byte_end":228345,"line_start":331,"line_end":331,"column_start":1,"column_end":71}},{"value":"/ *O(|V|³)*. An algorithm with a better time complexity might be used in the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228346,"byte_end":228425,"line_start":332,"line_end":332,"column_start":1,"column_end":79}},{"value":"/ future.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228426,"byte_end":228437,"line_start":333,"line_end":333,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228438,"byte_end":228441,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ **Panics** if `g.node_bound()` is `std::usize::MAX`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228442,"byte_end":228498,"line_start":335,"line_end":335,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228499,"byte_end":228502,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228503,"byte_end":228517,"line_start":337,"line_end":337,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228518,"byte_end":228521,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228522,"byte_end":228529,"line_start":339,"line_end":339,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228530,"byte_end":228559,"line_start":340,"line_end":340,"column_start":1,"column_end":30}},{"value":"/ use petgraph::algo::maximum_matching;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228560,"byte_end":228601,"line_start":341,"line_end":341,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228602,"byte_end":228605,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ // The example graph:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228606,"byte_end":228631,"line_start":343,"line_end":343,"column_start":1,"column_end":26}},{"value":"/ //","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228632,"byte_end":228638,"line_start":344,"line_end":344,"column_start":1,"column_end":7}},{"value":"/ //    +-- b ---- d ---- f","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228639,"byte_end":228668,"line_start":345,"line_end":345,"column_start":1,"column_end":30}},{"value":"/ //   /    |      |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228669,"byte_end":228691,"line_start":346,"line_end":346,"column_start":1,"column_end":23}},{"value":"/ //  a     |      |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228692,"byte_end":228714,"line_start":347,"line_end":347,"column_start":1,"column_end":23}},{"value":"/ //   \\    |      |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228715,"byte_end":228737,"line_start":348,"line_end":348,"column_start":1,"column_end":23}},{"value":"/ //    +-- c ---- e","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228738,"byte_end":228760,"line_start":349,"line_end":349,"column_start":1,"column_end":23}},{"value":"/ //","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228761,"byte_end":228767,"line_start":350,"line_end":350,"column_start":1,"column_end":7}},{"value":"/ // Maximum matching: { (a, b), (c, e), (d, f) }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228768,"byte_end":228819,"line_start":351,"line_end":351,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228820,"byte_end":228823,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ let mut graph: UnGraph<(), ()> = UnGraph::new_undirected();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228824,"byte_end":228887,"line_start":353,"line_end":353,"column_start":1,"column_end":64}},{"value":"/ let a = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228888,"byte_end":228919,"line_start":354,"line_end":354,"column_start":1,"column_end":32}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228920,"byte_end":228951,"line_start":355,"line_end":355,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228952,"byte_end":228983,"line_start":356,"line_end":356,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":228984,"byte_end":229015,"line_start":357,"line_end":357,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229016,"byte_end":229047,"line_start":358,"line_end":358,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229048,"byte_end":229079,"line_start":359,"line_end":359,"column_start":1,"column_end":32}},{"value":"/ graph.extend_with_edges(&[(a, b), (a, c), (b, c), (b, d), (c, e), (d, e), (d, f)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229080,"byte_end":229167,"line_start":360,"line_end":360,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229168,"byte_end":229171,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ let matching = maximum_matching(&graph);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229172,"byte_end":229216,"line_start":362,"line_end":362,"column_start":1,"column_end":45}},{"value":"/ assert!(matching.contains_edge(a, b));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229217,"byte_end":229259,"line_start":363,"line_end":363,"column_start":1,"column_end":43}},{"value":"/ assert!(matching.contains_edge(c, e));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229260,"byte_end":229302,"line_start":364,"line_end":364,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(matching.mate(d), Some(f));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229303,"byte_end":229345,"line_start":365,"line_end":365,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(matching.mate(f), Some(d));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229346,"byte_end":229388,"line_start":366,"line_end":366,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":229389,"byte_end":229396,"line_start":367,"line_end":367,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1693},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simple_paths","qualname":"::algo::simple_paths","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1719}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1719},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239965,"byte_end":239981,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"all_simple_paths","qualname":"::algo::simple_paths::all_simple_paths","value":"fn all_simple_paths<TargetColl,\nG>(G, G::NodeId, G::NodeId, usize, Option<usize>) -> /*impl Trait*/ where\nG: NodeCount, G: IntoNeighborsDirected, G::NodeId: Eq + Hash,\nTargetColl: FromIterator<G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that produces all simple paths from `from` node to `to`, which contains at least `min_intermediate_nodes` nodes\n and at most `max_intermediate_nodes`, if given, or limited by the graph's order otherwise. The simple path is a path without repetitions.","sig":null,"attributes":[{"value":"/ Returns an iterator that produces all simple paths from `from` node to `to`, which contains at least `min_intermediate_nodes` nodes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239011,"byte_end":239146,"line_start":13,"line_end":13,"column_start":1,"column_end":136}},{"value":"/ and at most `max_intermediate_nodes`, if given, or limited by the graph's order otherwise. The simple path is a path without repetitions.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239147,"byte_end":239288,"line_start":14,"line_end":14,"column_start":1,"column_end":142}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239289,"byte_end":239292,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This algorithm is adapted from <https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.simple_paths.all_simple_paths.html>.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239293,"byte_end":239464,"line_start":16,"line_end":16,"column_start":1,"column_end":172}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239465,"byte_end":239468,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239469,"byte_end":239482,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239483,"byte_end":239490,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use petgraph::{algo, prelude::*};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239491,"byte_end":239528,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239529,"byte_end":239532,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut graph = DiGraph::<&str, i32>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239533,"byte_end":239581,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239582,"byte_end":239585,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let a = graph.add_node(\"a\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239586,"byte_end":239618,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/ let b = graph.add_node(\"b\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239619,"byte_end":239651,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ let c = graph.add_node(\"c\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239652,"byte_end":239684,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ let d = graph.add_node(\"d\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239685,"byte_end":239717,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239718,"byte_end":239721,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[(a, b, 1), (b, c, 1), (c, d, 1), (a, b, 1), (b, d, 1)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239722,"byte_end":239808,"line_start":29,"line_end":29,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239809,"byte_end":239812,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let ways = algo::all_simple_paths::<Vec<_>, _>(&graph, a, d, 0, None)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239813,"byte_end":239886,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/   .collect::<Vec<_>>();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239887,"byte_end":239914,"line_start":32,"line_end":32,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239915,"byte_end":239918,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(4, ways.len());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239919,"byte_end":239949,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/simple_paths.rs","byte_start":239950,"byte_end":239957,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tred","qualname":"::algo::tred","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":1761}],"decl_id":null,"docs":" Compute the transitive reduction and closure of a directed acyclic graph","sig":null,"attributes":[{"value":"/ Compute the transitive reduction and closure of a directed acyclic graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":244830,"byte_end":244906,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":244907,"byte_end":244910,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## Transitive reduction and closure","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":244911,"byte_end":244950,"line_start":3,"line_end":3,"column_start":1,"column_end":40}},{"value":"/ The *transitive closure* of a graph **G = (V, E)** is the graph **Gc = (V, Ec)**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":244951,"byte_end":245035,"line_start":4,"line_end":4,"column_start":1,"column_end":85}},{"value":"/ such that **(i, j)** belongs to **Ec** if and only if there is a path connecting","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245036,"byte_end":245120,"line_start":5,"line_end":5,"column_start":1,"column_end":85}},{"value":"/ **i** to **j** in **G**. The *transitive reduction* of **G** is the graph **Gr","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245121,"byte_end":245203,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/ = (V, Er)** such that **Er** is minimal wrt. inclusion in **E** and the transitive","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245204,"byte_end":245290,"line_start":7,"line_end":7,"column_start":1,"column_end":87}},{"value":"/ closure of **Gr** is the same as that of **G**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245291,"byte_end":245342,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ The transitive reduction is well-defined for acyclic graphs only.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245343,"byte_end":245412,"line_start":9,"line_end":9,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1758},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247289,"byte_end":247321,"line_start":61,"line_end":61,"column_start":8,"column_end":40},"name":"dag_to_toposorted_adjacency_list","qualname":"::algo::tred::dag_to_toposorted_adjacency_list","value":"fn dag_to_toposorted_adjacency_list<G, Ix, '_>(G, &'_ [G::NodeId])\n-> (UnweightedList<Ix>, Vec<Ix>) where Ix: IndexType, G: GraphBase +\nIntoNeighborsDirected + NodeCompactIndexable + NodeCount, G::NodeId: IndexType","parent":null,"children":[],"decl_id":null,"docs":" Creates a representation of the same graph respecting topological order for use in `tred::dag_transitive_reduction_closure`.","sig":null,"attributes":[{"value":"/ Creates a representation of the same graph respecting topological order for use in `tred::dag_transitive_reduction_closure`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245645,"byte_end":245773,"line_start":19,"line_end":19,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245774,"byte_end":245777,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `toposort` must be a topological order on the node indices of `g` (for example obtained","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245778,"byte_end":245869,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ from [`toposort`]).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245870,"byte_end":245893,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245894,"byte_end":245897,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`toposort`]: ../fn.toposort.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245898,"byte_end":245935,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245936,"byte_end":245939,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Returns a pair of a graph `res` and the reciprocal of the topological sort `revmap`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":245940,"byte_end":246028,"line_start":26,"line_end":26,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246029,"byte_end":246032,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `res` is the same graph as `g` with the following differences:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246033,"byte_end":246099,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ * Node and edge weights are stripped,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246100,"byte_end":246141,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ * Node indices are replaced by the corresponding rank in `toposort`,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246142,"byte_end":246214,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ * Iterating on the neighbors of a node respects topological order.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246215,"byte_end":246285,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246286,"byte_end":246289,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `revmap` is handy to get back to map indices in `g` to indices in `res`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246290,"byte_end":246366,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246367,"byte_end":246374,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246375,"byte_end":246404,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/ use petgraph::graph::DefaultIx;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246405,"byte_end":246440,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/ use petgraph::visit::IntoNeighbors;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246441,"byte_end":246480,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ use petgraph::algo::tred::dag_to_toposorted_adjacency_list;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246481,"byte_end":246544,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246545,"byte_end":246548,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::<&str, (), Directed, DefaultIx>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246549,"byte_end":246611,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ let second = g.add_node(\"second child\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246612,"byte_end":246656,"line_start":41,"line_end":41,"column_start":1,"column_end":45}},{"value":"/ let top = g.add_node(\"top\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246657,"byte_end":246689,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/ let first = g.add_node(\"first child\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246690,"byte_end":246732,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/ g.extend_with_edges(&[(top, second), (top, first), (first, second)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246733,"byte_end":246806,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246807,"byte_end":246810,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let toposort = vec![top, first, second];","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246811,"byte_end":246855,"line_start":46,"line_end":46,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246856,"byte_end":246859,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ let (res, revmap) = dag_to_toposorted_adjacency_list(&g, &toposort);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246860,"byte_end":246932,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246933,"byte_end":246936,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // let's compute the children of top in topological order","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246937,"byte_end":246998,"line_start":50,"line_end":50,"column_start":1,"column_end":62}},{"value":"/ let children: Vec<NodeIndex> = res","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":246999,"byte_end":247037,"line_start":51,"line_end":51,"column_start":1,"column_end":39}},{"value":"/     .neighbors(revmap[top.index()])","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247038,"byte_end":247077,"line_start":52,"line_end":52,"column_start":1,"column_end":40}},{"value":"/     .map(|ix: NodeIndex| toposort[ix.index()])","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247078,"byte_end":247128,"line_start":53,"line_end":53,"column_start":1,"column_end":51}},{"value":"/     .collect();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247129,"byte_end":247148,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(children, vec![first, second])","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247149,"byte_end":247194,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247195,"byte_end":247202,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247203,"byte_end":247206,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Runtime: **O(|V| + |E|)**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247207,"byte_end":247237,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247238,"byte_end":247241,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Space complexity: **O(|V| + |E|)**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":247242,"byte_end":247281,"line_start":60,"line_end":60,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1761},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":249245,"byte_end":249277,"line_start":109,"line_end":109,"column_start":8,"column_end":40},"name":"dag_transitive_reduction_closure","qualname":"::algo::tred::dag_transitive_reduction_closure","value":"fn dag_transitive_reduction_closure<E, Ix, '_>(&'_ List<E, Ix>)\n-> (UnweightedList<Ix>, UnweightedList<Ix>) where Ix: IndexType","parent":null,"children":[],"decl_id":null,"docs":" Computes the transitive reduction and closure of a DAG.","sig":null,"attributes":[{"value":"/ Computes the transitive reduction and closure of a DAG.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248165,"byte_end":248224,"line_start":86,"line_end":86,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248225,"byte_end":248228,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ The algorithm implemented here comes from [On the calculation of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248229,"byte_end":248297,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/ transitive reduction-closure of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248298,"byte_end":248333,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ orders](https://www.sciencedirect.com/science/article/pii/0012365X9390164O) by Habib, Morvan","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248334,"byte_end":248430,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ and Rampon.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248431,"byte_end":248446,"line_start":91,"line_end":91,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248447,"byte_end":248450,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The input graph must be in a very specific format: an adjacency","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248451,"byte_end":248518,"line_start":93,"line_end":93,"column_start":1,"column_end":68}},{"value":"/ list such that:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248519,"byte_end":248538,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/ * Node indices are a toposort, and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248539,"byte_end":248577,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ * The neighbors of all nodes are stored in topological order.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248578,"byte_end":248643,"line_start":96,"line_end":96,"column_start":1,"column_end":66}},{"value":"/ To get such a representation, use the function [`dag_to_toposorted_adjacency_list`].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248644,"byte_end":248732,"line_start":97,"line_end":97,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248733,"byte_end":248736,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`dag_to_toposorted_adjacency_list`]: ./fn.dag_to_toposorted_adjacency_list.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248737,"byte_end":248821,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248822,"byte_end":248825,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ The output is the pair of the transitive reduction and the transitive closure.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248826,"byte_end":248908,"line_start":101,"line_end":101,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248909,"byte_end":248912,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Runtime complexity: **O(|V| + \\sum_{(x, y) \\in Er} d(y))** where **d(y)**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248913,"byte_end":248990,"line_start":103,"line_end":103,"column_start":1,"column_end":78}},{"value":"/ denotes the outgoing degree of **y** in the transitive closure of **G**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":248991,"byte_end":249067,"line_start":104,"line_end":104,"column_start":1,"column_end":77}},{"value":"/ This is still **O(|V|³)** in the worst case like the naive algorithm but","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":249068,"byte_end":249145,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"/ should perform better for some classes of graphs.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":249146,"byte_end":249199,"line_start":106,"line_end":106,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":249200,"byte_end":249203,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Space complexity: **O(|E|)**.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/tred.rs","byte_start":249204,"byte_end":249237,"line_start":108,"line_end":108,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1888},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111416,"byte_end":111436,"line_start":87,"line_end":87,"column_start":8,"column_end":28},"name":"connected_components","qualname":"::algo::connected_components","value":"fn connected_components<G>(G) -> usize where G: NodeCompactIndexable +\nIntoEdgeReferences","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return the number of connected components of the graph.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return the number of connected components of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110359,"byte_end":110430,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110431,"byte_end":110434,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ For a directed graph, this is the *weakly* connected components.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110435,"byte_end":110503,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110504,"byte_end":110517,"line_start":52,"line_end":52,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110518,"byte_end":110529,"line_start":53,"line_end":53,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110530,"byte_end":110554,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::connected_components;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110555,"byte_end":110600,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110601,"byte_end":110630,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110631,"byte_end":110634,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed>= Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110635,"byte_end":110691,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110692,"byte_end":110746,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110747,"byte_end":110778,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110779,"byte_end":110810,"line_start":61,"line_end":61,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110811,"byte_end":110842,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110843,"byte_end":110874,"line_start":63,"line_end":63,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110875,"byte_end":110906,"line_start":64,"line_end":64,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110907,"byte_end":110938,"line_start":65,"line_end":65,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110939,"byte_end":110970,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110971,"byte_end":110974,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":110975,"byte_end":111005,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111006,"byte_end":111021,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111022,"byte_end":111037,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111038,"byte_end":111053,"line_start":71,"line_end":71,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111054,"byte_end":111069,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111070,"byte_end":111085,"line_start":73,"line_end":73,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111086,"byte_end":111101,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111102,"byte_end":111117,"line_start":75,"line_end":75,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111118,"byte_end":111132,"line_start":76,"line_end":76,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111133,"byte_end":111140,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ // a ----> b       e ----> f","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111141,"byte_end":111173,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111174,"byte_end":111206,"line_start":79,"line_end":79,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111207,"byte_end":111239,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111240,"byte_end":111272,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111273,"byte_end":111276,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(connected_components(&graph),2);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111277,"byte_end":111324,"line_start":83,"line_end":83,"column_start":1,"column_end":48}},{"value":"/ graph.add_edge(b,e,());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111325,"byte_end":111352,"line_start":84,"line_end":84,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(connected_components(&graph),1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111353,"byte_end":111400,"line_start":85,"line_end":85,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111401,"byte_end":111408,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1890},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112020,"byte_end":112040,"line_start":107,"line_end":107,"column_start":8,"column_end":28},"name":"is_cyclic_undirected","qualname":"::algo::is_cyclic_undirected","value":"fn is_cyclic_undirected<G>(G) -> bool where G: NodeIndexable +\nIntoEdgeReferences","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the input graph contains a cycle.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the input graph contains a cycle.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111890,"byte_end":111956,"line_start":104,"line_end":104,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111957,"byte_end":111960,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ Always treats the input graph as if undirected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":111961,"byte_end":112012,"line_start":106,"line_end":106,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1892},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":113007,"byte_end":113015,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"toposort","qualname":"::algo::toposort","value":"fn toposort<G, '_>(G, Option<&'_ mut DfsSpace<G::NodeId, G::Map>>)\n-> Result<Vec<G::NodeId>, Cycle<G::NodeId>> where G: IntoNeighborsDirected +\nIntoNodeIdentifiers + Visitable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Perform a topological sort of a directed graph.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Perform a topological sort of a directed graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112484,"byte_end":112547,"line_start":124,"line_end":124,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112548,"byte_end":112551,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ If the graph was acyclic, return a vector of nodes in topological order:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112552,"byte_end":112628,"line_start":126,"line_end":126,"column_start":1,"column_end":77}},{"value":"/ each node is ordered before its successors.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112629,"byte_end":112676,"line_start":127,"line_end":127,"column_start":1,"column_end":48}},{"value":"/ Otherwise, it will return a `Cycle` error. Self loops are also cycles.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112677,"byte_end":112751,"line_start":128,"line_end":128,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112752,"byte_end":112755,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ To handle graphs with cycles, use the scc algorithms or `DfsPostOrder`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112756,"byte_end":112830,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ instead of this function.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112831,"byte_end":112860,"line_start":131,"line_end":131,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112861,"byte_end":112864,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ If `space` is not `None`, it is used instead of creating a new workspace for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112865,"byte_end":112945,"line_start":133,"line_end":133,"column_start":1,"column_end":81}},{"value":"/ graph traversal. The implementation is iterative.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":112946,"byte_end":112999,"line_start":134,"line_end":134,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1895},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":114935,"byte_end":114953,"line_start":196,"line_end":196,"column_start":8,"column_end":26},"name":"is_cyclic_directed","qualname":"::algo::is_cyclic_directed","value":"fn is_cyclic_directed<G>(G) -> bool where G: IntoNodeIdentifiers +\nIntoNeighbors + Visitable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Return `true` if the input directed graph contains a cycle.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Return `true` if the input directed graph contains a cycle.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":114762,"byte_end":114837,"line_start":192,"line_end":192,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":114838,"byte_end":114841,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This implementation is recursive; use `toposort` if an alternative is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":114842,"byte_end":114915,"line_start":194,"line_end":194,"column_start":1,"column_end":74}},{"value":"/ needed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":114916,"byte_end":114927,"line_start":195,"line_end":195,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4678},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115405,"byte_end":115413,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"DfsSpace","qualname":"::algo::DfsSpace","value":"DfsSpace {  }","parent":null,"children":[{"krate":0,"index":4681}],"decl_id":null,"docs":" Workspace for a graph traversal.\n","sig":null,"attributes":[{"value":"/ Workspace for a graph traversal.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115333,"byte_end":115369,"line_start":211,"line_end":211,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115540,"byte_end":115543,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"new","qualname":"<DfsSpace<N, VM>>::new","value":"fn new<G>(G) -> Self where G: GraphRef + Visitable<NodeId = N, Map = VM>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115767,"byte_end":115774,"line_start":234,"line_end":234,"column_start":8,"column_end":15},"name":"default","qualname":"<DfsSpace<N, VM> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1920},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116586,"byte_end":116605,"line_start":266,"line_end":266,"column_start":8,"column_end":27},"name":"has_path_connecting","qualname":"::algo::has_path_connecting","value":"fn has_path_connecting<G,\n'_>(G, G::NodeId, G::NodeId, Option<&'_ mut DfsSpace<G::NodeId, G::Map>>)\n-> bool where G: IntoNeighbors + Visitable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Check if there exists a path starting at `from` and reaching `to`.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Check if there exists a path starting at `from` and reaching `to`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116324,"byte_end":116406,"line_start":260,"line_end":260,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116407,"byte_end":116410,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ If `from` and `to` are equal, this function returns true.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116411,"byte_end":116472,"line_start":262,"line_end":262,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116473,"byte_end":116476,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ If `space` is not `None`, it is used instead of creating a new workspace for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116477,"byte_end":116557,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/ graph traversal.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116558,"byte_end":116578,"line_start":265,"line_end":265,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1924},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116978,"byte_end":116981,"line_start":284,"line_end":284,"column_start":8,"column_end":11},"name":"scc","qualname":"::algo::scc","value":"fn scc<G>(G) -> Vec<Vec<G::NodeId>> where G: IntoNeighborsDirected +\nVisitable + IntoNodeIdentifiers","parent":null,"children":[],"decl_id":null,"docs":" Renamed to `kosaraju_scc`.\n","sig":null,"attributes":[{"value":"/ Renamed to `kosaraju_scc`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116892,"byte_end":116922,"line_start":282,"line_end":282,"column_start":1,"column_end":31}},{"value":"deprecated(note = \"renamed to kosaraju_scc\")","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":116923,"byte_end":116970,"line_start":283,"line_end":283,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1926},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117648,"byte_end":117660,"line_start":302,"line_end":302,"column_start":8,"column_end":20},"name":"kosaraju_scc","qualname":"::algo::kosaraju_scc","value":"fn kosaraju_scc<G>(G) -> Vec<Vec<G::NodeId>> where G: IntoNeighborsDirected +\nVisitable + IntoNodeIdentifiers","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the *strongly connected components* using [Kosaraju's algorithm][1].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the *strongly connected components* using [Kosaraju's algorithm][1].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117109,"byte_end":117201,"line_start":291,"line_end":291,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117202,"byte_end":117205,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117206,"byte_end":117267,"line_start":293,"line_end":293,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117268,"byte_end":117271,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ Return a vector where each element is a strongly connected component (scc).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117272,"byte_end":117351,"line_start":295,"line_end":295,"column_start":1,"column_end":80}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117352,"byte_end":117424,"line_start":296,"line_end":296,"column_start":1,"column_end":73}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117425,"byte_end":117484,"line_start":297,"line_end":297,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117485,"byte_end":117488,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117489,"byte_end":117563,"line_start":299,"line_end":299,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117564,"byte_end":117567,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ This implementation is iterative and does two passes over the nodes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":117568,"byte_end":117640,"line_start":301,"line_end":301,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":4697},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119046,"byte_end":119055,"line_start":352,"line_end":352,"column_start":12,"column_end":21},"name":"TarjanScc","qualname":"::algo::TarjanScc","value":"TarjanScc {  }","parent":null,"children":[{"krate":0,"index":4699},{"krate":0,"index":4700},{"krate":0,"index":4701},{"krate":0,"index":4702}],"decl_id":null,"docs":" A reusable state for computing the *strongly connected components* using [Tarjan's algorithm][1].","sig":null,"attributes":[{"value":"/ A reusable state for computing the *strongly connected components* using [Tarjan's algorithm][1].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":118822,"byte_end":118923,"line_start":348,"line_end":348,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":118924,"byte_end":118927,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":118928,"byte_end":119017,"line_start":350,"line_end":350,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119196,"byte_end":119203,"line_start":360,"line_end":360,"column_start":8,"column_end":15},"name":"default","qualname":"<TarjanScc<N> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119313,"byte_end":119316,"line_start":367,"line_end":367,"column_start":12,"column_end":15},"name":"new","qualname":"<TarjanScc<N>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TarjanScc`\n","sig":null,"attributes":[{"value":"/ Creates a new `TarjanScc`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119272,"byte_end":119301,"line_start":366,"line_end":366,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120487,"byte_end":120490,"line_start":391,"line_end":391,"column_start":12,"column_end":15},"name":"run","qualname":"<TarjanScc<N>>::run","value":"fn run<G, F, '_>(&'_ mut Self, G, F) where G: IntoNodeIdentifiers<NodeId =\nN> + IntoNeighbors<NodeId = N> + NodeIndexable<NodeId = N>,\nF: for<'_> FnMut(&'_ [N]) -> (), N: Copy + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the *strongly connected components* using Algorithm 3 in\n [A Space-Efficient Algorithm for Finding Strongly Connected Components][1] by David J. Pierce,\n which is a memory-efficient variation of [Tarjan's algorithm][2].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the *strongly connected components* using Algorithm 3 in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119653,"byte_end":119733,"line_start":376,"line_end":376,"column_start":5,"column_end":85}},{"value":"/ [A Space-Efficient Algorithm for Finding Strongly Connected Components][1] by David J. Pierce,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119738,"byte_end":119836,"line_start":377,"line_end":377,"column_start":5,"column_end":103}},{"value":"/ which is a memory-efficient variation of [Tarjan's algorithm][2].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119841,"byte_end":119910,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119915,"byte_end":119918,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119923,"byte_end":119926,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ [1]: https://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119931,"byte_end":119990,"line_start":381,"line_end":381,"column_start":5,"column_end":64}},{"value":"/ [2]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119995,"byte_end":120084,"line_start":382,"line_end":382,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120089,"byte_end":120092,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Calls `f` for each strongly strongly connected component (scc).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120097,"byte_end":120164,"line_start":384,"line_end":384,"column_start":5,"column_end":72}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120169,"byte_end":120241,"line_start":385,"line_end":385,"column_start":5,"column_end":77}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120246,"byte_end":120305,"line_start":386,"line_end":386,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120310,"byte_end":120313,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120318,"byte_end":120392,"line_start":388,"line_end":388,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120397,"byte_end":120400,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This implementation is recursive and does one pass over the nodes.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":120405,"byte_end":120475,"line_start":390,"line_end":390,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":123433,"byte_end":123453,"line_start":472,"line_end":472,"column_start":12,"column_end":32},"name":"node_component_index","qualname":"<TarjanScc<N>>::node_component_index","value":"fn node_component_index<G, '_>(&'_ Self, G, N) -> usize where\nG: IntoNeighbors<NodeId = N> + NodeIndexable<NodeId = N>, N: Copy + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the component in which v has been assigned. Allows for using self as a lookup table for an scc decomposition produced by self.run().\n","sig":null,"attributes":[{"value":"/ Returns the index of the component in which v has been assigned. Allows for using self as a lookup table for an scc decomposition produced by self.run().","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":123264,"byte_end":123421,"line_start":471,"line_end":471,"column_start":5,"column_end":162}}]},{"kind":"Function","id":{"krate":0,"index":1945},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124897,"byte_end":124907,"line_start":507,"line_end":507,"column_start":8,"column_end":18},"name":"tarjan_scc","qualname":"::algo::tarjan_scc","value":"fn tarjan_scc<G>(G) -> Vec<Vec<G::NodeId>> where G: IntoNodeIdentifiers +\nIntoNeighbors + NodeIndexable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute the *strongly connected components* using [Tarjan's algorithm][1].","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute the *strongly connected components* using [Tarjan's algorithm][1].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124083,"byte_end":124173,"line_start":493,"line_end":493,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124174,"byte_end":124177,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124178,"byte_end":124267,"line_start":495,"line_end":495,"column_start":1,"column_end":90}},{"value":"/ [2]: https://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124268,"byte_end":124327,"line_start":496,"line_end":496,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124328,"byte_end":124331,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/ Return a vector where each element is a strongly connected component (scc).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124332,"byte_end":124411,"line_start":498,"line_end":498,"column_start":1,"column_end":80}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124412,"byte_end":124484,"line_start":499,"line_end":499,"column_start":1,"column_end":73}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124485,"byte_end":124544,"line_start":500,"line_end":500,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124545,"byte_end":124548,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124549,"byte_end":124623,"line_start":502,"line_end":502,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124624,"byte_end":124627,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ This implementation is recursive and does one pass over the nodes. It is based on","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124628,"byte_end":124713,"line_start":504,"line_end":504,"column_start":1,"column_end":86}},{"value":"/ [A Space-Efficient Algorithm for Finding Strongly Connected Components][2] by David J. Pierce,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124714,"byte_end":124812,"line_start":505,"line_end":505,"column_start":1,"column_end":99}},{"value":"/ to provide a memory-efficient implementation of [Tarjan's algorithm][1].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":124813,"byte_end":124889,"line_start":506,"line_end":506,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":1948},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127647,"byte_end":127659,"line_start":599,"line_end":599,"column_start":8,"column_end":20},"name":"condensation","qualname":"::algo::condensation","value":"fn condensation<N, E, Ty, Ix>(Graph<N, E, Ty, Ix>, bool)\n-> Graph<Vec<N>, E, Ty, Ix> where Ty: EdgeType, Ix: IndexType","parent":null,"children":[],"decl_id":null,"docs":" [Graph] Condense every strongly connected component into a single node and return the result.","sig":null,"attributes":[{"value":"/ [Graph] Condense every strongly connected component into a single node and return the result.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125168,"byte_end":125265,"line_start":519,"line_end":519,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125266,"byte_end":125269,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ If `make_acyclic` is true, self-loops and multi edges are ignored, guaranteeing that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125270,"byte_end":125358,"line_start":521,"line_end":521,"column_start":1,"column_end":89}},{"value":"/ the output is acyclic.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125359,"byte_end":125385,"line_start":522,"line_end":522,"column_start":1,"column_end":27}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125386,"byte_end":125399,"line_start":523,"line_end":523,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125400,"byte_end":125411,"line_start":524,"line_end":524,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125412,"byte_end":125436,"line_start":525,"line_end":525,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::condensation;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125437,"byte_end":125474,"line_start":526,"line_end":526,"column_start":1,"column_end":38}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125475,"byte_end":125504,"line_start":527,"line_end":527,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125505,"byte_end":125508,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/ let mut graph : Graph<(),(),Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125509,"byte_end":125566,"line_start":529,"line_end":529,"column_start":1,"column_end":58}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125567,"byte_end":125621,"line_start":530,"line_end":530,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125622,"byte_end":125653,"line_start":531,"line_end":531,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125654,"byte_end":125685,"line_start":532,"line_end":532,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125686,"byte_end":125717,"line_start":533,"line_end":533,"column_start":1,"column_end":32}},{"value":"/ let e = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125718,"byte_end":125749,"line_start":534,"line_end":534,"column_start":1,"column_end":32}},{"value":"/ let f = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125750,"byte_end":125781,"line_start":535,"line_end":535,"column_start":1,"column_end":32}},{"value":"/ let g = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125782,"byte_end":125813,"line_start":536,"line_end":536,"column_start":1,"column_end":32}},{"value":"/ let h = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125814,"byte_end":125845,"line_start":537,"line_end":537,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125846,"byte_end":125849,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125850,"byte_end":125880,"line_start":539,"line_end":539,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125881,"byte_end":125896,"line_start":540,"line_end":540,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125897,"byte_end":125912,"line_start":541,"line_end":541,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125913,"byte_end":125928,"line_start":542,"line_end":542,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125929,"byte_end":125944,"line_start":543,"line_end":543,"column_start":1,"column_end":16}},{"value":"/     (b, e),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125945,"byte_end":125960,"line_start":544,"line_end":544,"column_start":1,"column_end":16}},{"value":"/     (e, f),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125961,"byte_end":125976,"line_start":545,"line_end":545,"column_start":1,"column_end":16}},{"value":"/     (f, g),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125977,"byte_end":125992,"line_start":546,"line_end":546,"column_start":1,"column_end":16}},{"value":"/     (g, h),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":125993,"byte_end":126008,"line_start":547,"line_end":547,"column_start":1,"column_end":16}},{"value":"/     (h, e)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126009,"byte_end":126023,"line_start":548,"line_end":548,"column_start":1,"column_end":15}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126024,"byte_end":126031,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126032,"byte_end":126035,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ // a ----> b ----> e ----> f","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126036,"byte_end":126068,"line_start":551,"line_end":551,"column_start":1,"column_end":33}},{"value":"/ // ^       |       ^       |","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126069,"byte_end":126101,"line_start":552,"line_end":552,"column_start":1,"column_end":33}},{"value":"/ // |       v       |       v","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126102,"byte_end":126134,"line_start":553,"line_end":553,"column_start":1,"column_end":33}},{"value":"/ // d <---- c       h <---- g","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126135,"byte_end":126167,"line_start":554,"line_end":554,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126168,"byte_end":126171,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ let condensed_graph = condensation(graph,false);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126172,"byte_end":126224,"line_start":556,"line_end":556,"column_start":1,"column_end":53}},{"value":"/ let A = NodeIndex::new(0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126225,"byte_end":126255,"line_start":557,"line_end":557,"column_start":1,"column_end":31}},{"value":"/ let B = NodeIndex::new(1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126256,"byte_end":126286,"line_start":558,"line_end":558,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(condensed_graph.node_count(), 2);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126287,"byte_end":126335,"line_start":559,"line_end":559,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(condensed_graph.edge_count(), 9);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126336,"byte_end":126384,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(condensed_graph.neighbors(A).collect::<Vec<_>>(), vec![A, A, A, A]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126385,"byte_end":126468,"line_start":561,"line_end":561,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(condensed_graph.neighbors(B).collect::<Vec<_>>(), vec![A, B, B, B, B]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126469,"byte_end":126555,"line_start":562,"line_end":562,"column_start":1,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126556,"byte_end":126563,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ If `make_acyclic` is true, self-loops and multi edges are ignored:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126564,"byte_end":126634,"line_start":564,"line_end":564,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126635,"byte_end":126638,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126639,"byte_end":126650,"line_start":566,"line_end":566,"column_start":1,"column_end":12}},{"value":"/ # use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126651,"byte_end":126677,"line_start":567,"line_end":567,"column_start":1,"column_end":27}},{"value":"/ # use petgraph::algo::condensation;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126678,"byte_end":126717,"line_start":568,"line_end":568,"column_start":1,"column_end":40}},{"value":"/ # use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126718,"byte_end":126749,"line_start":569,"line_end":569,"column_start":1,"column_end":32}},{"value":"/ #","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126750,"byte_end":126755,"line_start":570,"line_end":570,"column_start":1,"column_end":6}},{"value":"/ # let mut graph : Graph<(),(),Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126756,"byte_end":126815,"line_start":571,"line_end":571,"column_start":1,"column_end":60}},{"value":"/ # let a = graph.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126816,"byte_end":126872,"line_start":572,"line_end":572,"column_start":1,"column_end":57}},{"value":"/ # let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126873,"byte_end":126906,"line_start":573,"line_end":573,"column_start":1,"column_end":34}},{"value":"/ # let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126907,"byte_end":126940,"line_start":574,"line_end":574,"column_start":1,"column_end":34}},{"value":"/ # let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126941,"byte_end":126974,"line_start":575,"line_end":575,"column_start":1,"column_end":34}},{"value":"/ # let e = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":126975,"byte_end":127008,"line_start":576,"line_end":576,"column_start":1,"column_end":34}},{"value":"/ # let f = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127009,"byte_end":127042,"line_start":577,"line_end":577,"column_start":1,"column_end":34}},{"value":"/ # let g = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127043,"byte_end":127076,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ # let h = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127077,"byte_end":127110,"line_start":579,"line_end":579,"column_start":1,"column_end":34}},{"value":"/ #","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127111,"byte_end":127116,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ # graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127117,"byte_end":127149,"line_start":581,"line_end":581,"column_start":1,"column_end":33}},{"value":"/ #    (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127150,"byte_end":127166,"line_start":582,"line_end":582,"column_start":1,"column_end":17}},{"value":"/ #    (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127167,"byte_end":127183,"line_start":583,"line_end":583,"column_start":1,"column_end":17}},{"value":"/ #    (c, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127184,"byte_end":127200,"line_start":584,"line_end":584,"column_start":1,"column_end":17}},{"value":"/ #    (d, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127201,"byte_end":127217,"line_start":585,"line_end":585,"column_start":1,"column_end":17}},{"value":"/ #    (b, e),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127218,"byte_end":127234,"line_start":586,"line_end":586,"column_start":1,"column_end":17}},{"value":"/ #    (e, f),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127235,"byte_end":127251,"line_start":587,"line_end":587,"column_start":1,"column_end":17}},{"value":"/ #    (f, g),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127252,"byte_end":127268,"line_start":588,"line_end":588,"column_start":1,"column_end":17}},{"value":"/ #    (g, h),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127269,"byte_end":127285,"line_start":589,"line_end":589,"column_start":1,"column_end":17}},{"value":"/ #    (h, e)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127286,"byte_end":127301,"line_start":590,"line_end":590,"column_start":1,"column_end":16}},{"value":"/ # ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127302,"byte_end":127311,"line_start":591,"line_end":591,"column_start":1,"column_end":10}},{"value":"/ let acyclic_condensed_graph = condensation(graph, true);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127312,"byte_end":127372,"line_start":592,"line_end":592,"column_start":1,"column_end":61}},{"value":"/ let A = NodeIndex::new(0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127373,"byte_end":127403,"line_start":593,"line_end":593,"column_start":1,"column_end":31}},{"value":"/ let B = NodeIndex::new(1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127404,"byte_end":127434,"line_start":594,"line_end":594,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(acyclic_condensed_graph.node_count(), 2);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127435,"byte_end":127491,"line_start":595,"line_end":595,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(acyclic_condensed_graph.edge_count(), 1);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127492,"byte_end":127548,"line_start":596,"line_end":596,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(acyclic_condensed_graph.neighbors(B).collect::<Vec<_>>(), vec![A]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127549,"byte_end":127631,"line_start":597,"line_end":597,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":127632,"byte_end":127639,"line_start":598,"line_end":598,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1953},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129414,"byte_end":129431,"line_start":650,"line_end":650,"column_start":8,"column_end":25},"name":"min_spanning_tree","qualname":"::algo::min_spanning_tree","value":"fn min_spanning_tree<G>(G) -> MinSpanningTree<G> where G::NodeWeight: Clone,\nG::EdgeWeight: Clone + PartialOrd, G: IntoNodeReferences +\nIntoEdgeReferences + NodeIndexable","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] Compute a *minimum spanning tree* of a graph.","sig":null,"attributes":[{"value":"/ \\[Generic\\] Compute a *minimum spanning tree* of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":128840,"byte_end":128901,"line_start":638,"line_end":638,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":128902,"byte_end":128905,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":128906,"byte_end":128954,"line_start":640,"line_end":640,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":128955,"byte_end":128958,"line_start":641,"line_end":641,"column_start":1,"column_end":4}},{"value":"/ Using Kruskal's algorithm with runtime **O(|E| log |E|)**. We actually","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":128959,"byte_end":129033,"line_start":642,"line_end":642,"column_start":1,"column_end":75}},{"value":"/ return a minimum spanning forest, i.e. a minimum spanning tree for each connected","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129034,"byte_end":129119,"line_start":643,"line_end":643,"column_start":1,"column_end":86}},{"value":"/ component of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129120,"byte_end":129147,"line_start":644,"line_end":644,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129148,"byte_end":129151,"line_start":645,"line_end":645,"column_start":1,"column_end":4}},{"value":"/ The resulting graph has all the vertices of the input graph (with identical node indices),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129152,"byte_end":129246,"line_start":646,"line_end":646,"column_start":1,"column_end":95}},{"value":"/ and **|V| - c** edges, where **c** is the number of connected components in `g`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129247,"byte_end":129331,"line_start":647,"line_end":647,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129332,"byte_end":129335,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"/ Use `from_elements` to create a graph from the resulting iterator.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":129336,"byte_end":129406,"line_start":649,"line_end":649,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":4706},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":130349,"byte_end":130364,"line_start":681,"line_end":681,"column_start":12,"column_end":27},"name":"MinSpanningTree","qualname":"::algo::MinSpanningTree","value":"MinSpanningTree {  }","parent":null,"children":[{"krate":0,"index":4708},{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4711},{"krate":0,"index":4712},{"krate":0,"index":4713}],"decl_id":null,"docs":" An iterator producing a minimum spanning forest of a graph.\n","sig":null,"attributes":[{"value":"/ An iterator producing a minimum spanning forest of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":130250,"byte_end":130313,"line_start":679,"line_end":679,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":130888,"byte_end":130892,"line_start":702,"line_end":702,"column_start":8,"column_end":12},"name":"next","qualname":"<MinSpanningTree<G> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4720},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132553,"byte_end":132558,"line_start":746,"line_end":746,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::algo::Cycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An algorithm error: a cycle was found in the graph.\n","sig":null,"attributes":[{"value":"/ An algorithm error: a cycle was found in the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132451,"byte_end":132506,"line_start":744,"line_end":744,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132653,"byte_end":132660,"line_start":750,"line_end":750,"column_start":12,"column_end":19},"name":"node_id","qualname":"<Cycle<N>>::node_id","value":"fn node_id<'_>(&'_ Self) -> N where N: Copy","parent":null,"children":[],"decl_id":null,"docs":" Return a node id that participates in the cycle\n","sig":null,"attributes":[{"value":"/ Return a node id that participates in the cycle","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132590,"byte_end":132641,"line_start":749,"line_end":749,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":4736},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132852,"byte_end":132865,"line_start":760,"line_end":760,"column_start":12,"column_end":25},"name":"NegativeCycle","qualname":"::algo::NegativeCycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An algorithm error: a cycle of negative weights was found in the graph.\n","sig":null,"attributes":[{"value":"/ An algorithm error: a cycle of negative weights was found in the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132730,"byte_end":132805,"line_start":758,"line_end":758,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":4738},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132866,"byte_end":132872,"line_start":760,"line_end":760,"column_start":26,"column_end":32},"name":"0","qualname":"::algo::NegativeCycle::0","value":"()","parent":{"krate":0,"index":4736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":133207,"byte_end":133230,"line_start":767,"line_end":767,"column_start":8,"column_end":31},"name":"is_bipartite_undirected","qualname":"::algo::is_bipartite_undirected","value":"fn is_bipartite_undirected<G, N, VM>(G, N) -> bool where G: GraphRef +\nVisitable<NodeId = N, Map = VM> + IntoNeighbors<NodeId = N>, N: Copy +\nPartialEq + std::fmt::Debug, VM: VisitMap<N>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the graph is bipartite. A graph is bipartite if its nodes can be divided into\n two disjoint and indepedent sets U and V such that every edge connects U to one in V. This\n algorithm implements 2-coloring algorithm based on the BFS algorithm.","sig":null,"attributes":[{"value":"/ Return `true` if the graph is bipartite. A graph is bipartite if its nodes can be divided into","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132876,"byte_end":132974,"line_start":762,"line_end":762,"column_start":1,"column_end":99}},{"value":"/ two disjoint and indepedent sets U and V such that every edge connects U to one in V. This","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132975,"byte_end":133069,"line_start":763,"line_end":763,"column_start":1,"column_end":95}},{"value":"/ algorithm implements 2-coloring algorithm based on the BFS algorithm.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":133070,"byte_end":133143,"line_start":764,"line_end":764,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":133144,"byte_end":133147,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ Always treats the input graph as if undirected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":133148,"byte_end":133199,"line_start":766,"line_end":766,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1972},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134754,"byte_end":134761,"line_start":821,"line_end":821,"column_start":11,"column_end":18},"name":"Measure","qualname":"::algo::Measure","value":"Measure: Debug + PartialOrd + Add<Self, Output = Self> + Default + Clone","parent":null,"children":[],"decl_id":null,"docs":" Associated data that can be used for measures (such as length).\n","sig":null,"attributes":[{"value":"/ Associated data that can be used for measures (such as length).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134676,"byte_end":134743,"line_start":820,"line_end":820,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134964,"byte_end":134976,"line_start":826,"line_end":826,"column_start":11,"column_end":23},"name":"FloatMeasure","qualname":"::algo::FloatMeasure","value":"FloatMeasure: Measure + Copy","parent":null,"children":[{"krate":0,"index":1976},{"krate":0,"index":1977}],"decl_id":null,"docs":" A floating-point measure.\n","sig":null,"attributes":[{"value":"/ A floating-point measure.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134924,"byte_end":134953,"line_start":825,"line_end":825,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135002,"byte_end":135006,"line_start":827,"line_end":827,"column_start":8,"column_end":12},"name":"zero","qualname":"::algo::FloatMeasure::zero","value":"fn zero() -> Self","parent":{"krate":0,"index":1975},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135025,"byte_end":135033,"line_start":828,"line_end":828,"column_start":8,"column_end":16},"name":"infinite","qualname":"::algo::FloatMeasure::infinite","value":"fn infinite() -> Self","parent":{"krate":0,"index":1975},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135083,"byte_end":135087,"line_start":832,"line_end":832,"column_start":8,"column_end":12},"name":"zero","qualname":"<f32 as algo::FloatMeasure>::zero","value":"fn zero() -> Self","parent":{"krate":0,"index":1975},"children":[],"decl_id":{"krate":0,"index":1976},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135124,"byte_end":135132,"line_start":835,"line_end":835,"column_start":8,"column_end":16},"name":"infinite","qualname":"<f32 as algo::FloatMeasure>::infinite","value":"fn infinite() -> Self","parent":{"krate":0,"index":1975},"children":[],"decl_id":{"krate":0,"index":1977},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135205,"byte_end":135209,"line_start":841,"line_end":841,"column_start":8,"column_end":12},"name":"zero","qualname":"<f64 as algo::FloatMeasure>::zero","value":"fn zero() -> Self","parent":{"krate":0,"index":1975},"children":[],"decl_id":{"krate":0,"index":1976},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135246,"byte_end":135254,"line_start":844,"line_end":844,"column_start":8,"column_end":16},"name":"infinite","qualname":"<f64 as algo::FloatMeasure>::infinite","value":"fn infinite() -> Self","parent":{"krate":0,"index":1975},"children":[],"decl_id":{"krate":0,"index":1977},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135302,"byte_end":135316,"line_start":849,"line_end":849,"column_start":11,"column_end":25},"name":"BoundedMeasure","qualname":"::algo::BoundedMeasure","value":"BoundedMeasure: Measure + std::ops::Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135372,"byte_end":135375,"line_start":850,"line_end":850,"column_start":8,"column_end":11},"name":"min","qualname":"::algo::BoundedMeasure::min","value":"fn min() -> Self","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135394,"byte_end":135397,"line_start":851,"line_end":851,"column_start":8,"column_end":11},"name":"max","qualname":"::algo::BoundedMeasure::max","value":"fn max() -> Self","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135416,"byte_end":135431,"line_start":852,"line_end":852,"column_start":8,"column_end":23},"name":"overflowing_add","qualname":"::algo::BoundedMeasure::overflowing_add","value":"fn overflowing_add(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1990},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"csr","qualname":"::csr","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1995},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2012},{"krate":0,"index":2015},{"krate":0,"index":2018},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2025},{"krate":0,"index":2028},{"krate":0,"index":2031},{"krate":0,"index":2034},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2052},{"krate":0,"index":2055},{"krate":0,"index":2058},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2067},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":2084},{"krate":0,"index":2087},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":4803},{"krate":0,"index":4814},{"krate":0,"index":2091},{"krate":0,"index":2097},{"krate":0,"index":2103},{"krate":0,"index":4820},{"krate":0,"index":4822},{"krate":0,"index":4824},{"krate":0,"index":2111},{"krate":0,"index":2119},{"krate":0,"index":4826},{"krate":0,"index":4835},{"krate":0,"index":4841},{"krate":0,"index":4847},{"krate":0,"index":4857},{"krate":0,"index":2140},{"krate":0,"index":2146},{"krate":0,"index":2151},{"krate":0,"index":2157},{"krate":0,"index":2169},{"krate":0,"index":2178},{"krate":0,"index":2185},{"krate":0,"index":4863},{"krate":0,"index":4875},{"krate":0,"index":4881},{"krate":0,"index":2194},{"krate":0,"index":2201},{"krate":0,"index":2209},{"krate":0,"index":2216},{"krate":0,"index":2219},{"krate":0,"index":2227},{"krate":0,"index":4887},{"krate":0,"index":4891},{"krate":0,"index":4895},{"krate":0,"index":2230},{"krate":0,"index":2236},{"krate":0,"index":2244},{"krate":0,"index":2252},{"krate":0,"index":2257},{"krate":0,"index":2264},{"krate":0,"index":4899},{"krate":0,"index":4903},{"krate":0,"index":4906},{"krate":0,"index":2270},{"krate":0,"index":2275},{"krate":0,"index":2283},{"krate":0,"index":2289},{"krate":0,"index":2295},{"krate":0,"index":2301},{"krate":0,"index":4909},{"krate":0,"index":4915},{"krate":0,"index":4920},{"krate":0,"index":2310},{"krate":0,"index":2318},{"krate":0,"index":2324},{"krate":0,"index":2328}],"decl_id":null,"docs":" Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.\n","sig":null,"attributes":[{"value":"/ Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251098,"byte_end":251165,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":2087},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251768,"byte_end":251777,"line_start":23,"line_end":23,"column_start":10,"column_end":19},"name":"NodeIndex","qualname":"::csr::NodeIndex","value":"Ix","parent":null,"children":[],"decl_id":null,"docs":" Csr node index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Csr node index type, a plain integer.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251717,"byte_end":251758,"line_start":22,"line_end":22,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2089},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251851,"byte_end":251860,"line_start":25,"line_end":25,"column_start":10,"column_end":19},"name":"EdgeIndex","qualname":"::csr::EdgeIndex","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Csr edge index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Csr edge index type, a plain integer.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251800,"byte_end":251841,"line_start":24,"line_end":24,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4803},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252598,"byte_end":252601,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"Csr","qualname":"::csr::Csr","value":"Csr {  }","parent":null,"children":[{"krate":0,"index":4808},{"krate":0,"index":4809},{"krate":0,"index":4810},{"krate":0,"index":4811},{"krate":0,"index":4812},{"krate":0,"index":4813}],"decl_id":null,"docs":" Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.","sig":null,"attributes":[{"value":"/ Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251912,"byte_end":251983,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251984,"byte_end":251987,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ `CSR` is parameterized over:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":251988,"byte_end":252020,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252021,"byte_end":252024,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - Associated data `N` for nodes and `E` for edges, called *weights*.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252025,"byte_end":252097,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   The associated data can be of arbitrary type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252098,"byte_end":252149,"line_start":34,"line_end":34,"column_start":1,"column_end":52}},{"value":"/ - Edge type `Ty` that determines whether the graph edges are directed or undirected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252150,"byte_end":252238,"line_start":35,"line_end":35,"column_start":1,"column_end":89}},{"value":"/ - Index type `Ix`, which determines the maximum size of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252239,"byte_end":252309,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252310,"byte_end":252313,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252314,"byte_end":252317,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Using **O(|E| + |V|)** space.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252318,"byte_end":252351,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252352,"byte_end":252355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Self loops are allowed, no parallel edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252356,"byte_end":252402,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252403,"byte_end":252406,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Fast iteration of the outgoing edges of a vertex.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252407,"byte_end":252460,"line_start":43,"line_end":43,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252461,"byte_end":252464,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`CSR`]: https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_(CSR,_CRS_or_Yale_format)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":252465,"byte_end":252569,"line_start":45,"line_end":45,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253091,"byte_end":253098,"line_start":65,"line_end":65,"column_start":8,"column_end":15},"name":"default","qualname":"<Csr<N, E, Ty, Ix> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253217,"byte_end":253222,"line_start":71,"line_end":71,"column_start":8,"column_end":13},"name":"clone","qualname":"<Csr<N, E, Ty, Ix> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2108},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253631,"byte_end":253634,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<Csr<N, E, Ty, Ix>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `Csr`.\n","sig":null,"attributes":[{"value":"/ Create an empty `Csr`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253593,"byte_end":253619,"line_start":88,"line_end":88,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254394,"byte_end":254404,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"with_nodes","qualname":"<Csr<N, E, Ty, Ix>>::with_nodes","value":"fn with_nodes(usize) -> Self where N: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Csr` with `n` nodes. `N` must implement [`Default`] for the weight of each node.","sig":null,"attributes":[{"value":"/ Create a new `Csr` with `n` nodes. `N` must implement [`Default`] for the weight of each node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253856,"byte_end":253954,"line_start":100,"line_end":100,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253959,"byte_end":253962,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [`Default`]: https://doc.rust-lang.org/nightly/core/default/trait.Default.html","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253967,"byte_end":254049,"line_start":102,"line_end":102,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254054,"byte_end":254057,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254062,"byte_end":254075,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254080,"byte_end":254091,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/ use petgraph::csr::Csr;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254096,"byte_end":254123,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254128,"byte_end":254157,"line_start":107,"line_end":107,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254162,"byte_end":254165,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let graph = Csr::<u8,()>::with_nodes(5);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254170,"byte_end":254214,"line_start":109,"line_end":109,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(graph.node_count(),5);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254219,"byte_end":254256,"line_start":110,"line_end":110,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(graph.edge_count(),0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254261,"byte_end":254298,"line_start":111,"line_end":111,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254303,"byte_end":254306,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(graph[0],0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254311,"byte_end":254338,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(graph[4],0);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254343,"byte_end":254370,"line_start":114,"line_end":114,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254375,"byte_end":254382,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4820},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254801,"byte_end":254815,"line_start":133,"line_end":133,"column_start":12,"column_end":26},"name":"EdgesNotSorted","qualname":"::csr::EdgesNotSorted","value":"EdgesNotSorted {  }","parent":null,"children":[{"krate":0,"index":4821}],"decl_id":null,"docs":" Csr creation error: edges were not in sorted order.\n","sig":null,"attributes":[{"value":"/ Csr creation error: edges were not in sorted order.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254710,"byte_end":254765,"line_start":131,"line_end":131,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255549,"byte_end":255566,"line_start":159,"line_end":159,"column_start":12,"column_end":29},"name":"from_sorted_edges","qualname":"<Csr<N, E, Directed, Ix>>::from_sorted_edges","value":"fn from_sorted_edges<Edge, '_>(&'_ [Edge]) -> Result<Self, EdgesNotSorted>\nwhere Edge: Clone + IntoWeightedEdge<E, NodeId = NodeIndex<Ix>>, N: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Csr` from a sorted sequence of edges","sig":null,"attributes":[{"value":"/ Create a new `Csr` from a sorted sequence of edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254924,"byte_end":254978,"line_start":141,"line_end":141,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254983,"byte_end":254986,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Edges **must** be sorted and unique, where the sort order is the default","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254991,"byte_end":255067,"line_start":143,"line_end":143,"column_start":5,"column_end":81}},{"value":"/ order for the pair *(u, v)* in Rust (*u* has priority).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255072,"byte_end":255131,"line_start":144,"line_end":144,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255136,"byte_end":255139,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(|E| + |V|)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255144,"byte_end":255182,"line_start":146,"line_end":146,"column_start":5,"column_end":43}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255187,"byte_end":255200,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255205,"byte_end":255216,"line_start":148,"line_end":148,"column_start":5,"column_end":16}},{"value":"/ use petgraph::csr::Csr;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255221,"byte_end":255248,"line_start":149,"line_end":149,"column_start":5,"column_end":32}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255253,"byte_end":255282,"line_start":150,"line_end":150,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255287,"byte_end":255290,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let graph = Csr::<(),()>::from_sorted_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255295,"byte_end":255345,"line_start":152,"line_end":152,"column_start":5,"column_end":55}},{"value":"/                     (0, 1), (0, 2),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255350,"byte_end":255389,"line_start":153,"line_end":153,"column_start":5,"column_end":44}},{"value":"/                     (1, 0), (1, 2), (1, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255394,"byte_end":255441,"line_start":154,"line_end":154,"column_start":5,"column_end":52}},{"value":"/                     (2, 0),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255446,"byte_end":255477,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/                     (3, 1),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255482,"byte_end":255513,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255518,"byte_end":255525,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":255530,"byte_end":255537,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258557,"byte_end":258567,"line_start":239,"line_end":239,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Csr<N, E, Ty, Ix>>::node_count","value":"fn node_count<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258631,"byte_end":258641,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Csr<N, E, Ty, Ix>>::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258795,"byte_end":258806,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"is_directed","qualname":"<Csr<N, E, Ty, Ix>>::is_directed","value":"fn is_directed<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258893,"byte_end":258904,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Csr<N, E, Ty, Ix>>::clear_edges","value":"fn clear_edges<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges\n","sig":null,"attributes":[{"value":"/ Remove all edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258861,"byte_end":258881,"line_start":255,"line_end":255,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259219,"byte_end":259227,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Csr<N, E, Ty, Ix>>::add_node","value":"fn add_node<'_>(&'_ mut Self, N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node with the given weight, returning the corresponding node index.\n","sig":null,"attributes":[{"value":"/ Adds a new node with the given weight, returning the corresponding node index.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259125,"byte_end":259207,"line_start":267,"line_end":267,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259667,"byte_end":259675,"line_start":281,"line_end":281,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Csr<N, E, Ty, Ix>>::add_edge","value":"fn add_edge<'_>(&'_ mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E) -> bool where\nE: Clone","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the edge was added","sig":null,"attributes":[{"value":"/ Return `true` if the edge was added","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259427,"byte_end":259466,"line_start":275,"line_end":275,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259471,"byte_end":259474,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ If you add all edges in row-major order, the time complexity","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259479,"byte_end":259543,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/ is **O(|V|·|E|)** for the whole operation.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259548,"byte_end":259595,"line_start":278,"line_end":278,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259600,"byte_end":259603,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `a` or `b` are out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":259608,"byte_end":259655,"line_start":280,"line_end":280,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":261564,"byte_end":261577,"line_start":337,"line_end":337,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Csr<N, E, Ty, Ix>>::contains_edge","value":"fn contains_edge<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(log |V|)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(log |V|)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":261457,"byte_end":261493,"line_start":334,"line_end":334,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":261498,"byte_end":261501,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":261506,"byte_end":261552,"line_start":336,"line_end":336,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262210,"byte_end":262220,"line_start":359,"line_end":359,"column_start":12,"column_end":22},"name":"out_degree","qualname":"<Csr<N, E, Ty, Ix>>::out_degree","value":"fn out_degree<'_>(&'_ Self, NodeIndex<Ix>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262109,"byte_end":262139,"line_start":356,"line_end":356,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262144,"byte_end":262147,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262152,"byte_end":262198,"line_start":358,"line_end":358,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262434,"byte_end":262449,"line_start":367,"line_end":367,"column_start":12,"column_end":27},"name":"neighbors_slice","qualname":"<Csr<N, E, Ty, Ix>>::neighbors_slice","value":"fn neighbors_slice<'_>(&'_ Self, NodeIndex<Ix>) -> &'_ [NodeIndex<Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262333,"byte_end":262363,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262368,"byte_end":262371,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262376,"byte_end":262422,"line_start":366,"line_end":366,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262640,"byte_end":262651,"line_start":374,"line_end":374,"column_start":12,"column_end":23},"name":"edges_slice","qualname":"<Csr<N, E, Ty, Ix>>::edges_slice","value":"fn edges_slice<'_>(&'_ Self, NodeIndex<Ix>) -> &'_ [E]","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262539,"byte_end":262569,"line_start":371,"line_end":371,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262574,"byte_end":262577,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262582,"byte_end":262628,"line_start":373,"line_end":373,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2139},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263029,"byte_end":263034,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"edges","qualname":"<Csr<N, E, Ty, Ix>>::edges","value":"fn edges<'_>(&'_ Self, NodeIndex<Ix>) -> Edges","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262743,"byte_end":262786,"line_start":378,"line_end":378,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262791,"byte_end":262794,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262799,"byte_end":262841,"line_start":380,"line_end":380,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262846,"byte_end":262893,"line_start":381,"line_end":381,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262898,"byte_end":262901,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262906,"byte_end":262956,"line_start":383,"line_end":383,"column_start":5,"column_end":55}},{"value":"/ Iterator element type is `EdgeReference<E, Ty, Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":262961,"byte_end":263017,"line_start":384,"line_end":384,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":4826},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263333,"byte_end":263338,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"Edges","qualname":"::csr::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":4831},{"krate":0,"index":4832},{"krate":0,"index":4833},{"krate":0,"index":4834}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4847},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263551,"byte_end":263564,"line_start":405,"line_end":405,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::csr::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":4852},{"krate":0,"index":4853},{"krate":0,"index":4854},{"krate":0,"index":4855},{"krate":0,"index":4856}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263799,"byte_end":263804,"line_start":414,"line_end":414,"column_start":8,"column_end":13},"name":"clone","qualname":"<EdgeReference as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264163,"byte_end":264169,"line_start":429,"line_end":429,"column_start":12,"column_end":18},"name":"weight","qualname":"<EdgeReference>::weight","value":"fn weight<'_>(&'_ Self) -> &'a E","parent":null,"children":[],"decl_id":null,"docs":" Access the edge’s weight.","sig":null,"attributes":[{"value":"/ Access the edge’s weight.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263992,"byte_end":264023,"line_start":425,"line_end":425,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264028,"byte_end":264031,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ **NOTE** that this method offers a longer lifetime","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264036,"byte_end":264090,"line_start":427,"line_end":427,"column_start":5,"column_end":59}},{"value":"/ than the trait (unfortunately they don't match yet).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264095,"byte_end":264151,"line_start":428,"line_end":428,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264414,"byte_end":264420,"line_start":443,"line_end":443,"column_start":8,"column_end":14},"name":"source","qualname":"<EdgeReference as visit::EdgeRef>::source","value":"fn source<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":257},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264479,"byte_end":264485,"line_start":446,"line_end":446,"column_start":8,"column_end":14},"name":"target","qualname":"<EdgeReference as visit::EdgeRef>::target","value":"fn target<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":258},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2167},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264544,"byte_end":264550,"line_start":449,"line_end":449,"column_start":8,"column_end":14},"name":"weight","qualname":"<EdgeReference as visit::EdgeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ E","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264599,"byte_end":264601,"line_start":452,"line_end":452,"column_start":8,"column_end":10},"name":"id","qualname":"<EdgeReference as visit::EdgeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::EdgeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":260},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264807,"byte_end":264811,"line_start":463,"line_end":463,"column_start":8,"column_end":12},"name":"next","qualname":"<Edges as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2177},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":265171,"byte_end":265180,"line_start":476,"line_end":476,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Edges as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":265625,"byte_end":265640,"line_start":497,"line_end":497,"column_start":8,"column_end":23},"name":"edge_references","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::IntoEdgeReferences>::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":{"krate":0,"index":3753},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4863},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":265994,"byte_end":266008,"line_start":511,"line_end":511,"column_start":12,"column_end":26},"name":"EdgeReferences","qualname":"::csr::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":4868},{"krate":0,"index":4869},{"krate":0,"index":4870},{"krate":0,"index":4871},{"krate":0,"index":4872},{"krate":0,"index":4873},{"krate":0,"index":4874}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":266438,"byte_end":266442,"line_start":527,"line_end":527,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeReferences as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267344,"byte_end":267349,"line_start":558,"line_end":558,"column_start":8,"column_end":13},"name":"edges","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::IntoEdges>::edges","value":"fn edges(Self, Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":{"krate":0,"index":3695},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267771,"byte_end":267780,"line_start":580,"line_end":580,"column_start":8,"column_end":17},"name":"visit_map","qualname":"<Csr<N, E, Ty, Ix> as visit::Visitable>::visit_map","value":"fn visit_map<'_>(&'_ Self) -> FixedBitSet","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3805},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267872,"byte_end":267881,"line_start":583,"line_end":583,"column_start":8,"column_end":17},"name":"reset_map","qualname":"<Csr<N, E, Ty, Ix> as visit::Visitable>::reset_map","value":"fn reset_map<'_, '_>(&'_ Self, &'_ mut Self::Map)","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3806},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4887},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268050,"byte_end":268059,"line_start":592,"line_end":592,"column_start":12,"column_end":21},"name":"Neighbors","qualname":"::csr::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":4890}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268239,"byte_end":268243,"line_start":602,"line_end":602,"column_start":8,"column_end":12},"name":"next","qualname":"<Neighbors as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268327,"byte_end":268336,"line_start":606,"line_end":606,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Neighbors as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2243},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268872,"byte_end":268881,"line_start":625,"line_end":625,"column_start":8,"column_end":17},"name":"neighbors","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::IntoNeighbors>::neighbors","value":"fn neighbors(Self, Self::NodeId) -> Self::Neighbors","parent":{"krate":0,"index":3680},"children":[],"decl_id":{"krate":0,"index":3682},"docs":" Return an iterator of all neighbors of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors of `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268564,"byte_end":268611,"line_start":618,"line_end":618,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268616,"byte_end":268619,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Targets of outgoing edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268624,"byte_end":268677,"line_start":620,"line_end":620,"column_start":5,"column_end":58}},{"value":"/ - `Undirected`: Opposing endpoints of all edges connected to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268682,"byte_end":268751,"line_start":621,"line_end":621,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268756,"byte_end":268759,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268764,"byte_end":268814,"line_start":623,"line_end":623,"column_start":5,"column_end":55}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268819,"byte_end":268864,"line_start":624,"line_end":624,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2249},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269122,"byte_end":269132,"line_start":637,"line_end":637,"column_start":8,"column_end":18},"name":"node_bound","qualname":"<Csr<N, E, Ty, Ix> as visit::NodeIndexable>::node_bound","value":"fn node_bound<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3770},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269190,"byte_end":269198,"line_start":640,"line_end":640,"column_start":8,"column_end":16},"name":"to_index","qualname":"<Csr<N, E, Ty, Ix> as visit::NodeIndexable>::to_index","value":"fn to_index<'_>(&'_ Self, Self::NodeId) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3771},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2251},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269265,"byte_end":269275,"line_start":643,"line_end":643,"column_start":8,"column_end":18},"name":"from_index","qualname":"<Csr<N, E, Ty, Ix> as visit::NodeIndexable>::from_index","value":"fn from_index<'_>(&'_ Self, usize) -> Self::NodeId","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3772},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269587,"byte_end":269592,"line_start":662,"line_end":662,"column_start":8,"column_end":13},"name":"index","qualname":"<Csr<N, E, Ty, Ix> as std::ops::Index>::index","value":"fn index<'_>(&'_ Self, NodeIndex<Ix>) -> &'_ N","parent":{"krate":2,"index":3571},"children":[],"decl_id":{"krate":2,"index":3574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269792,"byte_end":269801,"line_start":672,"line_end":672,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<Csr<N, E, Ty, Ix> as std::ops::IndexMut>::index_mut","value":"fn index_mut<'_>(&'_ mut Self, NodeIndex<Ix>) -> &'_ mut N","parent":{"krate":2,"index":3575},"children":[],"decl_id":{"krate":2,"index":3577},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4899},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269931,"byte_end":269946,"line_start":678,"line_end":678,"column_start":12,"column_end":27},"name":"NodeIdentifiers","qualname":"::csr::NodeIdentifiers","value":"NodeIdentifiers {  }","parent":null,"children":[{"krate":0,"index":4901},{"krate":0,"index":4902}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270122,"byte_end":270126,"line_start":689,"line_end":689,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeIdentifiers<Ix> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270211,"byte_end":270220,"line_start":693,"line_end":693,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeIdentifiers<Ix> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270461,"byte_end":270477,"line_start":704,"line_end":704,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::IntoNodeIdentifiers>::node_identifiers","value":"fn node_identifiers(Self) -> Self::NodeIdentifiers","parent":{"krate":0,"index":3711},"children":[],"decl_id":{"krate":0,"index":3713},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270725,"byte_end":270735,"line_start":717,"line_end":717,"column_start":8,"column_end":18},"name":"node_count","qualname":"<Csr<N, E, Ty, Ix> as visit::NodeCount>::node_count","value":"fn node_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3791},"children":[],"decl_id":{"krate":0,"index":3792},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270909,"byte_end":270919,"line_start":728,"line_end":728,"column_start":8,"column_end":18},"name":"edge_count","qualname":"<Csr<N, E, Ty, Ix> as visit::EdgeCount>::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3825},"children":[],"decl_id":{"krate":0,"index":3826},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270892,"byte_end":270901,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2309},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271312,"byte_end":271327,"line_start":748,"line_end":748,"column_start":8,"column_end":23},"name":"node_references","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::IntoNodeReferences>::node_references","value":"fn node_references(Self) -> Self::NodeReferences","parent":{"krate":0,"index":3739},"children":[],"decl_id":{"krate":0,"index":3742},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4909},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271564,"byte_end":271578,"line_start":758,"line_end":758,"column_start":12,"column_end":26},"name":"NodeReferences","qualname":"::csr::NodeReferences","value":"NodeReferences {  }","parent":null,"children":[{"krate":0,"index":4913},{"krate":0,"index":4914}],"decl_id":null,"docs":" Iterator over all nodes of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all nodes of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271489,"byte_end":271528,"line_start":756,"line_end":756,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271816,"byte_end":271820,"line_start":769,"line_end":769,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeReferences as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2317},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271935,"byte_end":271944,"line_start":773,"line_end":773,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeReferences as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":272119,"byte_end":272128,"line_start":782,"line_end":782,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NodeReferences as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2335},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":272607,"byte_end":272623,"line_start":800,"line_end":800,"column_start":8,"column_end":24},"name":"adjacency_matrix","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::GetAdjacencyMatrix>::adjacency_matrix","value":"fn adjacency_matrix<'_>(&'_ Self) -> FixedBitSet","parent":{"krate":0,"index":3814},"children":[],"decl_id":{"krate":0,"index":3816},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2336},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":273024,"byte_end":273035,"line_start":813,"line_end":813,"column_start":8,"column_end":19},"name":"is_adjacent","qualname":"<&'a Csr<N, E, Ty, Ix> as visit::GetAdjacencyMatrix>::is_adjacent","value":"fn is_adjacent<'_,\n'_>(&'_ Self, &'_ FixedBitSet, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":{"krate":0,"index":3814},"children":[],"decl_id":{"krate":0,"index":3817},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2337},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dot","qualname":"::dot","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2352},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":2361},{"krate":0,"index":2364},{"krate":0,"index":2367},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":4925},{"krate":0,"index":4939},{"krate":0,"index":4941},{"krate":0,"index":4942},{"krate":0,"index":4945},{"krate":0,"index":4946},{"krate":0,"index":2387},{"krate":0,"index":4950},{"krate":0,"index":4956},{"krate":0,"index":4948},{"krate":0,"index":2388},{"krate":0,"index":2394},{"krate":0,"index":2398},{"krate":0,"index":2402},{"krate":0,"index":2406},{"krate":0,"index":2410},{"krate":0,"index":2414},{"krate":0,"index":2417},{"krate":0,"index":2424}],"decl_id":null,"docs":" Simple graphviz dot file format output.\n","sig":null,"attributes":[{"value":"/ Simple graphviz dot file format output.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":281706,"byte_end":281749,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2367},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282922,"byte_end":282925,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"Dot","qualname":"::dot::Dot","value":"Dot {  }","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2373}],"decl_id":null,"docs":" `Dot` implements output to graphviz .dot format for a graph.","sig":null,"attributes":[{"value":"/ `Dot` implements output to graphviz .dot format for a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":281902,"byte_end":281966,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":281967,"byte_end":281970,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Formatting and options are rather simple, this is mostly intended","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":281971,"byte_end":282040,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ for debugging. Exact output may change.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282041,"byte_end":282084,"line_start":12,"line_end":12,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282085,"byte_end":282088,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282089,"byte_end":282103,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282104,"byte_end":282107,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282108,"byte_end":282115,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282116,"byte_end":282140,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use petgraph::dot::{Dot, Config};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282141,"byte_end":282178,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282179,"byte_end":282182,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_, ()>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282183,"byte_end":282225,"line_start":20,"line_end":20,"column_start":1,"column_end":43}},{"value":"/ graph.add_node(\"A\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282226,"byte_end":282250,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"B\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282251,"byte_end":282275,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"C\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282276,"byte_end":282300,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"D\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282301,"byte_end":282325,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282326,"byte_end":282356,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282357,"byte_end":282388,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/     (1, 2), (1, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282389,"byte_end":282412,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/     (2, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282413,"byte_end":282428,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282429,"byte_end":282436,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282437,"byte_end":282440,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ println!(\"{:?}\", Dot::with_config(&graph, &[Config::EdgeNoLabel]));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282441,"byte_end":282512,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282513,"byte_end":282516,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // In this case the output looks like this:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282517,"byte_end":282564,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"/ //","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282565,"byte_end":282571,"line_start":34,"line_end":34,"column_start":1,"column_end":7}},{"value":"/ // digraph {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282572,"byte_end":282588,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/ //     0 [label=\"\\\"A\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282589,"byte_end":282617,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ //     1 [label=\"\\\"B\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282618,"byte_end":282646,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ //     2 [label=\"\\\"C\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282647,"byte_end":282675,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ //     3 [label=\"\\\"D\\\"\"]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282676,"byte_end":282704,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ //     0 -> 1","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282705,"byte_end":282722,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ //     0 -> 2","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282723,"byte_end":282740,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ //     0 -> 3","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282741,"byte_end":282758,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/ //     1 -> 2","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282759,"byte_end":282776,"line_start":43,"line_end":43,"column_start":1,"column_end":18}},{"value":"/ //     1 -> 3","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282777,"byte_end":282794,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ //     2 -> 3","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282795,"byte_end":282812,"line_start":45,"line_end":45,"column_start":1,"column_end":18}},{"value":"/ // }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282813,"byte_end":282821,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282822,"byte_end":282825,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // If you need multiple config options, just list them all in the slice.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282826,"byte_end":282902,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":282903,"byte_end":282910,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283442,"byte_end":283445,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<Dot>::new","value":"fn new(G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dot` formatting wrapper with default configuration.\n","sig":null,"attributes":[{"value":"/ Create a `Dot` formatting wrapper with default configuration.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283351,"byte_end":283416,"line_start":68,"line_end":68,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283421,"byte_end":283430,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283605,"byte_end":283616,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Dot>::with_config","value":"fn with_config(G, &'a [Config]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dot` formatting wrapper with custom configuration.\n","sig":null,"attributes":[{"value":"/ Create a `Dot` formatting wrapper with custom configuration.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283515,"byte_end":283579,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283584,"byte_end":283593,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283784,"byte_end":283801,"line_start":81,"line_end":81,"column_start":12,"column_end":29},"name":"with_attr_getters","qualname":"<Dot>::with_attr_getters","value":"fn with_attr_getters(G, &'a [Config], &'a dyn Fn(G, G::EdgeRef) -> String,\n&'a dyn Fn(G, G::NodeRef) -> String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283763,"byte_end":283772,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4926},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284515,"byte_end":284529,"line_start":105,"line_end":105,"column_start":5,"column_end":19},"name":"NodeIndexLabel","qualname":"::dot::Config::NodeIndexLabel","value":"Config::NodeIndexLabel","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Use indices for node labels.\n","sig":null,"attributes":[{"value":"/ Use indices for node labels.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284478,"byte_end":284510,"line_start":104,"line_end":104,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4928},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284572,"byte_end":284586,"line_start":107,"line_end":107,"column_start":5,"column_end":19},"name":"EdgeIndexLabel","qualname":"::dot::Config::EdgeIndexLabel","value":"Config::EdgeIndexLabel","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Use indices for edge labels.\n","sig":null,"attributes":[{"value":"/ Use indices for edge labels.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284535,"byte_end":284567,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4930},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284620,"byte_end":284631,"line_start":109,"line_end":109,"column_start":5,"column_end":16},"name":"EdgeNoLabel","qualname":"::dot::Config::EdgeNoLabel","value":"Config::EdgeNoLabel","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Use no edge labels.\n","sig":null,"attributes":[{"value":"/ Use no edge labels.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284592,"byte_end":284615,"line_start":108,"line_end":108,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4932},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284665,"byte_end":284676,"line_start":111,"line_end":111,"column_start":5,"column_end":16},"name":"NodeNoLabel","qualname":"::dot::Config::NodeNoLabel","value":"Config::NodeNoLabel","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Use no node labels.\n","sig":null,"attributes":[{"value":"/ Use no node labels.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284637,"byte_end":284660,"line_start":110,"line_end":110,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4934},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284729,"byte_end":284745,"line_start":113,"line_end":113,"column_start":5,"column_end":21},"name":"GraphContentOnly","qualname":"::dot::Config::GraphContentOnly","value":"Config::GraphContentOnly","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Do not print the graph/digraph string.\n","sig":null,"attributes":[{"value":"/ Do not print the graph/digraph string.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284682,"byte_end":284724,"line_start":112,"line_end":112,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4936},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284770,"byte_end":284781,"line_start":115,"line_end":115,"column_start":5,"column_end":16},"name":"_Incomplete","qualname":"::dot::Config::_Incomplete","value":"Config::_Incomplete(())","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4938},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284782,"byte_end":284784,"line_start":115,"line_end":115,"column_start":17,"column_end":19},"name":"0","qualname":"::dot::Config::_Incomplete::0","value":"()","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4925},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284465,"byte_end":284471,"line_start":103,"line_end":103,"column_start":10,"column_end":16},"name":"Config","qualname":"::dot::Config","value":"enum Config {\n    NodeIndexLabel,\n    EdgeIndexLabel,\n    EdgeNoLabel,\n    NodeNoLabel,\n    GraphContentOnly,\n    _Incomplete(()),\n}","parent":null,"children":[{"krate":0,"index":4926},{"krate":0,"index":4928},{"krate":0,"index":4930},{"krate":0,"index":4932},{"krate":0,"index":4934},{"krate":0,"index":4936}],"decl_id":null,"docs":" `Dot` configuration.","sig":null,"attributes":[{"value":"/ `Dot` configuration.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284184,"byte_end":284208,"line_start":97,"line_end":97,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284209,"byte_end":284212,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This enum does not have an exhaustive definition (will be expanded)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":284213,"byte_end":284284,"line_start":99,"line_end":99,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":287666,"byte_end":287669,"line_start":210,"line_end":210,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Dot as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":287982,"byte_end":287985,"line_start":221,"line_end":221,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Dot as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2502},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292525,"byte_end":292534,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"DefaultIx","qualname":"::graph_impl::DefaultIx","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The default integer type for graph indices.\n `u32` is the default to reduce the size of the graph's data and improve\n performance in the common case.","sig":null,"attributes":[{"value":"/ The default integer type for graph indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292251,"byte_end":292298,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/ `u32` is the default to reduce the size of the graph's data and improve","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292299,"byte_end":292374,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ performance in the common case.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292375,"byte_end":292410,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292411,"byte_end":292414,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Used for node and edge indices in `Graph` and `StableGraph`, used","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292415,"byte_end":292484,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ for node indices in `Csr`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292485,"byte_end":292515,"line_start":27,"line_end":27,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":2503},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292730,"byte_end":292739,"line_start":34,"line_end":34,"column_start":18,"column_end":27},"name":"IndexType","qualname":"::graph_impl::IndexType","value":"IndexType: Copy + Default + Hash + Ord + fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506}],"decl_id":null,"docs":" Trait for the unsigned integer type used for node and edge indices.","sig":null,"attributes":[{"value":"/ Trait for the unsigned integer type used for node and edge indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292543,"byte_end":292614,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292615,"byte_end":292618,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Marked `unsafe` because: the trait must faithfully preserve","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292619,"byte_end":292682,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ and convert index values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292683,"byte_end":292712,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292801,"byte_end":292804,"line_start":35,"line_end":35,"column_start":8,"column_end":11},"name":"new","qualname":"::graph_impl::IndexType::new","value":"fn new(usize) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292831,"byte_end":292836,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"index","qualname":"::graph_impl::IndexType::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2503},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292861,"byte_end":292864,"line_start":37,"line_end":37,"column_start":8,"column_end":11},"name":"max","qualname":"::graph_impl::IndexType::max","value":"fn max() -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292942,"byte_end":292945,"line_start":42,"line_end":42,"column_start":8,"column_end":11},"name":"new","qualname":"<usize as graph_impl::IndexType>::new","value":"fn new(usize) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2504},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292917,"byte_end":292934,"line_start":41,"line_end":41,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293011,"byte_end":293016,"line_start":46,"line_end":46,"column_start":8,"column_end":13},"name":"index","qualname":"<usize as graph_impl::IndexType>::index","value":"fn index<'_>(&'_ Self) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2505},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292986,"byte_end":293003,"line_start":45,"line_end":45,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293083,"byte_end":293086,"line_start":50,"line_end":50,"column_start":8,"column_end":11},"name":"max","qualname":"<usize as graph_impl::IndexType>::max","value":"fn max() -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2506},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293058,"byte_end":293075,"line_start":49,"line_end":49,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293195,"byte_end":293198,"line_start":57,"line_end":57,"column_start":8,"column_end":11},"name":"new","qualname":"<u32 as graph_impl::IndexType>::new","value":"fn new(usize) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2504},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293170,"byte_end":293187,"line_start":56,"line_end":56,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293271,"byte_end":293276,"line_start":61,"line_end":61,"column_start":8,"column_end":13},"name":"index","qualname":"<u32 as graph_impl::IndexType>::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2505},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293246,"byte_end":293263,"line_start":60,"line_end":60,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293353,"byte_end":293356,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"max","qualname":"<u32 as graph_impl::IndexType>::max","value":"fn max() -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2506},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293328,"byte_end":293345,"line_start":64,"line_end":64,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293463,"byte_end":293466,"line_start":72,"line_end":72,"column_start":8,"column_end":11},"name":"new","qualname":"<u16 as graph_impl::IndexType>::new","value":"fn new(usize) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2504},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293438,"byte_end":293455,"line_start":71,"line_end":71,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293539,"byte_end":293544,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"index","qualname":"<u16 as graph_impl::IndexType>::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2505},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293514,"byte_end":293531,"line_start":75,"line_end":75,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293621,"byte_end":293624,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"max","qualname":"<u16 as graph_impl::IndexType>::max","value":"fn max() -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2506},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293596,"byte_end":293613,"line_start":79,"line_end":79,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293730,"byte_end":293733,"line_start":87,"line_end":87,"column_start":8,"column_end":11},"name":"new","qualname":"<u8 as graph_impl::IndexType>::new","value":"fn new(usize) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2504},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293705,"byte_end":293722,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293805,"byte_end":293810,"line_start":91,"line_end":91,"column_start":8,"column_end":13},"name":"index","qualname":"<u8 as graph_impl::IndexType>::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2505},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293780,"byte_end":293797,"line_start":90,"line_end":90,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293887,"byte_end":293890,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"max","qualname":"<u8 as graph_impl::IndexType>::max","value":"fn max() -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2506},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293862,"byte_end":293879,"line_start":94,"line_end":94,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":4958},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294037,"byte_end":294046,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"NodeIndex","qualname":"::graph_impl::NodeIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Node identifier.\n","sig":null,"attributes":[{"value":"/ Node identifier.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":293935,"byte_end":293955,"line_start":100,"line_end":100,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294130,"byte_end":294133,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<NodeIndex<Ix>>::new","value":"fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294109,"byte_end":294118,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294223,"byte_end":294228,"line_start":111,"line_end":111,"column_start":12,"column_end":17},"name":"index","qualname":"<NodeIndex<Ix>>::index","value":"fn index(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294202,"byte_end":294211,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294301,"byte_end":294304,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"end","qualname":"<NodeIndex<Ix>>::end","value":"fn end() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294280,"byte_end":294289,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294502,"byte_end":294507,"line_start":126,"line_end":126,"column_start":8,"column_end":13},"name":"index","qualname":"<NodeIndex<Ix> as graph_impl::IndexType>::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2505},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294562,"byte_end":294565,"line_start":129,"line_end":129,"column_start":8,"column_end":11},"name":"new","qualname":"<NodeIndex<Ix> as graph_impl::IndexType>::new","value":"fn new(usize) -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2504},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294625,"byte_end":294628,"line_start":132,"line_end":132,"column_start":8,"column_end":11},"name":"max","qualname":"<NodeIndex<Ix> as graph_impl::IndexType>::max","value":"fn max() -> Self","parent":{"krate":0,"index":2503},"children":[],"decl_id":{"krate":0,"index":2506},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294750,"byte_end":294754,"line_start":138,"line_end":138,"column_start":8,"column_end":12},"name":"from","qualname":"<NodeIndex<Ix> as std::convert::From>::from","value":"fn from(Ix) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294863,"byte_end":294866,"line_start":144,"line_end":144,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NodeIndex<Ix> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2540},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295014,"byte_end":295024,"line_start":150,"line_end":150,"column_start":8,"column_end":18},"name":"node_index","qualname":"::graph_impl::node_index","value":"fn node_index<Ix>(usize) -> NodeIndex<Ix> where Ix: IndexType","parent":null,"children":[],"decl_id":null,"docs":" Short version of `NodeIndex::new`\n","sig":null,"attributes":[{"value":"/ Short version of `NodeIndex::new`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294969,"byte_end":295006,"line_start":149,"line_end":149,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2542},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295147,"byte_end":295157,"line_start":155,"line_end":155,"column_start":8,"column_end":18},"name":"edge_index","qualname":"::graph_impl::edge_index","value":"fn edge_index<Ix>(usize) -> EdgeIndex<Ix> where Ix: IndexType","parent":null,"children":[],"decl_id":null,"docs":" Short version of `EdgeIndex::new`\n","sig":null,"attributes":[{"value":"/ Short version of `EdgeIndex::new`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295102,"byte_end":295139,"line_start":154,"line_end":154,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4991},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295337,"byte_end":295346,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"EdgeIndex","qualname":"::graph_impl::EdgeIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Edge identifier.\n","sig":null,"attributes":[{"value":"/ Edge identifier.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295235,"byte_end":295255,"line_start":159,"line_end":159,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295430,"byte_end":295433,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<EdgeIndex<Ix>>::new","value":"fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295409,"byte_end":295418,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295523,"byte_end":295528,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"index","qualname":"<EdgeIndex<Ix>>::index","value":"fn index(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295502,"byte_end":295511,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295713,"byte_end":295716,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"end","qualname":"<EdgeIndex<Ix>>::end","value":"fn end() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An invalid `EdgeIndex` used to denote absence of an edge, for example\n to end an adjacency list.\n","sig":null,"attributes":[{"value":"/ An invalid `EdgeIndex` used to denote absence of an edge, for example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295580,"byte_end":295653,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ to end an adjacency list.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295658,"byte_end":295687,"line_start":175,"line_end":175,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295692,"byte_end":295701,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295906,"byte_end":295910,"line_start":187,"line_end":187,"column_start":8,"column_end":12},"name":"from","qualname":"<EdgeIndex<Ix> as std::convert::From>::from","value":"fn from(Ix) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296019,"byte_end":296022,"line_start":193,"line_end":193,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EdgeIndex<Ix> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5024},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296647,"byte_end":296651,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"Node","qualname":"::graph_impl::Node","value":"Node { weight }","parent":null,"children":[{"krate":0,"index":5027},{"krate":0,"index":5028}],"decl_id":null,"docs":" The graph's node type.\n","sig":null,"attributes":[{"value":"/ The graph's node type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296592,"byte_end":296618,"line_start":215,"line_end":215,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":5027},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296711,"byte_end":296717,"line_start":219,"line_end":219,"column_start":9,"column_end":15},"name":"weight","qualname":"::graph_impl::Node::weight","value":"N","parent":{"krate":0,"index":5024},"children":[],"decl_id":null,"docs":" Associated node data.\n","sig":null,"attributes":[{"value":"/ Associated node data.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296677,"byte_end":296702,"line_start":218,"line_end":218,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297057,"byte_end":297066,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Node<N, Ix>>::next_edge","value":"fn next_edge<'_>(&'_ Self, Direction) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the first edge in the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the first edge in the given direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296964,"byte_end":297045,"line_start":233,"line_end":233,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":5035},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297204,"byte_end":297208,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"Edge","qualname":"::graph_impl::Edge","value":"Edge { weight }","parent":null,"children":[{"krate":0,"index":5038},{"krate":0,"index":5039},{"krate":0,"index":5041}],"decl_id":null,"docs":" The graph's edge type.\n","sig":null,"attributes":[{"value":"/ The graph's edge type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297149,"byte_end":297175,"line_start":239,"line_end":239,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":5038},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297268,"byte_end":297274,"line_start":243,"line_end":243,"column_start":9,"column_end":15},"name":"weight","qualname":"::graph_impl::Edge::weight","value":"E","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Associated edge data.\n","sig":null,"attributes":[{"value":"/ Associated edge data.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297234,"byte_end":297259,"line_start":242,"line_end":242,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297683,"byte_end":297692,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Edge<E, Ix>>::next_edge","value":"fn next_edge<'_>(&'_ Self, Direction) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the next edge for the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the next edge for the given direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297590,"byte_end":297671,"line_start":259,"line_end":259,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297822,"byte_end":297828,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"source","qualname":"<Edge<E, Ix>>::source","value":"fn source<'_>(&'_ Self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return the source node index.\n","sig":null,"attributes":[{"value":"/ Return the source node index.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297777,"byte_end":297810,"line_start":264,"line_end":264,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297932,"byte_end":297938,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"target","qualname":"<Edge<E, Ix>>::target","value":"fn target<'_>(&'_ Self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return the target node index.\n","sig":null,"attributes":[{"value":"/ Return the target node index.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297887,"byte_end":297920,"line_start":269,"line_end":269,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2574},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300966,"byte_end":300971,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"name":"Graph","qualname":"::graph_impl::Graph","value":"Graph {  }","parent":null,"children":[{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2581}],"decl_id":null,"docs":" `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","sig":null,"attributes":[{"value":"/ `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297995,"byte_end":298085,"line_start":275,"line_end":275,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298086,"byte_end":298089,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ `Graph` is parameterized over:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298090,"byte_end":298124,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298125,"byte_end":298128,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ - Associated data `N` for nodes and `E` for edges, called *weights*.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298129,"byte_end":298201,"line_start":279,"line_end":279,"column_start":1,"column_end":73}},{"value":"/   The associated data can be of arbitrary type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298202,"byte_end":298253,"line_start":280,"line_end":280,"column_start":1,"column_end":52}},{"value":"/ - Edge type `Ty` that determines whether the graph edges are directed or undirected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298254,"byte_end":298342,"line_start":281,"line_end":281,"column_start":1,"column_end":89}},{"value":"/ - Index type `Ix`, which determines the maximum size of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298343,"byte_end":298413,"line_start":282,"line_end":282,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298414,"byte_end":298417,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ The `Graph` is a regular Rust collection and is `Send` and `Sync` (as long","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298418,"byte_end":298496,"line_start":284,"line_end":284,"column_start":1,"column_end":79}},{"value":"/ as associated data `N` and `E` are).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298497,"byte_end":298537,"line_start":285,"line_end":285,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298538,"byte_end":298541,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The graph uses **O(|V| + |E|)** space, and allows fast node and edge insert,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298542,"byte_end":298622,"line_start":287,"line_end":287,"column_start":1,"column_end":81}},{"value":"/ efficient graph search and graph algorithms.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298623,"byte_end":298671,"line_start":288,"line_end":288,"column_start":1,"column_end":49}},{"value":"/ It implements **O(e')** edge lookup and edge and node removals, where **e'**","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298672,"byte_end":298752,"line_start":289,"line_end":289,"column_start":1,"column_end":81}},{"value":"/ is some local measure of edge count.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298753,"byte_end":298793,"line_start":290,"line_end":290,"column_start":1,"column_end":41}},{"value":"/ Based on the graph datastructure used in rustc.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298794,"byte_end":298845,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298846,"byte_end":298849,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Here's an example of building a graph with directed edges, and below","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298850,"byte_end":298922,"line_start":293,"line_end":293,"column_start":1,"column_end":73}},{"value":"/ an illustration of how it could be rendered with graphviz (see","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298923,"byte_end":298989,"line_start":294,"line_end":294,"column_start":1,"column_end":67}},{"value":"/ [`Dot`](../dot/struct.Dot.html)):","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":298990,"byte_end":299027,"line_start":295,"line_end":295,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299028,"byte_end":299031,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299032,"byte_end":299039,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299040,"byte_end":299064,"line_start":298,"line_end":298,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299065,"byte_end":299068,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ let mut deps = Graph::<&str, &str>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299069,"byte_end":299115,"line_start":300,"line_end":300,"column_start":1,"column_end":47}},{"value":"/ let pg = deps.add_node(\"petgraph\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299116,"byte_end":299155,"line_start":301,"line_end":301,"column_start":1,"column_end":40}},{"value":"/ let fb = deps.add_node(\"fixedbitset\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299156,"byte_end":299198,"line_start":302,"line_end":302,"column_start":1,"column_end":43}},{"value":"/ let qc = deps.add_node(\"quickcheck\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299199,"byte_end":299240,"line_start":303,"line_end":303,"column_start":1,"column_end":42}},{"value":"/ let rand = deps.add_node(\"rand\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299241,"byte_end":299278,"line_start":304,"line_end":304,"column_start":1,"column_end":38}},{"value":"/ let libc = deps.add_node(\"libc\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299279,"byte_end":299316,"line_start":305,"line_end":305,"column_start":1,"column_end":38}},{"value":"/ deps.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299317,"byte_end":299346,"line_start":306,"line_end":306,"column_start":1,"column_end":30}},{"value":"/     (pg, fb), (pg, qc),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299347,"byte_end":299374,"line_start":307,"line_end":307,"column_start":1,"column_end":28}},{"value":"/     (qc, rand), (rand, libc), (qc, libc),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299375,"byte_end":299420,"line_start":308,"line_end":308,"column_start":1,"column_end":46}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299421,"byte_end":299428,"line_start":309,"line_end":309,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299429,"byte_end":299436,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299437,"byte_end":299440,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ![graph-example](https://bluss.github.io/ndarray/images/graph-example.svg)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299441,"byte_end":299519,"line_start":312,"line_end":312,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299520,"byte_end":299523,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ ### Graph Indices","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299524,"byte_end":299545,"line_start":314,"line_end":314,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299546,"byte_end":299549,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ The graph maintains indices for nodes and edges, and node and edge","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299550,"byte_end":299620,"line_start":316,"line_end":316,"column_start":1,"column_end":71}},{"value":"/ weights may be accessed mutably. Indices range in a compact interval, for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299621,"byte_end":299698,"line_start":317,"line_end":317,"column_start":1,"column_end":78}},{"value":"/ example for *n* nodes indices are 0 to *n* - 1 inclusive.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299699,"byte_end":299760,"line_start":318,"line_end":318,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299761,"byte_end":299764,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ `NodeIndex` and `EdgeIndex` are types that act as references to nodes and edges,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299765,"byte_end":299849,"line_start":320,"line_end":320,"column_start":1,"column_end":85}},{"value":"/ but these are only stable across certain operations:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299850,"byte_end":299906,"line_start":321,"line_end":321,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299907,"byte_end":299910,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ * **Removing nodes or edges may shift other indices.** Removing a node will","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299911,"byte_end":299990,"line_start":323,"line_end":323,"column_start":1,"column_end":80}},{"value":"/ force the last node to shift its index to take its place. Similarly,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":299991,"byte_end":300063,"line_start":324,"line_end":324,"column_start":1,"column_end":73}},{"value":"/ removing an edge shifts the index of the last edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300064,"byte_end":300119,"line_start":325,"line_end":325,"column_start":1,"column_end":56}},{"value":"/ * Adding nodes or edges keeps indices stable.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300120,"byte_end":300169,"line_start":326,"line_end":326,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300170,"byte_end":300173,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ The `Ix` parameter is `u32` by default. The goal is that you can ignore this parameter","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300174,"byte_end":300264,"line_start":328,"line_end":328,"column_start":1,"column_end":91}},{"value":"/ completely unless you need a very big graph -- then you can use `usize`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300265,"byte_end":300341,"line_start":329,"line_end":329,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300342,"byte_end":300345,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ * The fact that the node and edge indices in the graph each are numbered in compact","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300346,"byte_end":300433,"line_start":331,"line_end":331,"column_start":1,"column_end":88}},{"value":"/ intervals (from 0 to *n* - 1 for *n* nodes) simplifies some graph algorithms.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300434,"byte_end":300515,"line_start":332,"line_end":332,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300516,"byte_end":300519,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ * You can select graph index integer type after the size of the graph. A smaller","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300520,"byte_end":300604,"line_start":334,"line_end":334,"column_start":1,"column_end":85}},{"value":"/ size may have better performance.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300605,"byte_end":300642,"line_start":335,"line_end":335,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300643,"byte_end":300646,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ * Using indices allows mutation while traversing the graph, see `Dfs`,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300647,"byte_end":300721,"line_start":337,"line_end":337,"column_start":1,"column_end":75}},{"value":"/ and `.neighbors(a).detach()`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300722,"byte_end":300755,"line_start":338,"line_end":338,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300756,"byte_end":300759,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ * You can create several graphs using the equal node indices but with","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300760,"byte_end":300833,"line_start":340,"line_end":340,"column_start":1,"column_end":74}},{"value":"/ differing weights or differing edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300834,"byte_end":300875,"line_start":341,"line_end":341,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300876,"byte_end":300879,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ * Indices don't allow as much compile time checking as references.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300880,"byte_end":300950,"line_start":343,"line_end":343,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":300951,"byte_end":300954,"line_start":344,"line_end":344,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2582},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301232,"byte_end":301239,"line_start":355,"line_end":355,"column_start":10,"column_end":17},"name":"DiGraph","qualname":"::graph_impl::DiGraph","value":"Graph<N, E, Directed, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A `Graph` with directed edges.","sig":null,"attributes":[{"value":"/ A `Graph` with directed edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301097,"byte_end":301131,"line_start":351,"line_end":351,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301132,"byte_end":301135,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ For example, an edge from *1* to *2* is distinct from an edge from *2* to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301136,"byte_end":301213,"line_start":353,"line_end":353,"column_start":1,"column_end":78}},{"value":"/ *1*.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301214,"byte_end":301222,"line_start":354,"line_end":354,"column_start":1,"column_end":9}}]},{"kind":"Type","id":{"krate":0,"index":2586},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301437,"byte_end":301444,"line_start":361,"line_end":361,"column_start":10,"column_end":17},"name":"UnGraph","qualname":"::graph_impl::UnGraph","value":"Graph<N, E, Undirected, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A `Graph` with undirected edges.","sig":null,"attributes":[{"value":"/ A `Graph` with undirected edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301292,"byte_end":301328,"line_start":357,"line_end":357,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301329,"byte_end":301332,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ For example, an edge between *1* and *2* is equivalent to an edge between","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301333,"byte_end":301410,"line_start":359,"line_end":359,"column_start":1,"column_end":78}},{"value":"/ *2* and *1*.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301411,"byte_end":301427,"line_start":360,"line_end":360,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2595},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301671,"byte_end":301676,"line_start":369,"line_end":369,"column_start":8,"column_end":13},"name":"clone","qualname":"<Graph<N, E, Ty, Ix> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301837,"byte_end":301847,"line_start":377,"line_end":377,"column_start":8,"column_end":18},"name":"clone_from","qualname":"<Graph<N, E, Ty, Ix> as std::clone::Clone>::clone_from","value":"fn clone_from<'_, '_>(&'_ mut Self, &'_ Self)","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2884},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2602},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":302138,"byte_end":302141,"line_start":391,"line_end":391,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Graph<N, E, Ty, Ix> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304143,"byte_end":304146,"line_start":458,"line_end":458,"column_start":12,"column_end":15},"name":"new","qualname":"<Graph<N, E, Directed>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with directed edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` with directed edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":303912,"byte_end":303957,"line_start":454,"line_end":454,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":303962,"byte_end":303965,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method. Use `Graph::with_capacity` or `Graph::default` for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":303970,"byte_end":304054,"line_start":456,"line_end":456,"column_start":5,"column_end":89}},{"value":"/ a constructor that is generic in all the type parameters of `Graph`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304059,"byte_end":304131,"line_start":457,"line_end":457,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304559,"byte_end":304573,"line_start":472,"line_end":472,"column_start":12,"column_end":26},"name":"new_undirected","qualname":"<Graph<N, E, Undirected>>::new_undirected","value":"fn new_undirected() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with undirected edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` with undirected edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304326,"byte_end":304373,"line_start":468,"line_end":468,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304378,"byte_end":304381,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method. Use `Graph::with_capacity` or `Graph::default` for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304386,"byte_end":304470,"line_start":470,"line_end":470,"column_start":5,"column_end":89}},{"value":"/ a constructor that is generic in all the type parameters of `Graph`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304475,"byte_end":304547,"line_start":471,"line_end":471,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2637},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304861,"byte_end":304874,"line_start":487,"line_end":487,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Graph<N, E, Ty, Ix>>::with_capacity","value":"fn with_capacity(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with estimated capacity.\n","sig":null,"attributes":[{"value":"/ Create a new `Graph` with estimated capacity.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304800,"byte_end":304849,"line_start":486,"line_end":486,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305181,"byte_end":305191,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Graph<N, E, Ty, Ix>>::node_count","value":"fn node_count<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of nodes (vertices) in the graph.","sig":null,"attributes":[{"value":"/ Return the number of nodes (vertices) in the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305071,"byte_end":305126,"line_start":495,"line_end":495,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305131,"byte_end":305134,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305139,"byte_end":305169,"line_start":497,"line_end":497,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305345,"byte_end":305355,"line_start":505,"line_end":505,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Graph<N, E, Ty, Ix>>::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of edges in the graph.","sig":null,"attributes":[{"value":"/ Return the number of edges in the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305246,"byte_end":305290,"line_start":502,"line_end":502,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305295,"byte_end":305298,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305303,"byte_end":305333,"line_start":504,"line_end":504,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305484,"byte_end":305495,"line_start":511,"line_end":511,"column_start":12,"column_end":23},"name":"is_directed","qualname":"<Graph<N, E, Ty, Ix>>::is_directed","value":"fn is_directed<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the graph has directed edges or not.\n","sig":null,"attributes":[{"value":"/ Whether the graph has directed edges or not.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305410,"byte_end":305458,"line_start":509,"line_end":509,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305463,"byte_end":305472,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305851,"byte_end":305859,"line_start":523,"line_end":523,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Graph<N, E, Ty, Ix>>::add_node","value":"fn add_node<'_>(&'_ mut Self, N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add a node (also called vertex) with associated data `weight` to the graph.","sig":null,"attributes":[{"value":"/ Add a node (also called vertex) with associated data `weight` to the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305550,"byte_end":305629,"line_start":515,"line_end":515,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305634,"byte_end":305637,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305642,"byte_end":305672,"line_start":517,"line_end":517,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305677,"byte_end":305680,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305685,"byte_end":305722,"line_start":519,"line_end":519,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305727,"byte_end":305730,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305735,"byte_end":305810,"line_start":521,"line_end":521,"column_start":5,"column_end":80}},{"value":"/ type (N/A if usize).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":305815,"byte_end":305839,"line_start":522,"line_end":522,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306453,"byte_end":306464,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"node_weight","qualname":"<Graph<N, E, Ty, Ix>>::node_weight","value":"fn node_weight<'_>(&'_ Self, NodeIndex<Ix>) -> Option<&'_ N>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for node `a`.","sig":null,"attributes":[{"value":"/ Access the weight for node `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306277,"byte_end":306312,"line_start":535,"line_end":535,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306317,"byte_end":306320,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ If node `a` doesn't exist in the graph, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306325,"byte_end":306383,"line_start":537,"line_end":537,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&graph[a]`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306388,"byte_end":306441,"line_start":538,"line_end":538,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306759,"byte_end":306774,"line_start":547,"line_end":547,"column_start":12,"column_end":27},"name":"node_weight_mut","qualname":"<Graph<N, E, Ty, Ix>>::node_weight_mut","value":"fn node_weight_mut<'_>(&'_ mut Self, NodeIndex<Ix>) -> Option<&'_ mut N>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for node `a`, mutably.","sig":null,"attributes":[{"value":"/ Access the weight for node `a`, mutably.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306570,"byte_end":306614,"line_start":543,"line_end":543,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306619,"byte_end":306622,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ If node `a` doesn't exist in the graph, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306627,"byte_end":306685,"line_start":545,"line_end":545,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&mut graph[a]`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306690,"byte_end":306747,"line_start":546,"line_end":546,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307444,"byte_end":307452,"line_start":564,"line_end":564,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Graph<N, E, Ty, Ix>>::add_edge","value":"fn add_edge<'_>(&'_ mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E)\n-> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Add an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306896,"byte_end":306961,"line_start":551,"line_end":551,"column_start":5,"column_end":70}},{"value":"/ data `weight`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306966,"byte_end":306984,"line_start":552,"line_end":552,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306989,"byte_end":306992,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":306997,"byte_end":307034,"line_start":554,"line_end":554,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307039,"byte_end":307042,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307047,"byte_end":307077,"line_start":556,"line_end":556,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307082,"byte_end":307085,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the nodes don't exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307090,"byte_end":307141,"line_start":558,"line_end":558,"column_start":5,"column_end":56}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307146,"byte_end":307221,"line_start":559,"line_end":559,"column_start":5,"column_end":80}},{"value":"/ type (N/A if usize).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307226,"byte_end":307250,"line_start":560,"line_end":560,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307255,"byte_end":307258,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ **Note:** `Graph` allows adding parallel (“duplicate”) edges. If you want","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307263,"byte_end":307344,"line_start":562,"line_end":562,"column_start":5,"column_end":82}},{"value":"/ to avoid this, use [`.update_edge(a, b, weight)`](#method.update_edge) instead.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":307349,"byte_end":307432,"line_start":563,"line_end":563,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308793,"byte_end":308804,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"update_edge","qualname":"<Graph<N, E, Ty, Ix>>::update_edge","value":"fn update_edge<'_>(&'_ mut Self, NodeIndex<Ix>, NodeIndex<Ix>, E)\n-> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add or update an edge from `a` to `b`.\n If the edge already exists, its weight is updated.","sig":null,"attributes":[{"value":"/ Add or update an edge from `a` to `b`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308412,"byte_end":308454,"line_start":590,"line_end":590,"column_start":5,"column_end":47}},{"value":"/ If the edge already exists, its weight is updated.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308459,"byte_end":308513,"line_start":591,"line_end":591,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308518,"byte_end":308521,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ Return the index of the affected edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308526,"byte_end":308568,"line_start":593,"line_end":593,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308573,"byte_end":308576,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308581,"byte_end":308648,"line_start":595,"line_end":595,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308653,"byte_end":308719,"line_start":596,"line_end":596,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308724,"byte_end":308727,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the nodes doesn't exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":308732,"byte_end":308781,"line_start":598,"line_end":598,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309292,"byte_end":309303,"line_start":613,"line_end":613,"column_start":12,"column_end":23},"name":"edge_weight","qualname":"<Graph<N, E, Ty, Ix>>::edge_weight","value":"fn edge_weight<'_>(&'_ Self, EdgeIndex<Ix>) -> Option<&'_ E>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for edge `e`.","sig":null,"attributes":[{"value":"/ Access the weight for edge `e`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309116,"byte_end":309151,"line_start":609,"line_end":609,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309156,"byte_end":309159,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ If edge `e` doesn't exist in the graph, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309164,"byte_end":309222,"line_start":611,"line_end":611,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&graph[e]`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309227,"byte_end":309280,"line_start":612,"line_end":612,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309600,"byte_end":309615,"line_start":621,"line_end":621,"column_start":12,"column_end":27},"name":"edge_weight_mut","qualname":"<Graph<N, E, Ty, Ix>>::edge_weight_mut","value":"fn edge_weight_mut<'_>(&'_ mut Self, EdgeIndex<Ix>) -> Option<&'_ mut E>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for edge `e`, mutably.","sig":null,"attributes":[{"value":"/ Access the weight for edge `e`, mutably.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309411,"byte_end":309455,"line_start":617,"line_end":617,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309460,"byte_end":309463,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ If edge `e` doesn't exist in the graph, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309468,"byte_end":309526,"line_start":619,"line_end":619,"column_start":5,"column_end":63}},{"value":"/ Also available with indexing syntax: `&mut graph[e]`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309531,"byte_end":309588,"line_start":620,"line_end":620,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309869,"byte_end":309883,"line_start":628,"line_end":628,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<Graph<N, E, Ty, Ix>>::edge_endpoints","value":"fn edge_endpoints<'_>(&'_ Self, EdgeIndex<Ix>)\n-> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the source and target nodes for `e`.","sig":null,"attributes":[{"value":"/ Access the source and target nodes for `e`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309739,"byte_end":309786,"line_start":625,"line_end":625,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309791,"byte_end":309794,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ If edge `e` doesn't exist in the graph, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":309799,"byte_end":309857,"line_start":627,"line_end":627,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310731,"byte_end":310742,"line_start":646,"line_end":646,"column_start":12,"column_end":23},"name":"remove_node","qualname":"<Graph<N, E, Ty, Ix>>::remove_node","value":"fn remove_node<'_>(&'_ mut Self, NodeIndex<Ix>) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Remove `a` from the graph if it exists, and return its weight.\n If it doesn't exist in the graph, return `None`.","sig":null,"attributes":[{"value":"/ Remove `a` from the graph if it exists, and return its weight.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310061,"byte_end":310127,"line_start":634,"line_end":634,"column_start":5,"column_end":71}},{"value":"/ If it doesn't exist in the graph, return `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310132,"byte_end":310184,"line_start":635,"line_end":635,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310189,"byte_end":310192,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ Apart from `a`, this invalidates the last node index in the graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310197,"byte_end":310266,"line_start":637,"line_end":637,"column_start":5,"column_end":74}},{"value":"/ (that node will adopt the removed node index). Edge indices are","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310271,"byte_end":310338,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/ invalidated as they would be following the removal of each edge","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310343,"byte_end":310410,"line_start":639,"line_end":639,"column_start":5,"column_end":72}},{"value":"/ with an endpoint in `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310415,"byte_end":310443,"line_start":640,"line_end":640,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310448,"byte_end":310451,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of affected","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310456,"byte_end":310526,"line_start":642,"line_end":642,"column_start":5,"column_end":75}},{"value":"/ edges, including *n* calls to `.remove_edge()` where *n* is the number","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310531,"byte_end":310605,"line_start":643,"line_end":643,"column_start":5,"column_end":79}},{"value":"/ of edges with an endpoint in `a`, and including the edges with an","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310610,"byte_end":310679,"line_start":644,"line_end":644,"column_start":5,"column_end":74}},{"value":"/ endpoint in the displaced node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":310684,"byte_end":310719,"line_start":645,"line_end":645,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":314068,"byte_end":314079,"line_start":735,"line_end":735,"column_start":12,"column_end":23},"name":"remove_edge","qualname":"<Graph<N, E, Ty, Ix>>::remove_edge","value":"fn remove_edge<'_>(&'_ mut Self, EdgeIndex<Ix>) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":" Remove an edge and return its edge weight, or `None` if it didn't exist.","sig":null,"attributes":[{"value":"/ Remove an edge and return its edge weight, or `None` if it didn't exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313668,"byte_end":313744,"line_start":728,"line_end":728,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313749,"byte_end":313752,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Apart from `e`, this invalidates the last edge index in the graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313757,"byte_end":313826,"line_start":730,"line_end":730,"column_start":5,"column_end":74}},{"value":"/ (that edge will adopt the removed edge index).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313831,"byte_end":313881,"line_start":731,"line_end":731,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313886,"byte_end":313889,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the size of four particular edge lists, for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313894,"byte_end":313985,"line_start":733,"line_end":733,"column_start":5,"column_end":96}},{"value":"/ the vertices of `e` and the vertices of another affected edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":313990,"byte_end":314056,"line_start":734,"line_end":734,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2661},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315847,"byte_end":315856,"line_start":779,"line_end":779,"column_start":12,"column_end":21},"name":"neighbors","qualname":"<Graph<N, E, Ty, Ix>>::neighbors","value":"fn neighbors<'_>(&'_ Self, NodeIndex<Ix>) -> Neighbors","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all nodes with an edge starting from `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all nodes with an edge starting from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315362,"byte_end":315429,"line_start":767,"line_end":767,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315434,"byte_end":315437,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315442,"byte_end":315484,"line_start":769,"line_end":769,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges from or to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315489,"byte_end":315534,"line_start":770,"line_end":770,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315539,"byte_end":315542,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315547,"byte_end":315608,"line_start":772,"line_end":772,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315613,"byte_end":315658,"line_start":773,"line_end":773,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315663,"byte_end":315666,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors(a).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315671,"byte_end":315743,"line_start":775,"line_end":775,"column_start":5,"column_end":77}},{"value":"/ not borrow from the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315748,"byte_end":315778,"line_start":776,"line_end":776,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315783,"byte_end":315786,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315791,"byte_end":315835,"line_start":778,"line_end":778,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316885,"byte_end":316903,"line_start":802,"line_end":802,"column_start":12,"column_end":30},"name":"neighbors_directed","qualname":"<Graph<N, E, Ty, Ix>>::neighbors_directed","value":"fn neighbors_directed<'_>(&'_ Self, NodeIndex<Ix>, Direction) -> Neighbors","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all neighbors that have an edge between them and\n `a`, in the specified direction.\n If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors that have an edge between them and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":315960,"byte_end":316034,"line_start":783,"line_end":783,"column_start":5,"column_end":79}},{"value":"/ `a`, in the specified direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316039,"byte_end":316075,"line_start":784,"line_end":784,"column_start":5,"column_end":41}},{"value":"/ If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316080,"byte_end":316159,"line_start":785,"line_end":785,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316164,"byte_end":316167,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ - `Directed`, `Outgoing`: All edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316172,"byte_end":316221,"line_start":787,"line_end":787,"column_start":5,"column_end":54}},{"value":"/ - `Directed`, `Incoming`: All edges to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316226,"byte_end":316273,"line_start":788,"line_end":788,"column_start":5,"column_end":52}},{"value":"/ - `Undirected`: All edges from or to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316278,"byte_end":316323,"line_start":789,"line_end":789,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316328,"byte_end":316331,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316336,"byte_end":316397,"line_start":791,"line_end":791,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316402,"byte_end":316447,"line_start":792,"line_end":792,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316452,"byte_end":316455,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ For a `Directed` graph, neighbors are listed in reverse order of their","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316460,"byte_end":316534,"line_start":794,"line_end":794,"column_start":5,"column_end":79}},{"value":"/ addition to the graph, so the most recently added edge's neighbor is","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316539,"byte_end":316611,"line_start":795,"line_end":795,"column_start":5,"column_end":77}},{"value":"/ listed first. The order in an `Undirected` graph is arbitrary.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316616,"byte_end":316682,"line_start":796,"line_end":796,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316687,"byte_end":316690,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors_directed(a, dir).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316695,"byte_end":316781,"line_start":798,"line_end":798,"column_start":5,"column_end":91}},{"value":"/ not borrow from the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316786,"byte_end":316816,"line_start":799,"line_end":799,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316821,"byte_end":316824,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":316829,"byte_end":316873,"line_start":801,"line_end":801,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2663},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317813,"byte_end":317833,"line_start":826,"line_end":826,"column_start":12,"column_end":32},"name":"neighbors_undirected","qualname":"<Graph<N, E, Ty, Ix>>::neighbors_undirected","value":"fn neighbors_undirected<'_>(&'_ Self, NodeIndex<Ix>) -> Neighbors","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all neighbors that have an edge between them and\n `a`, in either direction.\n If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors that have an edge between them and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317216,"byte_end":317290,"line_start":812,"line_end":812,"column_start":5,"column_end":79}},{"value":"/ `a`, in either direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317295,"byte_end":317324,"line_start":813,"line_end":813,"column_start":5,"column_end":34}},{"value":"/ If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317329,"byte_end":317408,"line_start":814,"line_end":814,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317413,"byte_end":317416,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ - `Directed` and `Undirected`: All edges from or to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317421,"byte_end":317481,"line_start":816,"line_end":816,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317486,"byte_end":317489,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317494,"byte_end":317555,"line_start":818,"line_end":818,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317560,"byte_end":317605,"line_start":819,"line_end":819,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317610,"byte_end":317613,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors_undirected(a).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317618,"byte_end":317701,"line_start":821,"line_end":821,"column_start":5,"column_end":88}},{"value":"/ not borrow from the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317706,"byte_end":317736,"line_start":822,"line_end":822,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317741,"byte_end":317744,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317749,"byte_end":317793,"line_start":824,"line_end":824,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":317798,"byte_end":317801,"line_start":825,"line_end":825,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318438,"byte_end":318443,"line_start":844,"line_end":844,"column_start":12,"column_end":17},"name":"edges","qualname":"<Graph<N, E, Ty, Ix>>::edges","value":"fn edges<'_>(&'_ Self, NodeIndex<Ix>) -> Edges","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318145,"byte_end":318188,"line_start":837,"line_end":837,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318193,"byte_end":318196,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318201,"byte_end":318243,"line_start":839,"line_end":839,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318248,"byte_end":318295,"line_start":840,"line_end":840,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318300,"byte_end":318303,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318308,"byte_end":318369,"line_start":842,"line_end":842,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318374,"byte_end":318426,"line_start":843,"line_end":843,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2665},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319103,"byte_end":319117,"line_start":859,"line_end":859,"column_start":12,"column_end":26},"name":"edges_directed","qualname":"<Graph<N, E, Ty, Ix>>::edges_directed","value":"fn edges_directed<'_>(&'_ Self, NodeIndex<Ix>, Direction) -> Edges","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`, in the specified direction.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`, in the specified direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318543,"byte_end":318614,"line_start":848,"line_end":848,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318619,"byte_end":318622,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ - `Directed`, `Outgoing`: All edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318627,"byte_end":318676,"line_start":850,"line_end":850,"column_start":5,"column_end":54}},{"value":"/ - `Directed`, `Incoming`: All edges to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318681,"byte_end":318728,"line_start":851,"line_end":851,"column_start":5,"column_end":52}},{"value":"/ - `Undirected`, `Outgoing`: All edges connected to `a`, with `a` being the source of each","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318733,"byte_end":318826,"line_start":852,"line_end":852,"column_start":5,"column_end":98}},{"value":"/   edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318831,"byte_end":318842,"line_start":853,"line_end":853,"column_start":5,"column_end":16}},{"value":"/ - `Undirected`, `Incoming`: All edges connected to `a`, with `a` being the target of each","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318847,"byte_end":318940,"line_start":854,"line_end":854,"column_start":5,"column_end":98}},{"value":"/   edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318945,"byte_end":318956,"line_start":855,"line_end":855,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318961,"byte_end":318964,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node `a` doesn't exist.<br>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":318969,"byte_end":319034,"line_start":857,"line_end":857,"column_start":5,"column_end":70}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319039,"byte_end":319091,"line_start":858,"line_end":858,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319747,"byte_end":319763,"line_start":878,"line_end":878,"column_start":12,"column_end":28},"name":"edges_connecting","qualname":"<Graph<N, E, Ty, Ix>>::edges_connecting","value":"fn edges_connecting<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>)\n-> EdgesConnecting","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all the edges connecting `a` and `b`.","sig":null,"attributes":[{"value":"/ Return an iterator over all the edges connecting `a` and `b`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319498,"byte_end":319563,"line_start":872,"line_end":872,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319568,"byte_end":319571,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319576,"byte_end":319618,"line_start":874,"line_end":874,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319623,"byte_end":319670,"line_start":875,"line_end":875,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319675,"byte_end":319678,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":319683,"byte_end":319735,"line_start":877,"line_end":877,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320248,"byte_end":320261,"line_start":894,"line_end":894,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Graph<N, E, Ty, Ix>>::contains_edge","value":"fn contains_edge<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lookup if there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookup if there is an edge from `a` to `b`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320038,"byte_end":320085,"line_start":890,"line_end":890,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320090,"byte_end":320093,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320098,"byte_end":320165,"line_start":892,"line_end":892,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320170,"byte_end":320236,"line_start":893,"line_end":893,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320563,"byte_end":320572,"line_start":902,"line_end":902,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<Graph<N, E, Ty, Ix>>::find_edge","value":"fn find_edge<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>)\n-> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Lookup an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookup an edge from `a` to `b`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320365,"byte_end":320400,"line_start":898,"line_end":898,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320405,"byte_end":320408,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320413,"byte_end":320480,"line_start":900,"line_end":900,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":320485,"byte_end":320551,"line_start":901,"line_end":901,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321668,"byte_end":321688,"line_start":935,"line_end":935,"column_start":12,"column_end":32},"name":"find_edge_undirected","qualname":"<Graph<N, E, Ty, Ix>>::find_edge_undirected","value":"fn find_edge_undirected<'_>(&'_ Self, NodeIndex<Ix>, NodeIndex<Ix>)\n-> Option<(EdgeIndex<Ix>, Direction)>","parent":null,"children":[],"decl_id":null,"docs":" Lookup an edge between `a` and `b`, in either direction.","sig":null,"attributes":[{"value":"/ Lookup an edge between `a` and `b`, in either direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321325,"byte_end":321385,"line_start":928,"line_end":928,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321390,"byte_end":321393,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ If the graph is undirected, then this is equivalent to `.find_edge()`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321398,"byte_end":321472,"line_start":930,"line_end":930,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321477,"byte_end":321480,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ Return the edge index and its directionality, with `Outgoing` meaning","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321485,"byte_end":321558,"line_start":932,"line_end":932,"column_start":5,"column_end":78}},{"value":"/ from `a` to `b` and `Incoming` the reverse,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321563,"byte_end":321610,"line_start":933,"line_end":933,"column_start":5,"column_end":52}},{"value":"/ or `None` if the edge does not exist.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":321615,"byte_end":321656,"line_start":934,"line_end":934,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322990,"byte_end":322999,"line_start":975,"line_end":975,"column_start":12,"column_end":21},"name":"externals","qualname":"<Graph<N, E, Ty, Ix>>::externals","value":"fn externals<'_>(&'_ Self, Direction) -> Externals","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over either the nodes without edges to them\n (`Incoming`) or from them (`Outgoing`).","sig":null,"attributes":[{"value":"/ Return an iterator over either the nodes without edges to them","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322474,"byte_end":322540,"line_start":964,"line_end":964,"column_start":5,"column_end":71}},{"value":"/ (`Incoming`) or from them (`Outgoing`).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322545,"byte_end":322588,"line_start":965,"line_end":965,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322593,"byte_end":322596,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ An *internal* node has both incoming and outgoing edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322601,"byte_end":322661,"line_start":967,"line_end":967,"column_start":5,"column_end":65}},{"value":"/ The nodes in `.externals(Incoming)` are the source nodes and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322666,"byte_end":322730,"line_start":968,"line_end":968,"column_start":5,"column_end":69}},{"value":"/ `.externals(Outgoing)` are the sinks of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322735,"byte_end":322789,"line_start":969,"line_end":969,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322794,"byte_end":322797,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ For a graph with undirected edges, both the sinks and the sources are","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322802,"byte_end":322875,"line_start":971,"line_end":971,"column_start":5,"column_end":78}},{"value":"/ just the nodes without edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322880,"byte_end":322913,"line_start":972,"line_end":972,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322918,"byte_end":322921,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ The whole iteration computes in **O(|V|)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":322926,"byte_end":322978,"line_start":974,"line_end":974,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323651,"byte_end":323663,"line_start":995,"line_end":995,"column_start":12,"column_end":24},"name":"node_indices","qualname":"<Graph<N, E, Ty, Ix>>::node_indices","value":"fn node_indices<'_>(&'_ Self) -> NodeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the node indices of the graph.","sig":null,"attributes":[{"value":"/ Return an iterator over the node indices of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323185,"byte_end":323243,"line_start":983,"line_end":983,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323248,"byte_end":323251,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ For example, in a rare case where a graph algorithm were not applicable,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323256,"byte_end":323332,"line_start":985,"line_end":985,"column_start":5,"column_end":81}},{"value":"/ the following code will iterate through all nodes to find a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323337,"byte_end":323400,"line_start":986,"line_end":986,"column_start":5,"column_end":68}},{"value":"/ specific index:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323405,"byte_end":323424,"line_start":987,"line_end":987,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323429,"byte_end":323432,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323437,"byte_end":323444,"line_start":989,"line_end":989,"column_start":5,"column_end":12}},{"value":"/ # use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323449,"byte_end":323475,"line_start":990,"line_end":990,"column_start":5,"column_end":31}},{"value":"/ # let mut g = Graph::<&str, i32>::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323480,"byte_end":323524,"line_start":991,"line_end":991,"column_start":5,"column_end":49}},{"value":"/ # g.add_node(\"book\");","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323529,"byte_end":323554,"line_start":992,"line_end":992,"column_start":5,"column_end":30}},{"value":"/ let index = g.node_indices().find(|i| g[*i] == \"book\").unwrap();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323559,"byte_end":323627,"line_start":993,"line_end":993,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323632,"byte_end":323639,"line_start":994,"line_end":994,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2675},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323984,"byte_end":324000,"line_start":1006,"line_end":1006,"column_start":12,"column_end":28},"name":"node_weights_mut","qualname":"<Graph<N, E, Ty, Ix>>::node_weights_mut","value":"fn node_weights_mut<'_>(&'_ mut Self) -> NodeWeightsMut","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding mutable access to all node weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding mutable access to all node weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323801,"byte_end":323868,"line_start":1002,"line_end":1002,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323873,"byte_end":323876,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323881,"byte_end":323950,"line_start":1004,"line_end":1004,"column_start":5,"column_end":74}},{"value":"/ node indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":323955,"byte_end":323972,"line_start":1005,"line_end":1005,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324312,"byte_end":324324,"line_start":1016,"line_end":1016,"column_start":12,"column_end":24},"name":"node_weights","qualname":"<Graph<N, E, Ty, Ix>>::node_weights","value":"fn node_weights<'_>(&'_ Self) -> NodeWeights","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding immutable access to all node weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding immutable access to all node weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324127,"byte_end":324196,"line_start":1012,"line_end":1012,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324201,"byte_end":324204,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324209,"byte_end":324278,"line_start":1014,"line_end":1014,"column_start":5,"column_end":74}},{"value":"/ node indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324283,"byte_end":324300,"line_start":1015,"line_end":1015,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324506,"byte_end":324518,"line_start":1023,"line_end":1023,"column_start":12,"column_end":24},"name":"edge_indices","qualname":"<Graph<N, E, Ty, Ix>>::edge_indices","value":"fn edge_indices<'_>(&'_ Self) -> EdgeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the edge indices of the graph\n","sig":null,"attributes":[{"value":"/ Return an iterator over the edge indices of the graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324437,"byte_end":324494,"line_start":1022,"line_end":1022,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324789,"byte_end":324804,"line_start":1033,"line_end":1033,"column_start":12,"column_end":27},"name":"edge_references","qualname":"<Graph<N, E, Ty, Ix>>::edge_references","value":"fn edge_references<'_>(&'_ Self) -> EdgeReferences","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over all edges, in indexed order.","sig":null,"attributes":[{"value":"/ Create an iterator over all edges, in indexed order.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324656,"byte_end":324712,"line_start":1030,"line_end":1030,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324717,"byte_end":324720,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324725,"byte_end":324777,"line_start":1032,"line_end":1032,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325119,"byte_end":325131,"line_start":1043,"line_end":1043,"column_start":12,"column_end":24},"name":"edge_weights","qualname":"<Graph<N, E, Ty, Ix>>::edge_weights","value":"fn edge_weights<'_>(&'_ Self) -> EdgeWeights","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding immutable access to all edge weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding immutable access to all edge weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":324934,"byte_end":325003,"line_start":1039,"line_end":1039,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325008,"byte_end":325011,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325016,"byte_end":325085,"line_start":1041,"line_end":1041,"column_start":5,"column_end":74}},{"value":"/ edge indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325090,"byte_end":325107,"line_start":1042,"line_end":1042,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325426,"byte_end":325442,"line_start":1052,"line_end":1052,"column_start":12,"column_end":28},"name":"edge_weights_mut","qualname":"<Graph<N, E, Ty, Ix>>::edge_weights_mut","value":"fn edge_weights_mut<'_>(&'_ mut Self) -> EdgeWeightsMut","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding mutable access to all edge weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding mutable access to all edge weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325243,"byte_end":325310,"line_start":1048,"line_end":1048,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325315,"byte_end":325318,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325323,"byte_end":325392,"line_start":1050,"line_end":1050,"column_start":5,"column_end":74}},{"value":"/ edge indices.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325397,"byte_end":325414,"line_start":1051,"line_end":1051,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325735,"byte_end":325744,"line_start":1062,"line_end":1062,"column_start":12,"column_end":21},"name":"raw_nodes","qualname":"<Graph<N, E, Ty, Ix>>::raw_nodes","value":"fn raw_nodes<'_>(&'_ Self) -> &'_ [Node<N, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Access the internal node array.\n","sig":null,"attributes":[{"value":"/ Access the internal node array.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325688,"byte_end":325723,"line_start":1061,"line_end":1061,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2682},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325850,"byte_end":325859,"line_start":1067,"line_end":1067,"column_start":12,"column_end":21},"name":"raw_edges","qualname":"<Graph<N, E, Ty, Ix>>::raw_edges","value":"fn raw_edges<'_>(&'_ Self) -> &'_ [Edge<E, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Access the internal edge array.\n","sig":null,"attributes":[{"value":"/ Access the internal edge array.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325803,"byte_end":325838,"line_start":1066,"line_end":1066,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":326034,"byte_end":326050,"line_start":1073,"line_end":1073,"column_start":12,"column_end":28},"name":"into_nodes_edges","qualname":"<Graph<N, E, Ty, Ix>>::into_nodes_edges","value":"fn into_nodes_edges(Self) -> (Vec<Node<N, Ix>>, Vec<Edge<E, Ix>>)","parent":null,"children":[],"decl_id":null,"docs":" Convert the graph into a vector of Nodes and a vector of Edges\n","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325918,"byte_end":325951,"line_start":1071,"line_end":1071,"column_start":5,"column_end":38}},{"value":"/ Convert the graph into a vector of Nodes and a vector of Edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":325956,"byte_end":326022,"line_start":1072,"line_end":1072,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":326236,"byte_end":326246,"line_start":1078,"line_end":1078,"column_start":12,"column_end":22},"name":"first_edge","qualname":"<Graph<N, E, Ty, Ix>>::first_edge","value":"fn first_edge<'_>(&'_ Self, NodeIndex<Ix>, Direction) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the first edge in the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the first edge in the given direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":326143,"byte_end":326224,"line_start":1077,"line_end":1077,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2685},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":326735,"byte_end":326744,"line_start":1093,"line_end":1093,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Graph<N, E, Ty, Ix>>::next_edge","value":"fn next_edge<'_>(&'_ Self, EdgeIndex<Ix>, Direction) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the next edge for the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the next edge for the given direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":326642,"byte_end":326723,"line_start":1092,"line_end":1092,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328274,"byte_end":328289,"line_start":1140,"line_end":1140,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Graph<N, E, Ty, Ix>>::index_twice_mut","value":"fn index_twice_mut<T, U, '_>(&'_ mut Self, T, U)\n-> (&'_ mut <Self as Index<T>>::Output, &'_ mut <Self as Index<U>>::Output)\nwhere Self: IndexMut<T> + IndexMut<U>, T: GraphIndex, U: GraphIndex","parent":null,"children":[],"decl_id":null,"docs":" Index the `Graph` by two indices, any combination of\n node or edge indices is fine.","sig":null,"attributes":[{"value":"/ Index the `Graph` by two indices, any combination of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327140,"byte_end":327196,"line_start":1107,"line_end":1107,"column_start":5,"column_end":61}},{"value":"/ node or edge indices is fine.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327201,"byte_end":327234,"line_start":1108,"line_end":1108,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327239,"byte_end":327242,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327247,"byte_end":327316,"line_start":1110,"line_end":1110,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327321,"byte_end":327324,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327329,"byte_end":327336,"line_start":1112,"line_end":1112,"column_start":5,"column_end":12}},{"value":"/ use petgraph::{Graph, Incoming};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327341,"byte_end":327377,"line_start":1113,"line_end":1113,"column_start":5,"column_end":41}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327382,"byte_end":327411,"line_start":1114,"line_end":1114,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327416,"byte_end":327419,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ let mut gr = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327424,"byte_end":327454,"line_start":1116,"line_end":1116,"column_start":5,"column_end":35}},{"value":"/ let a = gr.add_node(0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327459,"byte_end":327487,"line_start":1117,"line_end":1117,"column_start":5,"column_end":33}},{"value":"/ let b = gr.add_node(0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327492,"byte_end":327520,"line_start":1118,"line_end":1118,"column_start":5,"column_end":33}},{"value":"/ let c = gr.add_node(0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327525,"byte_end":327553,"line_start":1119,"line_end":1119,"column_start":5,"column_end":33}},{"value":"/ gr.add_edge(a, b, 3.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327558,"byte_end":327584,"line_start":1120,"line_end":1120,"column_start":5,"column_end":31}},{"value":"/ gr.add_edge(b, c, 2.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327589,"byte_end":327615,"line_start":1121,"line_end":1121,"column_start":5,"column_end":31}},{"value":"/ gr.add_edge(c, b, 1.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327620,"byte_end":327646,"line_start":1122,"line_end":1122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327651,"byte_end":327654,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ // walk the graph and sum incoming edges into the node weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327659,"byte_end":327724,"line_start":1124,"line_end":1124,"column_start":5,"column_end":70}},{"value":"/ let mut dfs = Dfs::new(&gr, a);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327729,"byte_end":327764,"line_start":1125,"line_end":1125,"column_start":5,"column_end":40}},{"value":"/ while let Some(node) = dfs.next(&gr) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327769,"byte_end":327811,"line_start":1126,"line_end":1126,"column_start":5,"column_end":47}},{"value":"/     // use a walker -- a detached neighbors iterator","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327816,"byte_end":327872,"line_start":1127,"line_end":1127,"column_start":5,"column_end":61}},{"value":"/     let mut edges = gr.neighbors_directed(node, Incoming).detach();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327877,"byte_end":327948,"line_start":1128,"line_end":1128,"column_start":5,"column_end":76}},{"value":"/     while let Some(edge) = edges.next_edge(&gr) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":327953,"byte_end":328006,"line_start":1129,"line_end":1129,"column_start":5,"column_end":58}},{"value":"/         let (nw, ew) = gr.index_twice_mut(node, edge);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328011,"byte_end":328069,"line_start":1130,"line_end":1130,"column_start":5,"column_end":63}},{"value":"/         *nw += *ew;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328074,"byte_end":328097,"line_start":1131,"line_end":1131,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328102,"byte_end":328111,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328116,"byte_end":328121,"line_start":1133,"line_end":1133,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328126,"byte_end":328129,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ // check the result","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328134,"byte_end":328157,"line_start":1135,"line_end":1135,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(gr[a], 0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328162,"byte_end":328188,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(gr[b], 4.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328193,"byte_end":328219,"line_start":1137,"line_end":1137,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(gr[c], 2.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328224,"byte_end":328250,"line_start":1138,"line_end":1138,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328255,"byte_end":328262,"line_start":1139,"line_end":1139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2689},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328998,"byte_end":329005,"line_start":1166,"line_end":1166,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Graph<N, E, Ty, Ix>>::reverse","value":"fn reverse<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverse the direction of all edges\n","sig":null,"attributes":[{"value":"/ Reverse the direction of all edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":328948,"byte_end":328986,"line_start":1165,"line_end":1165,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329387,"byte_end":329392,"line_start":1180,"line_end":1180,"column_start":12,"column_end":17},"name":"clear","qualname":"<Graph<N, E, Ty, Ix>>::clear","value":"fn clear<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all nodes and edges\n","sig":null,"attributes":[{"value":"/ Remove all nodes and edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329345,"byte_end":329375,"line_start":1179,"line_end":1179,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2691},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329505,"byte_end":329516,"line_start":1186,"line_end":1186,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Graph<N, E, Ty, Ix>>::clear_edges","value":"fn clear_edges<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges\n","sig":null,"attributes":[{"value":"/ Remove all edges","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329473,"byte_end":329493,"line_start":1185,"line_end":1185,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329750,"byte_end":329758,"line_start":1194,"line_end":1194,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Graph<N, E, Ty, Ix>>::capacity","value":"fn capacity<'_>(&'_ Self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Return the current node and edge capacity of the graph.\n","sig":null,"attributes":[{"value":"/ Return the current node and edge capacity of the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329679,"byte_end":329738,"line_start":1193,"line_end":1193,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330087,"byte_end":330100,"line_start":1202,"line_end":1202,"column_start":12,"column_end":25},"name":"reserve_nodes","qualname":"<Graph<N, E, Ty, Ix>>::reserve_nodes","value":"fn reserve_nodes<'_>(&'_ mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more nodes to be inserted in\n the graph. Graph may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more nodes to be inserted in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329852,"byte_end":329928,"line_start":1198,"line_end":1198,"column_start":5,"column_end":81}},{"value":"/ the graph. Graph may reserve more space to avoid frequent reallocations.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":329933,"byte_end":330009,"line_start":1199,"line_end":1199,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330014,"byte_end":330017,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330022,"byte_end":330075,"line_start":1201,"line_end":1201,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330419,"byte_end":330432,"line_start":1210,"line_end":1210,"column_start":12,"column_end":25},"name":"reserve_edges","qualname":"<Graph<N, E, Ty, Ix>>::reserve_edges","value":"fn reserve_edges<'_>(&'_ mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more edges to be inserted in\n the graph. Graph may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more edges to be inserted in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330184,"byte_end":330260,"line_start":1206,"line_end":1206,"column_start":5,"column_end":81}},{"value":"/ the graph. Graph may reserve more space to avoid frequent reallocations.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330265,"byte_end":330341,"line_start":1207,"line_end":1207,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330346,"byte_end":330349,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330354,"byte_end":330407,"line_start":1209,"line_end":1209,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330834,"byte_end":330853,"line_start":1221,"line_end":1221,"column_start":12,"column_end":31},"name":"reserve_exact_nodes","qualname":"<Graph<N, E, Ty, Ix>>::reserve_exact_nodes","value":"fn reserve_exact_nodes<'_>(&'_ mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more nodes to be\n inserted in the graph. Does nothing if the capacity is already\n sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more nodes to be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330516,"byte_end":330591,"line_start":1214,"line_end":1214,"column_start":5,"column_end":80}},{"value":"/ inserted in the graph. Does nothing if the capacity is already","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330596,"byte_end":330662,"line_start":1215,"line_end":1215,"column_start":5,"column_end":71}},{"value":"/ sufficient.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330667,"byte_end":330682,"line_start":1216,"line_end":1216,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330687,"byte_end":330690,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ Prefer `reserve_nodes` if future insertions are expected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330695,"byte_end":330756,"line_start":1218,"line_end":1218,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330761,"byte_end":330764,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330769,"byte_end":330822,"line_start":1220,"line_end":1220,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331261,"byte_end":331280,"line_start":1232,"line_end":1232,"column_start":12,"column_end":31},"name":"reserve_exact_edges","qualname":"<Graph<N, E, Ty, Ix>>::reserve_exact_edges","value":"fn reserve_exact_edges<'_>(&'_ mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more edges to be\n inserted in the graph.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more edges to be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":330943,"byte_end":331018,"line_start":1225,"line_end":1225,"column_start":5,"column_end":80}},{"value":"/ inserted in the graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331023,"byte_end":331049,"line_start":1226,"line_end":1226,"column_start":5,"column_end":31}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331054,"byte_end":331109,"line_start":1227,"line_end":1227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331114,"byte_end":331117,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ Prefer `reserve_edges` if future insertions are expected.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331122,"byte_end":331183,"line_start":1229,"line_end":1229,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331188,"byte_end":331191,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331196,"byte_end":331249,"line_start":1231,"line_end":1231,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331462,"byte_end":331481,"line_start":1237,"line_end":1237,"column_start":12,"column_end":31},"name":"shrink_to_fit_nodes","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit_nodes","value":"fn shrink_to_fit_nodes<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying nodes collection as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the underlying nodes collection as much as possible.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331370,"byte_end":331450,"line_start":1236,"line_end":1236,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331634,"byte_end":331653,"line_start":1242,"line_end":1242,"column_start":12,"column_end":31},"name":"shrink_to_fit_edges","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit_edges","value":"fn shrink_to_fit_edges<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying edges collection as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the underlying edges collection as much as possible.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331542,"byte_end":331622,"line_start":1241,"line_end":1241,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331784,"byte_end":331797,"line_start":1247,"line_end":1247,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit","value":"fn shrink_to_fit<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the graph as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the graph as much as possible.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331714,"byte_end":331772,"line_start":1246,"line_end":1246,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332196,"byte_end":332208,"line_start":1259,"line_end":1259,"column_start":12,"column_end":24},"name":"retain_nodes","qualname":"<Graph<N, E, Ty, Ix>>::retain_nodes","value":"fn retain_nodes<F, '_>(&'_ mut Self, F) where\nF: for<'_> FnMut(Frozen, NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Keep all nodes that return `true` from the `visit` closure,\n remove the others.","sig":null,"attributes":[{"value":"/ Keep all nodes that return `true` from the `visit` closure,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331894,"byte_end":331957,"line_start":1252,"line_end":1252,"column_start":5,"column_end":68}},{"value":"/ remove the others.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331962,"byte_end":331984,"line_start":1253,"line_end":1253,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331989,"byte_end":331992,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ `visit` is provided a proxy reference to the graph, so that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":331997,"byte_end":332060,"line_start":1255,"line_end":1255,"column_start":5,"column_end":68}},{"value":"/ the graph can be walked and associated data modified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332065,"byte_end":332122,"line_start":1256,"line_end":1256,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332127,"byte_end":332130,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ The order nodes are visited is not specified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332135,"byte_end":332184,"line_start":1258,"line_end":1258,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332865,"byte_end":332877,"line_start":1279,"line_end":1279,"column_start":12,"column_end":24},"name":"retain_edges","qualname":"<Graph<N, E, Ty, Ix>>::retain_edges","value":"fn retain_edges<F, '_>(&'_ mut Self, F) where\nF: for<'_> FnMut(Frozen, EdgeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Keep all edges that return `true` from the `visit` closure,\n remove the others.","sig":null,"attributes":[{"value":"/ Keep all edges that return `true` from the `visit` closure,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332563,"byte_end":332626,"line_start":1272,"line_end":1272,"column_start":5,"column_end":68}},{"value":"/ remove the others.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332631,"byte_end":332653,"line_start":1273,"line_end":1273,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332658,"byte_end":332661,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ `visit` is provided a proxy reference to the graph, so that","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332666,"byte_end":332729,"line_start":1275,"line_end":1275,"column_start":5,"column_end":68}},{"value":"/ the graph can be walked and associated data modified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332734,"byte_end":332791,"line_start":1276,"line_end":1276,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332796,"byte_end":332799,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ The order edges are visited is not specified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":332804,"byte_end":332853,"line_start":1278,"line_end":1278,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333748,"byte_end":333758,"line_start":1309,"line_end":1309,"column_start":12,"column_end":22},"name":"from_edges","qualname":"<Graph<N, E, Ty, Ix>>::from_edges","value":"fn from_edges<I>(I) -> Self where I: IntoIterator,\nI::Item: IntoWeightedEdge<E>,\n<I::Item as IntoWeightedEdge<E>>::NodeId: Into<NodeIndex<Ix>>, N: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` from an iterable of edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` from an iterable of edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333232,"byte_end":333283,"line_start":1292,"line_end":1292,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333288,"byte_end":333291,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333296,"byte_end":333343,"line_start":1294,"line_end":1294,"column_start":5,"column_end":52}},{"value":"/ Edge weights `E` may either be specified in the list,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333348,"byte_end":333405,"line_start":1295,"line_end":1295,"column_start":5,"column_end":62}},{"value":"/ or they are filled with default values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333410,"byte_end":333453,"line_start":1296,"line_end":1296,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333458,"byte_end":333461,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333466,"byte_end":333522,"line_start":1298,"line_end":1298,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333527,"byte_end":333530,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333535,"byte_end":333542,"line_start":1300,"line_end":1300,"column_start":5,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333547,"byte_end":333571,"line_start":1301,"line_end":1301,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333576,"byte_end":333579,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ let gr = Graph::<(), i32>::from_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333584,"byte_end":333628,"line_start":1303,"line_end":1303,"column_start":5,"column_end":49}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333633,"byte_end":333664,"line_start":1304,"line_end":1304,"column_start":5,"column_end":36}},{"value":"/     (1, 2), (1, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333669,"byte_end":333692,"line_start":1305,"line_end":1305,"column_start":5,"column_end":28}},{"value":"/     (2, 3),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333697,"byte_end":333712,"line_start":1306,"line_end":1306,"column_start":5,"column_end":20}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333717,"byte_end":333724,"line_start":1307,"line_end":1307,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":333729,"byte_end":333736,"line_start":1308,"line_end":1308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334358,"byte_end":334375,"line_start":1328,"line_end":1328,"column_start":12,"column_end":29},"name":"extend_with_edges","qualname":"<Graph<N, E, Ty, Ix>>::extend_with_edges","value":"fn extend_with_edges<I, '_>(&'_ mut Self, I) where I: IntoIterator,\nI::Item: IntoWeightedEdge<E>,\n<I::Item as IntoWeightedEdge<E>>::NodeId: Into<NodeIndex<Ix>>, N: Default","parent":null,"children":[],"decl_id":null,"docs":" Extend the graph from an iterable of edges.","sig":null,"attributes":[{"value":"/ Extend the graph from an iterable of edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334060,"byte_end":334107,"line_start":1321,"line_end":1321,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334112,"byte_end":334115,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334120,"byte_end":334167,"line_start":1323,"line_end":1323,"column_start":5,"column_end":52}},{"value":"/ Edge weights `E` may either be specified in the list,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334172,"byte_end":334229,"line_start":1324,"line_end":1324,"column_start":5,"column_end":62}},{"value":"/ or they are filled with default values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334234,"byte_end":334277,"line_start":1325,"line_end":1325,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334282,"byte_end":334285,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":334290,"byte_end":334346,"line_start":1327,"line_end":1327,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335278,"byte_end":335281,"line_start":1355,"line_end":1355,"column_start":12,"column_end":15},"name":"map","qualname":"<Graph<N, E, Ty, Ix>>::map","value":"fn map<'a, F, G, N2, E2>(&'a Self, F, G) -> Graph<N2, E2, Ty, Ix> where\nF: FnMut(NodeIndex<Ix>, &'a N) -> N2, G: FnMut(EdgeIndex<Ix>, &'a E) -> E2","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping node and\n edge weights to new values.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping node and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335081,"byte_end":335125,"line_start":1350,"line_end":1350,"column_start":5,"column_end":49}},{"value":"/ edge weights to new values.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335130,"byte_end":335161,"line_start":1351,"line_end":1351,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335166,"byte_end":335169,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the same structure and the same","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335174,"byte_end":335233,"line_start":1353,"line_end":1353,"column_start":5,"column_end":64}},{"value":"/ graph indices as `self`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335238,"byte_end":335266,"line_start":1354,"line_end":1354,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2716},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336587,"byte_end":336597,"line_start":1389,"line_end":1389,"column_start":12,"column_end":22},"name":"filter_map","qualname":"<Graph<N, E, Ty, Ix>>::filter_map","value":"fn filter_map<'a, F, G, N2, E2>(&'a Self, F, G) -> Graph<N2, E2, Ty, Ix> where\nF: FnMut(NodeIndex<Ix>, &'a N) -> Option<N2>, G: FnMut(EdgeIndex<Ix>, &'a E)\n-> Option<E2>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping nodes and edges.\n A node or edge may be mapped to `None` to exclude it from\n the resulting graph.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping nodes and edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":335986,"byte_end":336038,"line_start":1377,"line_end":1377,"column_start":5,"column_end":57}},{"value":"/ A node or edge may be mapped to `None` to exclude it from","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336043,"byte_end":336104,"line_start":1378,"line_end":1378,"column_start":5,"column_end":66}},{"value":"/ the resulting graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336109,"byte_end":336133,"line_start":1379,"line_end":1379,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336138,"byte_end":336141,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ Nodes are mapped first with the `node_map` closure, then","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336146,"byte_end":336206,"line_start":1381,"line_end":1381,"column_start":5,"column_end":65}},{"value":"/ `edge_map` is called for the edges that have not had any endpoint","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336211,"byte_end":336280,"line_start":1382,"line_end":1382,"column_start":5,"column_end":74}},{"value":"/ removed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336285,"byte_end":336297,"line_start":1383,"line_end":1383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336302,"byte_end":336305,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the structure of a subgraph of the original graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336310,"byte_end":336388,"line_start":1385,"line_end":1385,"column_start":5,"column_end":83}},{"value":"/ If no nodes are removed, the resulting graph has compatible node","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336393,"byte_end":336461,"line_start":1386,"line_end":1386,"column_start":5,"column_end":73}},{"value":"/ indices; if neither nodes nor edges are removed, the result has","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336466,"byte_end":336533,"line_start":1387,"line_end":1387,"column_start":5,"column_end":72}},{"value":"/ the same graph indices as `self`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":336538,"byte_end":336575,"line_start":1388,"line_end":1388,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2722},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":337956,"byte_end":337970,"line_start":1423,"line_end":1423,"column_start":12,"column_end":26},"name":"into_edge_type","qualname":"<Graph<N, E, Ty, Ix>>::into_edge_type","value":"fn into_edge_type<NewTy>(Self) -> Graph<N, E, NewTy, Ix> where NewTy: EdgeType","parent":null,"children":[],"decl_id":null,"docs":" Convert the graph into either undirected or directed. No edge adjustments\n are done, so you may want to go over the result to remove or add edges.","sig":null,"attributes":[{"value":"/ Convert the graph into either undirected or directed. No edge adjustments","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":337744,"byte_end":337821,"line_start":1419,"line_end":1419,"column_start":5,"column_end":82}},{"value":"/ are done, so you may want to go over the result to remove or add edges.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":337826,"byte_end":337901,"line_start":1420,"line_end":1420,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":337906,"byte_end":337909,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":337914,"byte_end":337944,"line_start":1422,"line_end":1422,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5048},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":339282,"byte_end":339291,"line_start":1465,"line_end":1465,"column_start":12,"column_end":21},"name":"Externals","qualname":"::graph_impl::Externals","value":"Externals {  }","parent":null,"children":[{"krate":0,"index":5053},{"krate":0,"index":5054},{"krate":0,"index":5055}],"decl_id":null,"docs":" An iterator over either the nodes without edges to them or from them.\n","sig":null,"attributes":[{"value":"/ An iterator over either the nodes without edges to them or from them.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":339173,"byte_end":339246,"line_start":1463,"line_end":1463,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":339586,"byte_end":339590,"line_start":1477,"line_end":1477,"column_start":8,"column_end":12},"name":"next","qualname":"<Externals as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<NodeIndex<Ix>>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340158,"byte_end":340167,"line_start":1494,"line_end":1494,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Externals as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5068},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340666,"byte_end":340675,"line_start":1511,"line_end":1511,"column_start":12,"column_end":21},"name":"Neighbors","qualname":"::graph_impl::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":5072},{"krate":0,"index":5073},{"krate":0,"index":5074}],"decl_id":null,"docs":" Iterator over the neighbors of a node.","sig":null,"attributes":[{"value":"/ Iterator over the neighbors of a node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340279,"byte_end":340321,"line_start":1500,"line_end":1500,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340322,"byte_end":340325,"line_start":1501,"line_end":1501,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340326,"byte_end":340371,"line_start":1502,"line_end":1502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340372,"byte_end":340375,"line_start":1503,"line_end":1503,"column_start":1,"column_end":4}},{"value":"/ Created with [`.neighbors()`][1], [`.neighbors_directed()`][2] or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340376,"byte_end":340445,"line_start":1504,"line_end":1504,"column_start":1,"column_end":70}},{"value":"/ [`.neighbors_undirected()`][3].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340446,"byte_end":340481,"line_start":1505,"line_end":1505,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340482,"byte_end":340485,"line_start":1506,"line_end":1506,"column_start":1,"column_end":4}},{"value":"/ [1]: struct.Graph.html#method.neighbors","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340486,"byte_end":340529,"line_start":1507,"line_end":1507,"column_start":1,"column_end":44}},{"value":"/ [2]: struct.Graph.html#method.neighbors_directed","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340530,"byte_end":340582,"line_start":1508,"line_end":1508,"column_start":1,"column_end":53}},{"value":"/ [3]: struct.Graph.html#method.neighbors_undirected","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340583,"byte_end":340637,"line_start":1509,"line_end":1509,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340954,"byte_end":340958,"line_start":1524,"line_end":1524,"column_start":8,"column_end":12},"name":"next","qualname":"<Neighbors as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<NodeIndex<Ix>>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":342199,"byte_end":342205,"line_start":1563,"line_end":1563,"column_start":12,"column_end":18},"name":"detach","qualname":"<Neighbors>::detach","value":"fn detach<'_>(&'_ Self) -> WalkNeighbors<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return a “walker” object that can be used to step through the\n neighbors and edges from the origin node.","sig":null,"attributes":[{"value":"/ Return a “walker” object that can be used to step through the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":341923,"byte_end":341992,"line_start":1558,"line_end":1558,"column_start":5,"column_end":70}},{"value":"/ neighbors and edges from the origin node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":341997,"byte_end":342042,"line_start":1559,"line_end":1559,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":342047,"byte_end":342050,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ Note: The walker does not borrow from the graph, this is to allow mixing","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":342055,"byte_end":342131,"line_start":1561,"line_end":1561,"column_start":5,"column_end":81}},{"value":"/ edge walking with mutating the graph's weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":342136,"byte_end":342187,"line_start":1562,"line_end":1562,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":343384,"byte_end":343389,"line_start":1615,"line_end":1615,"column_start":8,"column_end":13},"name":"edges","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoEdges>::edges","value":"fn edges(Self, Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":3693},"children":[],"decl_id":{"krate":0,"index":3695},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2779},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":343636,"byte_end":343650,"line_start":1626,"line_end":1626,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoEdgesDirected>::edges_directed","value":"fn edges_directed(Self, Self::NodeId, Direction) -> Self::EdgesDirected","parent":{"krate":0,"index":3702},"children":[],"decl_id":{"krate":0,"index":3704},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5082},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":343837,"byte_end":343842,"line_start":1633,"line_end":1633,"column_start":12,"column_end":17},"name":"Edges","qualname":"::graph_impl::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":5087},{"krate":0,"index":5088},{"krate":0,"index":5089},{"krate":0,"index":5091},{"krate":0,"index":5092}],"decl_id":null,"docs":" Iterator over the edges of from or to a node\n","sig":null,"attributes":[{"value":"/ Iterator over the edges of from or to a node","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":343760,"byte_end":343808,"line_start":1631,"line_end":1631,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":344393,"byte_end":344397,"line_start":1658,"line_end":1658,"column_start":8,"column_end":12},"name":"next","qualname":"<Edges as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5099},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":346645,"byte_end":346660,"line_start":1718,"line_end":1718,"column_start":12,"column_end":27},"name":"EdgesConnecting","qualname":"::graph_impl::EdgesConnecting","value":"EdgesConnecting {  }","parent":null,"children":[{"krate":0,"index":5104},{"krate":0,"index":5105},{"krate":0,"index":5106}],"decl_id":null,"docs":" Iterator over the multiple directed edges connecting a source node to a target node\n","sig":null,"attributes":[{"value":"/ Iterator over the multiple directed edges connecting a source node to a target node","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":346522,"byte_end":346609,"line_start":1716,"line_end":1716,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":346993,"byte_end":346997,"line_start":1735,"line_end":1735,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgesConnecting as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<EdgeReference>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347234,"byte_end":347243,"line_start":1744,"line_end":1744,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgesConnecting as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2804},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347529,"byte_end":347534,"line_start":1760,"line_end":1760,"column_start":8,"column_end":13},"name":"clone","qualname":"<Edges as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2805},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347823,"byte_end":347834,"line_start":1772,"line_end":1772,"column_start":12,"column_end":23},"name":"NodeWeights","qualname":"::graph_impl::NodeWeights","value":"NodeWeights {  }","parent":null,"children":[{"krate":0,"index":2809}],"decl_id":null,"docs":" Iterator yielding immutable access to all node weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding immutable access to all node weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347752,"byte_end":347811,"line_start":1771,"line_end":1771,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2815},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348035,"byte_end":348039,"line_start":1781,"line_end":1781,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeWeights as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<&'a N>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348135,"byte_end":348144,"line_start":1785,"line_end":1785,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeWeights as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5119},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348305,"byte_end":348319,"line_start":1791,"line_end":1791,"column_start":12,"column_end":26},"name":"NodeWeightsMut","qualname":"::graph_impl::NodeWeightsMut","value":"NodeWeightsMut {  }","parent":null,"children":[{"krate":0,"index":5123}],"decl_id":null,"docs":" Iterator yielding mutable access to all node weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding mutable access to all node weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348219,"byte_end":348276,"line_start":1789,"line_end":1789,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348588,"byte_end":348592,"line_start":1801,"line_end":1801,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeWeightsMut as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<&'a mut N>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348696,"byte_end":348705,"line_start":1805,"line_end":1805,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeWeightsMut as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2826},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348852,"byte_end":348863,"line_start":1811,"line_end":1811,"column_start":12,"column_end":23},"name":"EdgeWeights","qualname":"::graph_impl::EdgeWeights","value":"EdgeWeights {  }","parent":null,"children":[{"krate":0,"index":2830}],"decl_id":null,"docs":" Iterator yielding immutable access to all edge weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding immutable access to all edge weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348781,"byte_end":348840,"line_start":1810,"line_end":1810,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349065,"byte_end":349069,"line_start":1821,"line_end":1821,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeWeights as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<&'a E>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2838},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349165,"byte_end":349174,"line_start":1825,"line_end":1825,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeWeights as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5129},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349336,"byte_end":349350,"line_start":1832,"line_end":1832,"column_start":12,"column_end":26},"name":"EdgeWeightsMut","qualname":"::graph_impl::EdgeWeightsMut","value":"EdgeWeightsMut {  }","parent":null,"children":[{"krate":0,"index":5133}],"decl_id":null,"docs":" Iterator yielding mutable access to all edge weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding mutable access to all edge weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349250,"byte_end":349307,"line_start":1830,"line_end":1830,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349619,"byte_end":349623,"line_start":1842,"line_end":1842,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeWeightsMut as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<&'a mut E>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2846},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349727,"byte_end":349736,"line_start":1846,"line_end":1846,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeWeightsMut as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350056,"byte_end":350061,"line_start":1860,"line_end":1860,"column_start":8,"column_end":13},"name":"index","qualname":"<Graph<N, E, Ty, Ix> as std::ops::Index>::index","value":"fn index<'_>(&'_ Self, NodeIndex<Ix>) -> &'_ N","parent":{"krate":2,"index":3571},"children":[],"decl_id":{"krate":2,"index":3574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2859},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350376,"byte_end":350385,"line_start":1873,"line_end":1873,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<Graph<N, E, Ty, Ix> as std::ops::IndexMut>::index_mut","value":"fn index_mut<'_>(&'_ mut Self, NodeIndex<Ix>) -> &'_ mut N","parent":{"krate":2,"index":3575},"children":[],"decl_id":{"krate":2,"index":3577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350730,"byte_end":350735,"line_start":1887,"line_end":1887,"column_start":8,"column_end":13},"name":"index","qualname":"<Graph<N, E, Ty, Ix> as std::ops::Index>::index","value":"fn index<'_>(&'_ Self, EdgeIndex<Ix>) -> &'_ E","parent":{"krate":2,"index":3571},"children":[],"decl_id":{"krate":2,"index":3574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2872},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351050,"byte_end":351059,"line_start":1900,"line_end":1900,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<Graph<N, E, Ty, Ix> as std::ops::IndexMut>::index_mut","value":"fn index_mut<'_>(&'_ mut Self, EdgeIndex<Ix>) -> &'_ mut E","parent":{"krate":2,"index":3575},"children":[],"decl_id":{"krate":2,"index":3577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351295,"byte_end":351302,"line_start":1911,"line_end":1911,"column_start":8,"column_end":15},"name":"default","qualname":"<Graph<N, E, Ty, Ix> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2879},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351412,"byte_end":351422,"line_start":1917,"line_end":1917,"column_start":11,"column_end":21},"name":"GraphIndex","qualname":"::graph_impl::GraphIndex","value":"GraphIndex: Copy","parent":null,"children":[{"krate":0,"index":2880},{"krate":0,"index":2881}],"decl_id":null,"docs":" A `GraphIndex` is a node or edge index.\n","sig":null,"attributes":[{"value":"/ A `GraphIndex` is a node or edge index.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351358,"byte_end":351401,"line_start":1916,"line_end":1916,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351457,"byte_end":351462,"line_start":1919,"line_end":1919,"column_start":8,"column_end":13},"name":"index","qualname":"::graph_impl::GraphIndex::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351506,"byte_end":351519,"line_start":1921,"line_end":1921,"column_start":8,"column_end":21},"name":"is_node_index","qualname":"::graph_impl::GraphIndex::is_node_index","value":"fn is_node_index() -> bool","parent":{"krate":0,"index":2879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351625,"byte_end":351630,"line_start":1927,"line_end":1927,"column_start":8,"column_end":13},"name":"index","qualname":"<NodeIndex<Ix> as graph_impl::GraphIndex>::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2879},"children":[],"decl_id":{"krate":0,"index":2880},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351589,"byte_end":351598,"line_start":1925,"line_end":1925,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351727,"byte_end":351740,"line_start":1932,"line_end":1932,"column_start":8,"column_end":21},"name":"is_node_index","qualname":"<NodeIndex<Ix> as graph_impl::GraphIndex>::is_node_index","value":"fn is_node_index() -> bool","parent":{"krate":0,"index":2879},"children":[],"decl_id":{"krate":0,"index":2881},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351691,"byte_end":351700,"line_start":1930,"line_end":1930,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351866,"byte_end":351871,"line_start":1940,"line_end":1940,"column_start":8,"column_end":13},"name":"index","qualname":"<EdgeIndex<Ix> as graph_impl::GraphIndex>::index","value":"fn index<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2879},"children":[],"decl_id":{"krate":0,"index":2880},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351830,"byte_end":351839,"line_start":1938,"line_end":1938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2889},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351968,"byte_end":351981,"line_start":1945,"line_end":1945,"column_start":8,"column_end":21},"name":"is_node_index","qualname":"<EdgeIndex<Ix> as graph_impl::GraphIndex>::is_node_index","value":"fn is_node_index() -> bool","parent":{"krate":0,"index":2879},"children":[],"decl_id":{"krate":0,"index":2881},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351932,"byte_end":351941,"line_start":1943,"line_end":1943,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2890},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353139,"byte_end":353152,"line_start":1985,"line_end":1985,"column_start":12,"column_end":25},"name":"WalkNeighbors","qualname":"::graph_impl::WalkNeighbors","value":"WalkNeighbors {  }","parent":null,"children":[{"krate":0,"index":2892},{"krate":0,"index":2893}],"decl_id":null,"docs":" A “walker” object that can be used to step through the edge list of a node.","sig":null,"attributes":[{"value":"/ A “walker” object that can be used to step through the edge list of a node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352017,"byte_end":352100,"line_start":1950,"line_end":1950,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352101,"byte_end":352104,"line_start":1951,"line_end":1951,"column_start":1,"column_end":4}},{"value":"/ Created with [`.detach()`](struct.Neighbors.html#method.detach).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352105,"byte_end":352173,"line_start":1952,"line_end":1952,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352174,"byte_end":352177,"line_start":1953,"line_end":1953,"column_start":1,"column_end":4}},{"value":"/ The walker does not borrow from the graph, so it lets you step through","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352178,"byte_end":352252,"line_start":1954,"line_end":1954,"column_start":1,"column_end":75}},{"value":"/ neighbors or incident edges while also mutating graph weights, as","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352253,"byte_end":352322,"line_start":1955,"line_end":1955,"column_start":1,"column_end":70}},{"value":"/ in the following example:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352323,"byte_end":352352,"line_start":1956,"line_end":1956,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352353,"byte_end":352356,"line_start":1957,"line_end":1957,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352357,"byte_end":352364,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"/ use petgraph::{Graph, Incoming};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352365,"byte_end":352401,"line_start":1959,"line_end":1959,"column_start":1,"column_end":37}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352402,"byte_end":352431,"line_start":1960,"line_end":1960,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352432,"byte_end":352435,"line_start":1961,"line_end":1961,"column_start":1,"column_end":4}},{"value":"/ let mut gr = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352436,"byte_end":352466,"line_start":1962,"line_end":1962,"column_start":1,"column_end":31}},{"value":"/ let a = gr.add_node(0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352467,"byte_end":352495,"line_start":1963,"line_end":1963,"column_start":1,"column_end":29}},{"value":"/ let b = gr.add_node(0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352496,"byte_end":352524,"line_start":1964,"line_end":1964,"column_start":1,"column_end":29}},{"value":"/ let c = gr.add_node(0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352525,"byte_end":352553,"line_start":1965,"line_end":1965,"column_start":1,"column_end":29}},{"value":"/ gr.add_edge(a, b, 3.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352554,"byte_end":352580,"line_start":1966,"line_end":1966,"column_start":1,"column_end":27}},{"value":"/ gr.add_edge(b, c, 2.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352581,"byte_end":352607,"line_start":1967,"line_end":1967,"column_start":1,"column_end":27}},{"value":"/ gr.add_edge(c, b, 1.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352608,"byte_end":352634,"line_start":1968,"line_end":1968,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352635,"byte_end":352638,"line_start":1969,"line_end":1969,"column_start":1,"column_end":4}},{"value":"/ // step through the graph and sum incoming edges into the node weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352639,"byte_end":352712,"line_start":1970,"line_end":1970,"column_start":1,"column_end":74}},{"value":"/ let mut dfs = Dfs::new(&gr, a);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352713,"byte_end":352748,"line_start":1971,"line_end":1971,"column_start":1,"column_end":36}},{"value":"/ while let Some(node) = dfs.next(&gr) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352749,"byte_end":352791,"line_start":1972,"line_end":1972,"column_start":1,"column_end":43}},{"value":"/     // use a detached neighbors walker","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352792,"byte_end":352834,"line_start":1973,"line_end":1973,"column_start":1,"column_end":43}},{"value":"/     let mut edges = gr.neighbors_directed(node, Incoming).detach();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352835,"byte_end":352906,"line_start":1974,"line_end":1974,"column_start":1,"column_end":72}},{"value":"/     while let Some(edge) = edges.next_edge(&gr) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352907,"byte_end":352960,"line_start":1975,"line_end":1975,"column_start":1,"column_end":54}},{"value":"/         gr[node] += gr[edge];","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352961,"byte_end":352994,"line_start":1976,"line_end":1976,"column_start":1,"column_end":34}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":352995,"byte_end":353004,"line_start":1977,"line_end":1977,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353005,"byte_end":353010,"line_start":1978,"line_end":1978,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353011,"byte_end":353014,"line_start":1979,"line_end":1979,"column_start":1,"column_end":4}},{"value":"/ // check the result","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353015,"byte_end":353038,"line_start":1980,"line_end":1980,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(gr[a], 0.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353039,"byte_end":353065,"line_start":1981,"line_end":1981,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(gr[b], 4.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353066,"byte_end":353092,"line_start":1982,"line_end":1982,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(gr[c], 2.);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353093,"byte_end":353119,"line_start":1983,"line_end":1983,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353120,"byte_end":353127,"line_start":1984,"line_end":1984,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2897},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353294,"byte_end":353299,"line_start":1994,"line_end":1994,"column_start":8,"column_end":13},"name":"clone","qualname":"<WalkNeighbors<Ix> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2900},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353809,"byte_end":353813,"line_start":2009,"line_end":2009,"column_start":12,"column_end":16},"name":"next","qualname":"<WalkNeighbors<Ix>>::next","value":"fn next<N, E, Ty, '_, '_>(&'_ mut Self, &'_ Graph<N, E, Ty, Ix>)\n-> Option<(EdgeIndex<Ix>, NodeIndex<Ix>)> where Ty: EdgeType","parent":null,"children":[],"decl_id":null,"docs":" Step to the next edge and its endpoint node in the walk for graph `g`.","sig":null,"attributes":[{"value":"/ Step to the next edge and its endpoint node in the walk for graph `g`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353474,"byte_end":353548,"line_start":2003,"line_end":2003,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353553,"byte_end":353556,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ The next node indices are always the others than the starting point","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353561,"byte_end":353632,"line_start":2005,"line_end":2005,"column_start":5,"column_end":76}},{"value":"/ where the `WalkNeighbors` value was created.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353637,"byte_end":353685,"line_start":2006,"line_end":2006,"column_start":5,"column_end":53}},{"value":"/ For an `Outgoing` walk, the target nodes,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353690,"byte_end":353735,"line_start":2007,"line_end":2007,"column_start":5,"column_end":50}},{"value":"/ for an `Incoming` walk, the source nodes of the edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353740,"byte_end":353797,"line_start":2008,"line_end":2008,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2904},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":354751,"byte_end":354760,"line_start":2036,"line_end":2036,"column_start":12,"column_end":21},"name":"next_node","qualname":"<WalkNeighbors<Ix>>::next_node","value":"fn next_node<N, E, Ty, '_, '_>(&'_ mut Self, &'_ Graph<N, E, Ty, Ix>)\n-> Option<NodeIndex<Ix>> where Ty: EdgeType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2909},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":354919,"byte_end":354928,"line_start":2043,"line_end":2043,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<WalkNeighbors<Ix>>::next_edge","value":"fn next_edge<N, E, Ty, '_, '_>(&'_ mut Self, &'_ Graph<N, E, Ty, Ix>)\n-> Option<EdgeIndex<Ix>> where Ty: EdgeType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5139},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355160,"byte_end":355171,"line_start":2053,"line_end":2053,"column_start":12,"column_end":23},"name":"NodeIndices","qualname":"::graph_impl::NodeIndices","value":"NodeIndices {  }","parent":null,"children":[{"krate":0,"index":5141},{"krate":0,"index":5142}],"decl_id":null,"docs":" Iterator over the node indices of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over the node indices of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355078,"byte_end":355124,"line_start":2051,"line_end":2051,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2917},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355337,"byte_end":355341,"line_start":2061,"line_end":2061,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeIndices<Ix> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2918},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355429,"byte_end":355438,"line_start":2065,"line_end":2065,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeIndices<Ix> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355579,"byte_end":355588,"line_start":2071,"line_end":2071,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NodeIndices<Ix> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5149},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355820,"byte_end":355831,"line_start":2080,"line_end":2080,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::graph_impl::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":5151},{"krate":0,"index":5152}],"decl_id":null,"docs":" Iterator over the edge indices of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over the edge indices of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355738,"byte_end":355784,"line_start":2078,"line_end":2078,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355997,"byte_end":356001,"line_start":2088,"line_end":2088,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeIndices<Ix> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356089,"byte_end":356098,"line_start":2092,"line_end":2092,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeIndices<Ix> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2931},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356239,"byte_end":356248,"line_start":2098,"line_end":2098,"column_start":8,"column_end":17},"name":"next_back","qualname":"<EdgeIndices<Ix> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5159},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356459,"byte_end":356472,"line_start":2107,"line_end":2107,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::graph_impl::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":5163},{"krate":0,"index":5164},{"krate":0,"index":5166}],"decl_id":null,"docs":" Reference to a `Graph` edge.\n","sig":null,"attributes":[{"value":"/ Reference to a `Graph` edge.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356398,"byte_end":356430,"line_start":2105,"line_end":2105,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356651,"byte_end":356656,"line_start":2114,"line_end":2114,"column_start":8,"column_end":13},"name":"clone","qualname":"<EdgeReference as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356861,"byte_end":356863,"line_start":2125,"line_end":2125,"column_start":8,"column_end":10},"name":"eq","qualname":"<EdgeReference as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ Self) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357259,"byte_end":357268,"line_start":2144,"line_end":2144,"column_start":8,"column_end":17},"name":"visit_map","qualname":"<Graph<N, E, Ty, Ix> as visit::Visitable>::visit_map","value":"fn visit_map<'_>(&'_ Self) -> FixedBitSet","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3805},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2962},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357361,"byte_end":357370,"line_start":2148,"line_end":2148,"column_start":8,"column_end":17},"name":"reset_map","qualname":"<Graph<N, E, Ty, Ix> as visit::Visitable>::reset_map","value":"fn reset_map<'_, '_>(&'_ Self, &'_ mut Self::Map)","parent":{"krate":0,"index":3803},"children":[],"decl_id":{"krate":0,"index":3806},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357778,"byte_end":357794,"line_start":2168,"line_end":2168,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoNodeIdentifiers>::node_identifiers","value":"fn node_identifiers(Self) -> NodeIndices<Ix>","parent":{"krate":0,"index":3711},"children":[],"decl_id":{"krate":0,"index":3713},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2982},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357977,"byte_end":357987,"line_start":2178,"line_end":2178,"column_start":8,"column_end":18},"name":"node_count","qualname":"<Graph<N, E, Ty, Ix> as visit::NodeCount>::node_count","value":"fn node_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3791},"children":[],"decl_id":{"krate":0,"index":3792},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358171,"byte_end":358181,"line_start":2189,"line_end":2189,"column_start":8,"column_end":18},"name":"node_bound","qualname":"<Graph<N, E, Ty, Ix> as visit::NodeIndexable>::node_bound","value":"fn node_bound<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3770},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358154,"byte_end":358163,"line_start":2188,"line_end":2188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358253,"byte_end":358261,"line_start":2193,"line_end":2193,"column_start":8,"column_end":16},"name":"to_index","qualname":"<Graph<N, E, Ty, Ix> as visit::NodeIndexable>::to_index","value":"fn to_index<'_>(&'_ Self, NodeIndex<Ix>) -> usize","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3771},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358236,"byte_end":358245,"line_start":2192,"line_end":2192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358345,"byte_end":358355,"line_start":2197,"line_end":2197,"column_start":8,"column_end":18},"name":"from_index","qualname":"<Graph<N, E, Ty, Ix> as visit::NodeIndexable>::from_index","value":"fn from_index<'_>(&'_ Self, usize) -> Self::NodeId","parent":{"krate":0,"index":3769},"children":[],"decl_id":{"krate":0,"index":3772},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358328,"byte_end":358337,"line_start":2196,"line_end":2196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358718,"byte_end":358727,"line_start":2215,"line_end":2215,"column_start":8,"column_end":17},"name":"neighbors","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoNeighbors>::neighbors","value":"fn neighbors(Self, NodeIndex<Ix>) -> Neighbors","parent":{"krate":0,"index":3680},"children":[],"decl_id":{"krate":0,"index":3682},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3011},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359008,"byte_end":359026,"line_start":2226,"line_end":2226,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoNeighborsDirected>::neighbors_directed","value":"fn neighbors_directed(Self, NodeIndex<Ix>, Direction) -> Neighbors","parent":{"krate":0,"index":3689},"children":[],"decl_id":{"krate":0,"index":3691},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3020},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359381,"byte_end":359396,"line_start":2238,"line_end":2238,"column_start":8,"column_end":23},"name":"edge_references","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoEdgeReferences>::edge_references","value":"fn edge_references(Self) -> Self::EdgeReferences","parent":{"krate":0,"index":3750},"children":[],"decl_id":{"krate":0,"index":3753},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3026},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359598,"byte_end":359608,"line_start":2249,"line_end":2249,"column_start":8,"column_end":18},"name":"edge_count","qualname":"<Graph<N, E, Ty, Ix> as visit::EdgeCount>::edge_count","value":"fn edge_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3825},"children":[],"decl_id":{"krate":0,"index":3826},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359581,"byte_end":359590,"line_start":2248,"line_end":2248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3035},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359887,"byte_end":359902,"line_start":2261,"line_end":2261,"column_start":8,"column_end":23},"name":"node_references","qualname":"<&'a Graph<N, E, Ty, Ix> as visit::IntoNodeReferences>::node_references","value":"fn node_references(Self) -> Self::NodeReferences","parent":{"krate":0,"index":3739},"children":[],"decl_id":{"krate":0,"index":3742},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5172},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360103,"byte_end":360117,"line_start":2270,"line_end":2270,"column_start":12,"column_end":26},"name":"NodeReferences","qualname":"::graph_impl::NodeReferences","value":"NodeReferences {  }","parent":null,"children":[{"krate":0,"index":5176}],"decl_id":null,"docs":" Iterator over all nodes of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all nodes of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360028,"byte_end":360067,"line_start":2268,"line_end":2268,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360348,"byte_end":360352,"line_start":2280,"line_end":2280,"column_start":8,"column_end":12},"name":"next","qualname":"<NodeReferences as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3043},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360500,"byte_end":360509,"line_start":2286,"line_end":2286,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NodeReferences as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3048},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360684,"byte_end":360693,"line_start":2295,"line_end":2295,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NodeReferences as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3058},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361172,"byte_end":361178,"line_start":2312,"line_end":2312,"column_start":12,"column_end":18},"name":"weight","qualname":"<EdgeReference>::weight","value":"fn weight<'_>(&'_ Self) -> &'a E","parent":null,"children":[],"decl_id":null,"docs":" Access the edge’s weight.","sig":null,"attributes":[{"value":"/ Access the edge’s weight.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361001,"byte_end":361032,"line_start":2308,"line_end":2308,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361037,"byte_end":361040,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ **NOTE** that this method offers a longer lifetime","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361045,"byte_end":361099,"line_start":2310,"line_end":2310,"column_start":5,"column_end":59}},{"value":"/ than the trait (unfortunately they don't match yet).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361104,"byte_end":361160,"line_start":2311,"line_end":2311,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361408,"byte_end":361414,"line_start":2325,"line_end":2325,"column_start":8,"column_end":14},"name":"source","qualname":"<EdgeReference as visit::EdgeRef>::source","value":"fn source<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":257},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361474,"byte_end":361480,"line_start":2328,"line_end":2328,"column_start":8,"column_end":14},"name":"target","qualname":"<EdgeReference as visit::EdgeRef>::target","value":"fn target<'_>(&'_ Self) -> Self::NodeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":258},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361540,"byte_end":361546,"line_start":2331,"line_end":2331,"column_start":8,"column_end":14},"name":"weight","qualname":"<EdgeReference as visit::EdgeRef>::weight","value":"fn weight<'_>(&'_ Self) -> &'_ E","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3069},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361595,"byte_end":361597,"line_start":2334,"line_end":2334,"column_start":8,"column_end":10},"name":"id","qualname":"<EdgeReference as visit::EdgeRef>::id","value":"fn id<'_>(&'_ Self) -> Self::EdgeId","parent":{"krate":0,"index":253},"children":[],"decl_id":{"krate":0,"index":260},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5187},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361726,"byte_end":361740,"line_start":2341,"line_end":2341,"column_start":12,"column_end":26},"name":"EdgeReferences","qualname":"::graph_impl::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":5191}],"decl_id":null,"docs":" Iterator over all edges of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all edges of a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361651,"byte_end":361690,"line_start":2339,"line_end":2339,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3075},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361973,"byte_end":361977,"line_start":2351,"line_end":2351,"column_start":8,"column_end":12},"name":"next","qualname":"<EdgeReferences as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3077},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362192,"byte_end":362201,"line_start":2359,"line_end":2359,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EdgeReferences as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3082},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362376,"byte_end":362385,"line_start":2368,"line_end":2368,"column_start":8,"column_end":17},"name":"next_back","qualname":"<EdgeReferences as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3093},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362804,"byte_end":362814,"line_start":2384,"line_end":2384,"column_start":8,"column_end":18},"name":"edge_bound","qualname":"<Graph<N, E, Ty, Ix> as visit::EdgeIndexable>::edge_bound","value":"fn edge_bound<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":3780},"children":[],"decl_id":{"krate":0,"index":3781},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362873,"byte_end":362881,"line_start":2388,"line_end":2388,"column_start":8,"column_end":16},"name":"to_index","qualname":"<Graph<N, E, Ty, Ix> as visit::EdgeIndexable>::to_index","value":"fn to_index<'_>(&'_ Self, EdgeIndex<Ix>) -> usize","parent":{"krate":0,"index":3780},"children":[],"decl_id":{"krate":0,"index":3782},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3095},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362952,"byte_end":362962,"line_start":2392,"line_end":2392,"column_start":8,"column_end":18},"name":"from_index","qualname":"<Graph<N, E, Ty, Ix> as visit::EdgeIndexable>::from_index","value":"fn from_index<'_>(&'_ Self, usize) -> Self::EdgeId","parent":{"krate":0,"index":3780},"children":[],"decl_id":{"krate":0,"index":3783},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3190},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364209,"byte_end":364212,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Frozen>::new","value":"fn new(&'a mut G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Frozen` from a mutable reference to a graph.\n","sig":null,"attributes":[{"value":"/ Create a new `Frozen` from a mutable reference to a graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364135,"byte_end":364197,"line_start":16,"line_end":16,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3195},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364447,"byte_end":364452,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"deref","qualname":"<Frozen as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ G","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3201},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364595,"byte_end":364600,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"index","qualname":"<Frozen as std::ops::Index>::index","value":"fn index<'_>(&'_ Self, I) -> &'_ G::Output","parent":{"krate":2,"index":3571},"children":[],"decl_id":{"krate":2,"index":3574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3206},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364743,"byte_end":364752,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<Frozen as std::ops::IndexMut>::index_mut","value":"fn index_mut<'_>(&'_ mut Self, I) -> &'_ mut G::Output","parent":{"krate":2,"index":3575},"children":[],"decl_id":{"krate":2,"index":3577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3213},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":365157,"byte_end":365172,"line_start":60,"line_end":60,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Frozen>::index_twice_mut","value":"fn index_twice_mut<T, U, '_>(&'_ mut Self, T, U)\n->\n    (&'_ mut <Graph<N, E, Ty, Ix> as Index<T>>::Output,\n    &'_ mut <Graph<N, E, Ty, Ix> as Index<U>>::Output) where\nGraph<N, E, Ty, Ix>: IndexMut<T> + IndexMut<U>, T: GraphIndex, U: GraphIndex","parent":null,"children":[],"decl_id":null,"docs":" Index the `Graph` by two indices, any combination of\n node or edge indices is fine.","sig":null,"attributes":[{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364931,"byte_end":364964,"line_start":55,"line_end":55,"column_start":5,"column_end":38}},{"value":"/ Index the `Graph` by two indices, any combination of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364969,"byte_end":365025,"line_start":56,"line_end":56,"column_start":5,"column_end":61}},{"value":"/ node or edge indices is fine.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":365030,"byte_end":365063,"line_start":57,"line_end":57,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":365068,"byte_end":365071,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":365076,"byte_end":365145,"line_start":59,"line_end":59,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3222},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363552,"byte_end":363558,"line_start":2412,"line_end":2412,"column_start":12,"column_end":18},"name":"Frozen","qualname":"::graph_impl::Frozen","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Frozen` is a graph wrapper.","sig":null,"attributes":[{"value":"/ `Frozen` is a graph wrapper.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363103,"byte_end":363135,"line_start":2401,"line_end":2401,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363136,"byte_end":363139,"line_start":2402,"line_end":2402,"column_start":1,"column_end":4}},{"value":"/ The `Frozen` only allows shared access (read-only) to the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363140,"byte_end":363201,"line_start":2403,"line_end":2403,"column_start":1,"column_end":62}},{"value":"/ underlying graph `G`, but it allows mutable access to its","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363202,"byte_end":363263,"line_start":2404,"line_end":2404,"column_start":1,"column_end":62}},{"value":"/ node and edge weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363264,"byte_end":363290,"line_start":2405,"line_end":2405,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363291,"byte_end":363294,"line_start":2406,"line_end":2406,"column_start":1,"column_end":4}},{"value":"/ This is used to ensure immutability of the graph's structure","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363295,"byte_end":363359,"line_start":2407,"line_end":2407,"column_start":1,"column_end":65}},{"value":"/ while permitting weights to be both read and written.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363360,"byte_end":363417,"line_start":2408,"line_end":2408,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363418,"byte_end":363421,"line_start":2409,"line_end":2409,"column_start":1,"column_end":4}},{"value":"/ See indexing implementations and the traits `Data` and `DataMap`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363422,"byte_end":363490,"line_start":2410,"line_end":2410,"column_start":1,"column_end":69}},{"value":"/ for read-write access to the graph's weights.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":363491,"byte_end":363540,"line_start":2411,"line_end":2411,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/traits_graph.rs","byte_start":370930,"byte_end":370946,"line_start":23,"line_end":23,"column_start":8,"column_end":24},"name":"adjacency_matrix","qualname":"<Graph<N, E, Ty, Ix> as visit::GetAdjacencyMatrix>::adjacency_matrix","value":"fn adjacency_matrix<'_>(&'_ Self) -> FixedBitSet","parent":{"krate":0,"index":3814},"children":[],"decl_id":{"krate":0,"index":3816},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3302},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/traits_graph.rs","byte_start":371405,"byte_end":371416,"line_start":37,"line_end":37,"column_start":8,"column_end":19},"name":"is_adjacent","qualname":"<Graph<N, E, Ty, Ix> as visit::GetAdjacencyMatrix>::is_adjacent","value":"fn is_adjacent<'_,\n'_>(&'_ Self, &'_ FixedBitSet, NodeIndex<Ix>, NodeIndex<Ix>) -> bool","parent":{"krate":0,"index":3814},"children":[],"decl_id":{"krate":0,"index":3817},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3303},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unionfind","qualname":"::unionfind","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","parent":null,"children":[{"krate":0,"index":3304},{"krate":0,"index":3307},{"krate":0,"index":5313},{"krate":0,"index":5317},{"krate":0,"index":5320},{"krate":0,"index":3310},{"krate":0,"index":3312},{"krate":0,"index":3314}],"decl_id":null,"docs":" `UnionFind<K>` is a disjoint-set data structure.\n","sig":null,"attributes":[{"value":"/ `UnionFind<K>` is a disjoint-set data structure.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372583,"byte_end":372635,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5313},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":373201,"byte_end":373210,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"UnionFind","qualname":"::unionfind::UnionFind","value":"UnionFind {  }","parent":null,"children":[{"krate":0,"index":5315},{"krate":0,"index":5316}],"decl_id":null,"docs":" `UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements\n indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.","sig":null,"attributes":[{"value":"/ `UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372691,"byte_end":372784,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372785,"byte_end":372880,"line_start":7,"line_end":7,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372881,"byte_end":372884,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372885,"byte_end":372947,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372948,"byte_end":372951,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Too awesome not to quote:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372952,"byte_end":372981,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372982,"byte_end":372985,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ “The amortized time per operation is **O(α(n))** where **α(n)** is the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":372986,"byte_end":373064,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ inverse of **f(x) = A(x, x)** with **A** being the extremely fast-growing Ackermann function.”","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":373065,"byte_end":373165,"line_start":14,"line_end":14,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374139,"byte_end":374142,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<UnionFind<K>>::new","value":"fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UnionFind` of `n` disjoint sets.\n","sig":null,"attributes":[{"value":"/ Create a new `UnionFind` of `n` disjoint sets.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374077,"byte_end":374127,"line_start":45,"line_end":45,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3317},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374404,"byte_end":374408,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"find","qualname":"<UnionFind<K>>::find","value":"fn find<'_>(&'_ Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Return the representative for `x`.","sig":null,"attributes":[{"value":"/ Return the representative for `x`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374302,"byte_end":374340,"line_start":53,"line_end":53,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374345,"byte_end":374348,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` is out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374353,"byte_end":374392,"line_start":55,"line_end":55,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375097,"byte_end":375105,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"find_mut","qualname":"<UnionFind<K>>::find_mut","value":"fn find_mut<'_>(&'_ mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Return the representative for `x`.","sig":null,"attributes":[{"value":"/ Return the representative for `x`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374853,"byte_end":374891,"line_start":72,"line_end":72,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374896,"byte_end":374899,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Write back the found representative, flattening the internal","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374904,"byte_end":374968,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"/ datastructure in the process and quicken future lookups.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374973,"byte_end":375033,"line_start":75,"line_end":75,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375038,"byte_end":375041,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` is out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375046,"byte_end":375085,"line_start":77,"line_end":77,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375741,"byte_end":375746,"line_start":96,"line_end":96,"column_start":12,"column_end":17},"name":"equiv","qualname":"<UnionFind<K>>::equiv","value":"fn equiv<'_>(&'_ Self, K, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given elements belong to the same set, and returns\n `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the given elements belong to the same set, and returns","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375626,"byte_end":375702,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ `false` otherwise.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375707,"byte_end":375729,"line_start":95,"line_end":95,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3321},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":376036,"byte_end":376041,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"name":"union","qualname":"<UnionFind<K>>::union","value":"fn union<'_>(&'_ mut Self, K, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unify the two sets containing `x` and `y`.","sig":null,"attributes":[{"value":"/ Unify the two sets containing `x` and `y`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375824,"byte_end":375870,"line_start":100,"line_end":100,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375875,"byte_end":375878,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Return `false` if the sets were already the same, `true` if they were unified.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375883,"byte_end":375965,"line_start":102,"line_end":102,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375970,"byte_end":375973,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` or `y` is out of bounds.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":375978,"byte_end":376024,"line_start":104,"line_end":104,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":376923,"byte_end":376936,"line_start":135,"line_end":135,"column_start":12,"column_end":25},"name":"into_labeling","qualname":"<UnionFind<K>>::into_labeling","value":"fn into_labeling(Self) -> Vec<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a vector mapping each element to its representative.\n","sig":null,"attributes":[{"value":"/ Return a vector mapping each element to its representative.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":376848,"byte_end":376911,"line_start":134,"line_end":134,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":3332},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"operator","qualname":"::operator","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","parent":null,"children":[{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3337},{"krate":0,"index":3340},{"krate":0,"index":3343},{"krate":0,"index":3346}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3346},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379217,"byte_end":379227,"line_start":63,"line_end":63,"column_start":8,"column_end":18},"name":"complement","qualname":"::operator::complement","value":"fn complement<N, E, Ty, Ix, '_,\n'_>(&'_ Graph<N, E, Ty, Ix>, &'_ mut Graph<N, E, Ty, Ix>, E) where\nTy: EdgeType, Ix: IndexType, E: Clone, N: Clone","parent":null,"children":[],"decl_id":null,"docs":" \\[Generic\\] complement of the graph","sig":null,"attributes":[{"value":"/ \\[Generic\\] complement of the graph","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377689,"byte_end":377728,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377729,"byte_end":377732,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Computes the graph complement of the input Graphand stores it","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377733,"byte_end":377798,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ in the provided empty output Graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377799,"byte_end":377838,"line_start":8,"line_end":8,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377839,"byte_end":377842,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The function does not create self-loops.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377843,"byte_end":377887,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377888,"byte_end":377891,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Computes in **O(|V|^2*log(|V|))** time (average).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377892,"byte_end":377945,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377946,"byte_end":377949,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Returns the complement.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377950,"byte_end":377977,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377978,"byte_end":377981,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377982,"byte_end":377995,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":377996,"byte_end":378007,"line_start":17,"line_end":17,"column_start":1,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378008,"byte_end":378032,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/ use petgraph::operator::complement;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378033,"byte_end":378072,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378073,"byte_end":378102,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378103,"byte_end":378106,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut graph: Graph<(),(),Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378107,"byte_end":378163,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ let a = graph.add_node(()); // node with no weight","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378164,"byte_end":378218,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/ let b = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378219,"byte_end":378250,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/ let c = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378251,"byte_end":378282,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"/ let d = graph.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378283,"byte_end":378314,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378315,"byte_end":378318,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378319,"byte_end":378349,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/     (a, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378350,"byte_end":378365,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     (b, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378366,"byte_end":378381,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/     (c, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378382,"byte_end":378397,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378398,"byte_end":378405,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ // a ----> b ----> c ----> d","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378406,"byte_end":378438,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378439,"byte_end":378442,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ graph.extend_with_edges(&[(a, b), (b, c), (c, d)]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378443,"byte_end":378498,"line_start":35,"line_end":35,"column_start":1,"column_end":56}},{"value":"/ let mut output: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378499,"byte_end":378558,"line_start":36,"line_end":36,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378559,"byte_end":378562,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ complement(&graph, &mut output, ());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378563,"byte_end":378603,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378604,"byte_end":378607,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut expected_res: Graph<(), (), Directed> = Graph::new();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378608,"byte_end":378673,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ let a = expected_res.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378674,"byte_end":378712,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/ let b = expected_res.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378713,"byte_end":378751,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ let c = expected_res.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378752,"byte_end":378790,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/ let d = expected_res.add_node(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378791,"byte_end":378829,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ expected_res.extend_with_edges(&[","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378830,"byte_end":378867,"line_start":45,"line_end":45,"column_start":1,"column_end":38}},{"value":"/     (a, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378868,"byte_end":378883,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     (a, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378884,"byte_end":378899,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     (b, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378900,"byte_end":378915,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/     (b, d),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378916,"byte_end":378931,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/     (c, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378932,"byte_end":378947,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/     (c, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378948,"byte_end":378963,"line_start":51,"line_end":51,"column_start":1,"column_end":16}},{"value":"/     (d, a),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378964,"byte_end":378979,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/     (d, b),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378980,"byte_end":378995,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/     (d, c),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":378996,"byte_end":379011,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379012,"byte_end":379019,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379020,"byte_end":379023,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ for x in graph.node_indices() {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379024,"byte_end":379059,"line_start":57,"line_end":57,"column_start":1,"column_end":36}},{"value":"/     for y in graph.node_indices() {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379060,"byte_end":379099,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"/         assert_eq!(output.contains_edge(x, y), expected_res.contains_edge(x, y));","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379100,"byte_end":379185,"line_start":59,"line_end":59,"column_start":1,"column_end":86}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379186,"byte_end":379195,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379196,"byte_end":379201,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/operator.rs","byte_start":379202,"byte_end":379209,"line_start":62,"line_end":62,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":3351},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3356},{"krate":0,"index":3359},{"krate":0,"index":3362},{"krate":0,"index":3365},{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3372},{"krate":0,"index":3375},{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3382},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3391},{"krate":0,"index":3394}],"decl_id":null,"docs":" Commonly used items.","sig":null,"attributes":[{"value":"/ Commonly used items.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379722,"byte_end":379746,"line_start":1,"line_end":1,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379747,"byte_end":379750,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379751,"byte_end":379758,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379759,"byte_end":379788,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/prelude.rs","byte_start":379789,"byte_end":379796,"line_start":5,"line_end":5,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":3397},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6078,"byte_end":6083,"line_start":161,"line_end":161,"column_start":9,"column_end":14},"name":"graph","qualname":"::graph","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":3398},{"krate":0,"index":3399},{"krate":0,"index":3402},{"krate":0,"index":3405},{"krate":0,"index":3408},{"krate":0,"index":3411},{"krate":0,"index":3414},{"krate":0,"index":3417},{"krate":0,"index":3420},{"krate":0,"index":3423},{"krate":0,"index":3426},{"krate":0,"index":3429},{"krate":0,"index":3432},{"krate":0,"index":3435},{"krate":0,"index":3438},{"krate":0,"index":3441},{"krate":0,"index":3444},{"krate":0,"index":3447},{"krate":0,"index":3450},{"krate":0,"index":3453},{"krate":0,"index":3456},{"krate":0,"index":3459},{"krate":0,"index":3462},{"krate":0,"index":3465},{"krate":0,"index":3468},{"krate":0,"index":3471}],"decl_id":null,"docs":" `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.\n","sig":null,"attributes":[{"value":"/ `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5979,"byte_end":6069,"line_start":160,"line_end":160,"column_start":1,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5324},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6963,"byte_end":6971,"line_start":190,"line_end":190,"column_start":5,"column_end":13},"name":"Outgoing","qualname":"::Direction::Outgoing","value":"Direction::Outgoing","parent":{"krate":0,"index":5323},"children":[],"decl_id":null,"docs":" An `Outgoing` edge is an outward edge *from* the current node.\n","sig":null,"attributes":[{"value":"/ An `Outgoing` edge is an outward edge *from* the current node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6892,"byte_end":6958,"line_start":189,"line_end":189,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5327},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7050,"byte_end":7058,"line_start":192,"line_end":192,"column_start":5,"column_end":13},"name":"Incoming","qualname":"::Direction::Incoming","value":"Direction::Incoming","parent":{"krate":0,"index":5323},"children":[],"decl_id":null,"docs":" An `Incoming` edge is an inbound edge *to* the current node.\n","sig":null,"attributes":[{"value":"/ An `Incoming` edge is an inbound edge *to* the current node.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6981,"byte_end":7045,"line_start":191,"line_end":191,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":5323},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6876,"byte_end":6885,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"name":"Direction","qualname":"::Direction","value":"enum Direction { Outgoing = , Incoming = , }","parent":null,"children":[{"krate":0,"index":5324},{"krate":0,"index":5327}],"decl_id":null,"docs":" Edge direction.\n","sig":null,"attributes":[{"value":"/ Edge direction.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6771,"byte_end":6790,"line_start":185,"line_end":185,"column_start":1,"column_end":20}},{"value":"repr(usize)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":6852,"byte_end":6866,"line_start":187,"line_end":187,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7174,"byte_end":7182,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"opposite","qualname":"<Direction>::opposite","value":"fn opposite(Self) -> Direction","parent":null,"children":[],"decl_id":null,"docs":" Return the opposite `Direction`.\n","sig":null,"attributes":[{"value":"/ Return the opposite `Direction`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7112,"byte_end":7148,"line_start":198,"line_end":198,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7153,"byte_end":7162,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3477},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7393,"byte_end":7398,"line_start":209,"line_end":209,"column_start":12,"column_end":17},"name":"index","qualname":"<Direction>::index","value":"fn index(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return `0` for `Outgoing` and `1` for `Incoming`.\n","sig":null,"attributes":[{"value":"/ Return `0` for `Outgoing` and `1` for `Incoming`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7314,"byte_end":7367,"line_start":207,"line_end":207,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7372,"byte_end":7381,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5348},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7584,"byte_end":7592,"line_start":219,"line_end":219,"column_start":10,"column_end":18},"name":"Directed","qualname":"::Directed","value":"enum Directed { }","parent":null,"children":[],"decl_id":null,"docs":" Marker type for a directed graph.\n","sig":null,"attributes":[{"value":"/ Marker type for a directed graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7514,"byte_end":7551,"line_start":217,"line_end":217,"column_start":1,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":5354},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7692,"byte_end":7702,"line_start":224,"line_end":224,"column_start":10,"column_end":20},"name":"Undirected","qualname":"::Undirected","value":"enum Undirected { }","parent":null,"children":[],"decl_id":null,"docs":" Marker type for an undirected graph.\n","sig":null,"attributes":[{"value":"/ Marker type for an undirected graph.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7619,"byte_end":7659,"line_start":222,"line_end":222,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":3481},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7814,"byte_end":7822,"line_start":228,"line_end":228,"column_start":11,"column_end":19},"name":"EdgeType","qualname":"::EdgeType","value":"EdgeType","parent":null,"children":[{"krate":0,"index":3482}],"decl_id":null,"docs":" A graph's edge type determines whether it has directed edges or not.\n","sig":null,"attributes":[{"value":"/ A graph's edge type determines whether it has directed edges or not.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7731,"byte_end":7803,"line_start":227,"line_end":227,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7832,"byte_end":7843,"line_start":229,"line_end":229,"column_start":8,"column_end":19},"name":"is_directed","qualname":"::EdgeType::is_directed","value":"fn is_directed() -> bool","parent":{"krate":0,"index":3481},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7908,"byte_end":7919,"line_start":234,"line_end":234,"column_start":8,"column_end":19},"name":"is_directed","qualname":"<Directed as EdgeType>::is_directed","value":"fn is_directed() -> bool","parent":{"krate":0,"index":3481},"children":[],"decl_id":{"krate":0,"index":3482},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7891,"byte_end":7900,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3486},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8006,"byte_end":8017,"line_start":241,"line_end":241,"column_start":8,"column_end":19},"name":"is_directed","qualname":"<Undirected as EdgeType>::is_directed","value":"fn is_directed() -> bool","parent":{"krate":0,"index":3481},"children":[],"decl_id":{"krate":0,"index":3482},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7989,"byte_end":7998,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3487},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8225,"byte_end":8241,"line_start":250,"line_end":250,"column_start":11,"column_end":27},"name":"IntoWeightedEdge","qualname":"::IntoWeightedEdge","value":"IntoWeightedEdge<E>","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490}],"decl_id":null,"docs":" Convert an element like `(i, j)` or `(i, j, w)` into\n a triple of source, target, edge weight.","sig":null,"attributes":[{"value":"/ Convert an element like `(i, j)` or `(i, j, w)` into","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8053,"byte_end":8109,"line_start":246,"line_end":246,"column_start":1,"column_end":57}},{"value":"/ a triple of source, target, edge weight.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8110,"byte_end":8154,"line_start":247,"line_end":247,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8155,"byte_end":8158,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ For `Graph::from_edges` and `GraphMap::from_edges`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8159,"byte_end":8214,"line_start":249,"line_end":249,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":3489},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8256,"byte_end":8262,"line_start":251,"line_end":251,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::IntoWeightedEdge::NodeId","value":"type NodeId;","parent":{"krate":0,"index":3487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8271,"byte_end":8289,"line_start":252,"line_end":252,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"::IntoWeightedEdge::into_weighted_edge","value":"fn into_weighted_edge(Self) -> (Self::NodeId, Self::NodeId, E)","parent":{"krate":0,"index":3487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3495},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8434,"byte_end":8452,"line_start":261,"line_end":261,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"<(Ix, Ix) as IntoWeightedEdge>::into_weighted_edge","value":"fn into_weighted_edge(Self) -> (Ix, Ix, E)","parent":{"krate":0,"index":3487},"children":[],"decl_id":{"krate":0,"index":3490},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3500},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8620,"byte_end":8638,"line_start":269,"line_end":269,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"<(Ix, Ix, E) as IntoWeightedEdge>::into_weighted_edge","value":"fn into_weighted_edge(Self) -> (Ix, Ix, E)","parent":{"krate":0,"index":3487},"children":[],"decl_id":{"krate":0,"index":3490},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3506},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":8791,"byte_end":8809,"line_start":279,"line_end":279,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"<(Ix, Ix, &'a E) as IntoWeightedEdge>::into_weighted_edge","value":"fn into_weighted_edge(Self) -> (Ix, Ix, E)","parent":{"krate":0,"index":3487},"children":[],"decl_id":{"krate":0,"index":3490},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3512},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":9018,"byte_end":9036,"line_start":291,"line_end":291,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"<&'a (Ix, Ix) as IntoWeightedEdge>::into_weighted_edge","value":"fn into_weighted_edge(Self) -> (Ix, Ix, E)","parent":{"krate":0,"index":3487},"children":[],"decl_id":{"krate":0,"index":3490},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3518},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":9247,"byte_end":9265,"line_start":303,"line_end":303,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"<&'a (Ix, Ix, E) as IntoWeightedEdge>::into_weighted_edge","value":"fn into_weighted_edge(Self) -> (Ix, Ix, E)","parent":{"krate":0,"index":3487},"children":[],"decl_id":{"krate":0,"index":3490},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":12959,"byte_end":12968,"line_start":15,"line_end":15,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":13125,"byte_end":13134,"line_start":22,"line_end":22,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":13183,"byte_end":13192,"line_start":24,"line_end":24,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":13358,"byte_end":13367,"line_start":31,"line_end":31,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34580,"byte_end":34587,"line_start":60,"line_end":60,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35346,"byte_end":35353,"line_start":94,"line_end":94,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35783,"byte_end":35789,"line_start":113,"line_end":113,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36219,"byte_end":36226,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43351,"byte_end":43354,"line_start":44,"line_end":44,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43529,"byte_end":43532,"line_start":56,"line_end":56,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45896,"byte_end":45908,"line_start":140,"line_end":140,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46129,"byte_end":46141,"line_start":153,"line_end":153,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49282,"byte_end":49285,"line_start":260,"line_end":260,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49465,"byte_end":49468,"line_start":272,"line_end":272,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50816,"byte_end":50820,"line_start":319,"line_end":319,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50995,"byte_end":50999,"line_start":331,"line_end":331,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54473,"byte_end":54483,"line_start":442,"line_end":442,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54765,"byte_end":54775,"line_start":460,"line_end":460,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55184,"byte_end":55187,"line_start":481,"line_end":481,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55398,"byte_end":55410,"line_start":491,"line_end":491,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55621,"byte_end":55624,"line_start":501,"line_end":501,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55835,"byte_end":55839,"line_start":511,"line_end":511,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26579,"byte_end":26590,"line_start":403,"line_end":403,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26806,"byte_end":26813,"line_start":415,"line_end":415,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56675,"byte_end":56676,"line_start":21,"line_end":21,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56870,"byte_end":56881,"line_start":31,"line_end":31,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57095,"byte_end":57102,"line_start":41,"line_end":41,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57785,"byte_end":57797,"line_start":74,"line_end":74,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58048,"byte_end":58060,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58751,"byte_end":58772,"line_start":116,"line_end":116,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":60755,"byte_end":60772,"line_start":191,"line_end":191,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":61916,"byte_end":61942,"line_start":236,"line_end":236,"column_start":32,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":63579,"byte_end":63596,"line_start":298,"line_end":298,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":64304,"byte_end":64316,"line_start":325,"line_end":325,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65295,"byte_end":65296,"line_start":361,"line_end":361,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65803,"byte_end":65815,"line_start":381,"line_end":381,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":66076,"byte_end":66088,"line_start":392,"line_end":392,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":67157,"byte_end":67178,"line_start":439,"line_end":439,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69137,"byte_end":69154,"line_start":518,"line_end":518,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69809,"byte_end":69838,"line_start":546,"line_end":546,"column_start":29,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71831,"byte_end":71839,"line_start":16,"line_end":16,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71937,"byte_end":71945,"line_start":21,"line_end":21,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72033,"byte_end":72041,"line_start":25,"line_end":25,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72279,"byte_end":72287,"line_start":35,"line_end":35,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72548,"byte_end":72556,"line_start":45,"line_end":45,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72824,"byte_end":72832,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73142,"byte_end":73150,"line_start":69,"line_end":69,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73457,"byte_end":73470,"line_start":85,"line_end":85,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73874,"byte_end":73895,"line_start":103,"line_end":103,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74201,"byte_end":74222,"line_start":116,"line_end":116,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74640,"byte_end":74648,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":75102,"byte_end":75124,"line_start":156,"line_end":156,"column_start":22,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78301,"byte_end":78306,"line_start":73,"line_end":73,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78432,"byte_end":78437,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78754,"byte_end":78759,"line_start":94,"line_end":94,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":79854,"byte_end":79859,"line_start":135,"line_end":135,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":81872,"byte_end":81877,"line_start":222,"line_end":222,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":84501,"byte_end":84506,"line_start":325,"line_end":325,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86420,"byte_end":86421,"line_start":394,"line_end":394,"column_start":49,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86792,"byte_end":86806,"line_start":409,"line_end":409,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91294,"byte_end":91307,"line_start":71,"line_end":71,"column_start":37,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91359,"byte_end":91372,"line_start":72,"line_end":72,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91559,"byte_end":91572,"line_start":81,"line_end":81,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":92176,"byte_end":92187,"line_start":107,"line_end":107,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93993,"byte_end":93997,"line_start":165,"line_end":165,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99272,"byte_end":99276,"line_start":327,"line_end":327,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":101002,"byte_end":101016,"line_start":377,"line_end":377,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":101640,"byte_end":101644,"line_start":399,"line_end":399,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102114,"byte_end":102118,"line_start":415,"line_end":415,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102255,"byte_end":102259,"line_start":423,"line_end":423,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102784,"byte_end":102793,"line_start":444,"line_end":444,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103254,"byte_end":103258,"line_start":463,"line_end":463,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":104526,"byte_end":104540,"line_start":502,"line_end":502,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106119,"byte_end":106123,"line_start":556,"line_end":556,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106265,"byte_end":106269,"line_start":563,"line_end":563,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106475,"byte_end":106479,"line_start":572,"line_end":572,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106706,"byte_end":106710,"line_start":581,"line_end":581,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107027,"byte_end":107031,"line_start":595,"line_end":595,"column_start":56,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107078,"byte_end":107082,"line_start":597,"line_end":597,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107493,"byte_end":107497,"line_start":614,"line_end":614,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":108192,"byte_end":108196,"line_start":635,"line_end":635,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":141768,"byte_end":141779,"line_start":150,"line_end":150,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155095,"byte_end":155105,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157098,"byte_end":157112,"line_start":103,"line_end":103,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157609,"byte_end":157624,"line_start":128,"line_end":128,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":169869,"byte_end":169885,"line_start":190,"line_end":190,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":170077,"byte_end":170093,"line_start":198,"line_end":198,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":171295,"byte_end":171302,"line_start":238,"line_end":238,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":174656,"byte_end":174671,"line_start":352,"line_end":352,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":175195,"byte_end":175205,"line_start":372,"line_end":372,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":183581,"byte_end":183589,"line_start":45,"line_end":45,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":187866,"byte_end":187881,"line_start":161,"line_end":161,"column_start":64,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":188146,"byte_end":188147,"line_start":172,"line_end":172,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":188996,"byte_end":189011,"line_start":203,"line_end":203,"column_start":64,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":1438},{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":189375,"byte_end":189376,"line_start":220,"line_end":220,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1444},{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":206323,"byte_end":206335,"line_start":701,"line_end":701,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1505}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":207257,"byte_end":207269,"line_start":734,"line_end":734,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219559,"byte_end":219567,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219774,"byte_end":219782,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221552,"byte_end":221560,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":222272,"byte_end":222273,"line_start":113,"line_end":113,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":222946,"byte_end":222958,"line_start":140,"line_end":140,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":223486,"byte_end":223498,"line_start":166,"line_end":166,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":226949,"byte_end":226954,"line_start":278,"line_end":278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":227558,"byte_end":227563,"line_start":306,"line_end":306,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":227658,"byte_end":227663,"line_start":312,"line_end":312,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115459,"byte_end":115467,"line_start":217,"line_end":217,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1910}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115705,"byte_end":115713,"line_start":230,"line_end":230,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1915}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119174,"byte_end":119183,"line_start":359,"line_end":359,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119253,"byte_end":119262,"line_start":365,"line_end":365,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1943}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":130698,"byte_end":130713,"line_start":694,"line_end":694,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1957},{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132575,"byte_end":132580,"line_start":748,"line_end":748,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1961}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134851,"byte_end":134852,"line_start":823,"line_end":823,"column_start":21,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253021,"byte_end":253024,"line_start":60,"line_end":60,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2096}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253190,"byte_end":253193,"line_start":70,"line_end":70,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2102}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253526,"byte_end":253529,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2109}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254869,"byte_end":254872,"line_start":137,"line_end":137,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258483,"byte_end":258486,"line_start":234,"line_end":234,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263761,"byte_end":263774,"line_start":413,"line_end":413,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263880,"byte_end":263893,"line_start":419,"line_end":419,"column_start":36,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263933,"byte_end":263946,"line_start":421,"line_end":421,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2156}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264249,"byte_end":264262,"line_start":434,"line_end":434,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264688,"byte_end":264693,"line_start":457,"line_end":457,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2177}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":265283,"byte_end":265286,"line_start":481,"line_end":481,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":266310,"byte_end":266324,"line_start":521,"line_end":521,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267454,"byte_end":267457,"line_start":563,"line_end":563,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267673,"byte_end":267676,"line_start":574,"line_end":574,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268155,"byte_end":268164,"line_start":596,"line_end":596,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269052,"byte_end":269055,"line_start":632,"line_end":632,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269385,"byte_end":269388,"line_start":648,"line_end":648,"column_start":45,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269495,"byte_end":269498,"line_start":655,"line_end":655,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2263}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269722,"byte_end":269725,"line_start":667,"line_end":667,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2269}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270036,"byte_end":270051,"line_start":683,"line_end":683,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270655,"byte_end":270658,"line_start":712,"line_end":712,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2288}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270825,"byte_end":270828,"line_start":722,"line_end":722,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2294}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271006,"byte_end":271009,"line_start":733,"line_end":733,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2300}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271715,"byte_end":271729,"line_start":763,"line_end":763,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2317}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":272059,"byte_end":272073,"line_start":778,"line_end":778,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":272307,"byte_end":272321,"line_start":789,"line_end":789,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283280,"byte_end":283283,"line_start":64,"line_end":64,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2386}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":285543,"byte_end":285546,"line_start":147,"line_end":147,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":287498,"byte_end":287501,"line_start":204,"line_end":204,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2397}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":287818,"byte_end":287821,"line_start":215,"line_end":215,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2401}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":288173,"byte_end":288180,"line_start":229,"line_end":229,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2409}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":288763,"byte_end":288770,"line_start":254,"line_end":254,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2416}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":289147,"byte_end":289152,"line_start":270,"line_end":270,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2428}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294089,"byte_end":294098,"line_start":104,"line_end":104,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294479,"byte_end":294488,"line_start":125,"line_end":125,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294727,"byte_end":294736,"line_start":137,"line_end":137,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2536}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294840,"byte_end":294849,"line_start":143,"line_end":143,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295389,"byte_end":295398,"line_start":163,"line_end":163,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295883,"byte_end":295892,"line_start":186,"line_end":186,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2552}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295996,"byte_end":296005,"line_start":192,"line_end":192,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2555}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296832,"byte_end":296836,"line_start":224,"line_end":224,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5034}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296946,"byte_end":296950,"line_start":232,"line_end":232,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2564}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297452,"byte_end":297456,"line_start":250,"line_end":250,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5047}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297572,"byte_end":297576,"line_start":258,"line_end":258,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301608,"byte_end":301613,"line_start":364,"line_end":364,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2596}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":302028,"byte_end":302033,"line_start":384,"line_end":384,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2602}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":303884,"byte_end":303889,"line_start":453,"line_end":453,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2627}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304296,"byte_end":304301,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2631}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304731,"byte_end":304736,"line_start":481,"line_end":481,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2653},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":2689},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":2716},{"krate":0,"index":2722}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":339478,"byte_end":339487,"line_start":1471,"line_end":1471,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2729},{"krate":0,"index":2730},{"krate":0,"index":2731}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340867,"byte_end":340876,"line_start":1518,"line_end":1518,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2736},{"krate":0,"index":2737}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":341748,"byte_end":341757,"line_start":1547,"line_end":1547,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5081}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":341871,"byte_end":341880,"line_start":1554,"line_end":1554,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2746}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":342710,"byte_end":342724,"line_start":1588,"line_end":1588,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2761},{"krate":0,"index":2763}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":344277,"byte_end":344282,"line_start":1651,"line_end":1651,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2785},{"krate":0,"index":2786}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":346867,"byte_end":346882,"line_start":1728,"line_end":1728,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347456,"byte_end":347461,"line_start":1755,"line_end":1755,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2804}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347954,"byte_end":347965,"line_start":1775,"line_end":1775,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2814},{"krate":0,"index":2815},{"krate":0,"index":2817}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348500,"byte_end":348514,"line_start":1795,"line_end":1795,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2825}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348984,"byte_end":348995,"line_start":1815,"line_end":1815,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2838}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349531,"byte_end":349545,"line_start":1836,"line_end":1836,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2843},{"krate":0,"index":2844},{"krate":0,"index":2846}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349963,"byte_end":349968,"line_start":1854,"line_end":1854,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2852},{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350304,"byte_end":350309,"line_start":1868,"line_end":1868,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350637,"byte_end":350642,"line_start":1881,"line_end":1881,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2865},{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350978,"byte_end":350983,"line_start":1895,"line_end":1895,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2872}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351223,"byte_end":351228,"line_start":1906,"line_end":1906,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2878}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351569,"byte_end":351578,"line_start":1924,"line_end":1924,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2884},{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351810,"byte_end":351819,"line_start":1937,"line_end":1937,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2888},{"krate":0,"index":2889}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353242,"byte_end":353255,"line_start":1990,"line_end":1990,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2897}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353450,"byte_end":353463,"line_start":2002,"line_end":2002,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2900},{"krate":0,"index":2904},{"krate":0,"index":2909}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355280,"byte_end":355291,"line_start":2058,"line_end":2058,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355554,"byte_end":355565,"line_start":2070,"line_end":2070,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2921}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355718,"byte_end":355729,"line_start":2076,"line_end":2076,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355940,"byte_end":355951,"line_start":2085,"line_end":2085,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356214,"byte_end":356225,"line_start":2097,"line_end":2097,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2931}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356378,"byte_end":356389,"line_start":2103,"line_end":2103,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356617,"byte_end":356630,"line_start":2113,"line_end":2113,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356733,"byte_end":356746,"line_start":2119,"line_end":2119,"column_start":37,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356803,"byte_end":356816,"line_start":2121,"line_end":2121,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2947}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357003,"byte_end":357008,"line_start":2130,"line_end":2130,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2953},{"krate":0,"index":2954}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357159,"byte_end":357164,"line_start":2138,"line_end":2138,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357508,"byte_end":357513,"line_start":2154,"line_end":2154,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2968}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357905,"byte_end":357910,"line_start":2173,"line_end":2173,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2982}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358085,"byte_end":358090,"line_start":2183,"line_end":2183,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358479,"byte_end":358484,"line_start":2202,"line_end":2202,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359512,"byte_end":359517,"line_start":2243,"line_end":2243,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3026}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360247,"byte_end":360261,"line_start":2274,"line_end":2274,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360624,"byte_end":360638,"line_start":2291,"line_end":2291,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3048}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360879,"byte_end":360893,"line_start":2302,"line_end":2302,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360945,"byte_end":360958,"line_start":2304,"line_end":2304,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3058}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361261,"byte_end":361274,"line_start":2317,"line_end":2317,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3063},{"krate":0,"index":3064},{"krate":0,"index":3065},{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":3068},{"krate":0,"index":3069}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361870,"byte_end":361884,"line_start":2345,"line_end":2345,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3074},{"krate":0,"index":3075},{"krate":0,"index":3077}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362316,"byte_end":362330,"line_start":2364,"line_end":2364,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3082}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362638,"byte_end":362652,"line_start":2377,"line_end":2377,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362732,"byte_end":362737,"line_start":2379,"line_end":2379,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3093},{"krate":0,"index":3094},{"krate":0,"index":3095}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364115,"byte_end":364121,"line_start":15,"line_end":15,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3190}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364403,"byte_end":364409,"line_start":24,"line_end":24,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3194},{"krate":0,"index":3195}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364520,"byte_end":364526,"line_start":31,"line_end":31,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3200},{"krate":0,"index":3201}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364694,"byte_end":364700,"line_start":41,"line_end":41,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3206}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364850,"byte_end":364856,"line_start":50,"line_end":50,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3213}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":365611,"byte_end":365617,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3220},{"krate":0,"index":3221}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":367227,"byte_end":367235,"line_start":9,"line_end":9,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3244}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":367538,"byte_end":367546,"line_start":24,"line_end":24,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3251}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":368357,"byte_end":368358,"line_start":59,"line_end":59,"column_start":27,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":368393,"byte_end":368399,"line_start":61,"line_end":61,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3259}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_utils.rs","byte_start":370332,"byte_end":370333,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/traits_graph.rs","byte_start":370823,"byte_end":370828,"line_start":16,"line_end":16,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374034,"byte_end":374043,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7096,"byte_end":7105,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3476},{"krate":0,"index":3477}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7876,"byte_end":7884,"line_start":232,"line_end":232,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3484}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7972,"byte_end":7982,"line_start":239,"line_end":239,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5517,"byte_end":5522,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5545,"byte_end":5549,"line_start":134,"line_end":134,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":680}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5560,"byte_end":5563,"line_start":136,"line_end":136,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":776}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5573,"byte_end":5577,"line_start":137,"line_end":137,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1020}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109117,"byte_end":109122,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1021}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109132,"byte_end":109144,"line_start":8,"line_end":8,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1072}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109154,"byte_end":109162,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1110}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109172,"byte_end":109182,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1151}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109192,"byte_end":109208,"line_start":11,"line_end":11,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1219}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109218,"byte_end":109232,"line_start":12,"line_end":12,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":1308}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109242,"byte_end":109253,"line_start":13,"line_end":13,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1342}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109263,"byte_end":109278,"line_start":14,"line_end":14,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":1541}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109288,"byte_end":109296,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1578}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109306,"byte_end":109318,"line_start":16,"line_end":16,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1693}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":109328,"byte_end":109332,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1725}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5587,"byte_end":5590,"line_start":138,"line_end":138,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1990}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5600,"byte_end":5603,"line_start":139,"line_end":139,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2337}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5921,"byte_end":5930,"line_start":154,"line_end":154,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3303}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5951,"byte_end":5959,"line_start":157,"line_end":157,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3332}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":5969,"byte_end":5976,"line_start":158,"line_end":158,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3351}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":12959,"byte_end":12968,"line_start":15,"line_end":15,"column_start":38,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3519},"to":{"krate":2,"index":2915}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":13125,"byte_end":13134,"line_start":22,"line_end":22,"column_start":31,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3519},"to":{"krate":2,"index":2920}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":13183,"byte_end":13192,"line_start":24,"line_end":24,"column_start":39,"column_end":48},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3519},"to":{"krate":2,"index":2961}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/scored.rs","byte_start":13358,"byte_end":13367,"line_start":31,"line_end":31,"column_start":32,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3519},"to":{"krate":2,"index":2951}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":34580,"byte_end":34587,"line_start":60,"line_end":60,"column_start":9,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35346,"byte_end":35353,"line_start":94,"line_end":94,"column_start":25,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3590},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":35783,"byte_end":35789,"line_start":113,"line_end":113,"column_start":41,"column_end":47},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":40991},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/dfsvisit.rs","byte_start":36219,"byte_end":36226,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3590},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43351,"byte_end":43354,"line_start":44,"line_end":44,"column_start":25,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3607},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":43529,"byte_end":43532,"line_start":56,"line_end":56,"column_start":13,"column_end":16},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":45896,"byte_end":45908,"line_start":140,"line_end":140,"column_start":25,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3620},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":46129,"byte_end":46141,"line_start":153,"line_end":153,"column_start":13,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49282,"byte_end":49285,"line_start":260,"line_end":260,"column_start":25,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3634},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":49465,"byte_end":49468,"line_start":272,"line_end":272,"column_start":13,"column_end":16},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50816,"byte_end":50820,"line_start":319,"line_end":319,"column_start":25,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3643},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":50995,"byte_end":50999,"line_start":331,"line_end":331,"column_start":13,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54473,"byte_end":54483,"line_start":442,"line_end":442,"column_start":12,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":54765,"byte_end":54775,"line_start":460,"line_end":460,"column_start":25,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3652},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55184,"byte_end":55187,"line_start":481,"line_end":481,"column_start":23,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3607},"to":{"krate":0,"index":187}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55398,"byte_end":55410,"line_start":491,"line_end":491,"column_start":23,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3620},"to":{"krate":0,"index":187}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55621,"byte_end":55624,"line_start":501,"line_end":501,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3634},"to":{"krate":0,"index":187}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/traversal.rs","byte_start":55835,"byte_end":55839,"line_start":511,"line_end":511,"column_start":23,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3643},"to":{"krate":0,"index":187}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18302,"byte_end":18306,"line_start":104,"line_end":104,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18309,"byte_end":18318,"line_start":104,"line_end":104,"column_start":28,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":18647,"byte_end":18655,"line_start":115,"line_end":115,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":3680}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":19316,"byte_end":19329,"line_start":135,"line_end":135,"column_start":35,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":3680},"to":{"krate":0,"index":3689}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20029,"byte_end":20047,"line_start":157,"line_end":157,"column_start":23,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3750},"to":{"krate":0,"index":3693}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20050,"byte_end":20063,"line_start":157,"line_end":157,"column_start":44,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":3680},"to":{"krate":0,"index":3693}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20974,"byte_end":20983,"line_start":183,"line_end":183,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3693},"to":{"krate":0,"index":3702}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":20986,"byte_end":21007,"line_start":183,"line_end":183,"column_start":43,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":3689},"to":{"krate":0,"index":3702}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21334,"byte_end":21342,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":3711}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21662,"byte_end":21671,"line_start":208,"line_end":208,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3725}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":21941,"byte_end":21945,"line_start":221,"line_end":221,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22688,"byte_end":22692,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":272}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22904,"byte_end":22908,"line_start":267,"line_end":267,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":3725},"to":{"krate":0,"index":3739}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":22911,"byte_end":22930,"line_start":267,"line_end":267,"column_start":39,"column_end":58},"kind":"SuperTrait","from":{"krate":0,"index":3711},"to":{"krate":0,"index":3739}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23767,"byte_end":23771,"line_start":309,"line_end":309,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":3725},"to":{"krate":0,"index":3750}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":23774,"byte_end":23782,"line_start":309,"line_end":309,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":3750}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24194,"byte_end":24203,"line_start":323,"line_end":323,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3761}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":24579,"byte_end":24588,"line_start":340,"line_end":340,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3769}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25212,"byte_end":25221,"line_start":357,"line_end":357,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":25824,"byte_end":25833,"line_start":374,"line_end":374,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3791}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26151,"byte_end":26164,"line_start":387,"line_end":387,"column_start":34,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":3769},"to":{"krate":0,"index":3798}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26167,"byte_end":26176,"line_start":387,"line_end":387,"column_start":50,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":3791},"to":{"krate":0,"index":3798}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26579,"byte_end":26590,"line_start":403,"line_end":403,"column_start":27,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":20,"index":245},"to":{"krate":0,"index":292}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":26806,"byte_end":26813,"line_start":415,"line_end":415,"column_start":28,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":2031},"to":{"krate":0,"index":292}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27177,"byte_end":27186,"line_start":431,"line_end":431,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3803}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":27829,"byte_end":27838,"line_start":450,"line_end":450,"column_start":32,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3814}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/mod.rs","byte_start":28418,"byte_end":28427,"line_start":469,"line_end":469,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3825}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56675,"byte_end":56676,"line_start":21,"line_end":21,"column_start":30,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":376},"to":{"krate":0,"index":372}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":56870,"byte_end":56881,"line_start":31,"line_end":31,"column_start":27,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":20,"index":245},"to":{"krate":0,"index":372}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57095,"byte_end":57102,"line_start":41,"line_end":41,"column_start":30,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":2031},"to":{"krate":0,"index":372}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":57785,"byte_end":57797,"line_start":74,"line_end":74,"column_start":12,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58048,"byte_end":58060,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3831},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":58751,"byte_end":58772,"line_start":116,"line_end":116,"column_start":29,"column_end":50},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3848},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":60755,"byte_end":60772,"line_start":191,"line_end":191,"column_start":29,"column_end":46},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3865},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":61916,"byte_end":61942,"line_start":236,"line_end":236,"column_start":32,"column_end":58},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3882},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":63579,"byte_end":63596,"line_start":298,"line_end":298,"column_start":32,"column_end":49},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":64304,"byte_end":64316,"line_start":325,"line_end":325,"column_start":24,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3831},"to":{"krate":0,"index":4150}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65295,"byte_end":65296,"line_start":361,"line_end":361,"column_start":30,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":490},"to":{"krate":0,"index":486}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":65803,"byte_end":65815,"line_start":381,"line_end":381,"column_start":12,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":66076,"byte_end":66088,"line_start":392,"line_end":392,"column_start":26,"column_end":38},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3951},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":67157,"byte_end":67178,"line_start":439,"line_end":439,"column_start":29,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3968},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69137,"byte_end":69154,"line_start":518,"line_end":518,"column_start":32,"column_end":49},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3984},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/filter.rs","byte_start":69809,"byte_end":69838,"line_start":546,"line_end":546,"column_start":29,"column_end":58},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4004},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71831,"byte_end":71839,"line_start":16,"line_end":16,"column_start":34,"column_end":42},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":71937,"byte_end":71945,"line_start":21,"line_end":21,"column_start":32,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72033,"byte_end":72041,"line_start":25,"line_end":25,"column_start":27,"column_end":35},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3680}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72279,"byte_end":72287,"line_start":35,"line_end":35,"column_start":35,"column_end":43},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3689}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72548,"byte_end":72556,"line_start":45,"line_end":45,"column_start":23,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3693}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":72824,"byte_end":72832,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3702}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73142,"byte_end":73150,"line_start":69,"line_end":69,"column_start":34,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3803}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73457,"byte_end":73470,"line_start":85,"line_end":85,"column_start":22,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4084},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":73874,"byte_end":73895,"line_start":103,"line_end":103,"column_start":9,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74201,"byte_end":74222,"line_start":116,"line_end":116,"column_start":21,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4093},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":74640,"byte_end":74648,"line_start":137,"line_end":137,"column_start":32,"column_end":40},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4068},"to":{"krate":0,"index":3750}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/visit/reversed.rs","byte_start":75102,"byte_end":75124,"line_start":156,"line_end":156,"column_start":22,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4105},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":76532,"byte_end":76536,"line_start":15,"line_end":15,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":3725},"to":{"krate":0,"index":4150}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77068,"byte_end":77075,"line_start":35,"line_end":35,"column_start":24,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":4150},"to":{"krate":0,"index":4168}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77489,"byte_end":77493,"line_start":46,"line_end":46,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":3725},"to":{"krate":0,"index":704}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":77496,"byte_end":77505,"line_start":46,"line_end":46,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":3791},"to":{"krate":0,"index":704}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78194,"byte_end":78199,"line_start":69,"line_end":69,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":704},"to":{"krate":0,"index":708}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78202,"byte_end":78209,"line_start":69,"line_end":69,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3241},"to":{"krate":0,"index":708}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78301,"byte_end":78306,"line_start":73,"line_end":73,"column_start":29,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3725}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78432,"byte_end":78437,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":4150}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":78754,"byte_end":78759,"line_start":94,"line_end":94,"column_start":35,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":4168}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":79854,"byte_end":79859,"line_start":135,"line_end":135,"column_start":30,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":704}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":81872,"byte_end":81877,"line_start":222,"line_end":222,"column_start":31,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":708}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":83056,"byte_end":83062,"line_start":272,"line_end":272,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":708},"to":{"krate":0,"index":745}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":84501,"byte_end":84506,"line_start":325,"line_end":325,"column_start":37,"column_end":42},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":745}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":85543,"byte_end":85551,"line_start":370,"line_end":370,"column_start":34,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":8603},"to":{"krate":0,"index":759}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86420,"byte_end":86421,"line_start":394,"line_end":394,"column_start":49,"column_end":50},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":759}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/data.rs","byte_start":86792,"byte_end":86806,"line_start":409,"line_end":409,"column_start":31,"column_end":45},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4212},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91294,"byte_end":91307,"line_start":71,"line_end":71,"column_start":37,"column_end":50},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4352},"to":{"krate":2,"index":3273}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91359,"byte_end":91372,"line_start":72,"line_end":72,"column_start":38,"column_end":51},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4352},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":91559,"byte_end":91572,"line_start":81,"line_end":81,"column_start":47,"column_end":60},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4352},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":92176,"byte_end":92187,"line_start":107,"line_end":107,"column_start":41,"column_end":52},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4392},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":93993,"byte_end":93997,"line_start":165,"line_end":165,"column_start":24,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":99272,"byte_end":99276,"line_start":327,"line_end":327,"column_start":34,"column_end":38},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":704}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":101002,"byte_end":101016,"line_start":377,"line_end":377,"column_start":32,"column_end":46},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4447},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":101640,"byte_end":101644,"line_start":399,"line_end":399,"column_start":28,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4435},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102114,"byte_end":102118,"line_start":415,"line_end":415,"column_start":34,"column_end":38},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102255,"byte_end":102259,"line_start":423,"line_end":423,"column_start":34,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3803}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":102784,"byte_end":102793,"line_start":444,"line_end":444,"column_start":40,"column_end":49},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":828},"to":{"krate":0,"index":272}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":103254,"byte_end":103258,"line_start":463,"line_end":463,"column_start":40,"column_end":44},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3725}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":104526,"byte_end":104540,"line_start":502,"line_end":502,"column_start":38,"column_end":52},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4447},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106119,"byte_end":106123,"line_start":556,"line_end":556,"column_start":45,"column_end":49},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3761}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106265,"byte_end":106269,"line_start":563,"line_end":563,"column_start":38,"column_end":42},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3791}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106475,"byte_end":106479,"line_start":572,"line_end":572,"column_start":38,"column_end":42},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3825}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":106706,"byte_end":106710,"line_start":581,"line_end":581,"column_start":49,"column_end":53},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3769}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107027,"byte_end":107031,"line_start":595,"line_end":595,"column_start":56,"column_end":60},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3798}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107078,"byte_end":107082,"line_start":597,"line_end":597,"column_start":36,"column_end":40},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":4150}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":107493,"byte_end":107497,"line_start":614,"line_end":614,"column_start":39,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":4168}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/adj.rs","byte_start":108192,"byte_end":108196,"line_start":635,"line_end":635,"column_start":36,"column_end":40},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4435},"to":{"krate":0,"index":3814}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/astar.rs","byte_start":141768,"byte_end":141779,"line_start":150,"line_end":150,"column_start":9,"column_end":20},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":155095,"byte_end":155105,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157098,"byte_end":157112,"line_start":103,"line_end":103,"column_start":26,"column_end":40},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4504},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/dominators.rs","byte_start":157609,"byte_end":157624,"line_start":128,"line_end":128,"column_start":26,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4517},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":169869,"byte_end":169885,"line_start":190,"line_end":190,"column_start":30,"column_end":46},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":4531},"to":{"krate":2,"index":3571}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":170077,"byte_end":170093,"line_start":198,"line_end":198,"column_start":33,"column_end":49},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4531},"to":{"krate":2,"index":3575}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":171295,"byte_end":171302,"line_start":238,"line_end":238,"column_start":6,"column_end":13},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":174656,"byte_end":174671,"line_start":352,"line_end":352,"column_start":20,"column_end":35},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":4583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/feedback_arc_set.rs","byte_start":175195,"byte_end":175205,"line_start":372,"line_end":372,"column_start":31,"column_end":41},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":4562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":183581,"byte_end":183589,"line_start":45,"line_end":45,"column_start":17,"column_end":25},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":4599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":187866,"byte_end":187881,"line_start":161,"line_end":161,"column_start":64,"column_end":79},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1412},"to":{"krate":0,"index":1414}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":188146,"byte_end":188147,"line_start":172,"line_end":172,"column_start":45,"column_end":46},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1427},"to":{"krate":0,"index":1414}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":188996,"byte_end":189011,"line_start":203,"line_end":203,"column_start":64,"column_end":79},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1412},"to":{"krate":0,"index":1430}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":189375,"byte_end":189376,"line_start":220,"line_end":220,"column_start":45,"column_end":46},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1443},"to":{"krate":0,"index":1430}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":206323,"byte_end":206335,"line_start":701,"line_end":701,"column_start":38,"column_end":50},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/isomorphism.rs","byte_start":207257,"byte_end":207269,"line_start":734,"line_end":734,"column_start":51,"column_end":63},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219559,"byte_end":219567,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":219774,"byte_end":219782,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":221552,"byte_end":221560,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":222003,"byte_end":222016,"line_start":106,"line_end":106,"column_start":18,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":3769},"to":{"krate":0,"index":1634}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":222272,"byte_end":222273,"line_start":113,"line_end":113,"column_start":38,"column_end":39},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1639},"to":{"krate":0,"index":1634}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":222946,"byte_end":222958,"line_start":140,"line_end":140,"column_start":22,"column_end":34},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1643},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":223486,"byte_end":223498,"line_start":166,"line_end":166,"column_start":22,"column_end":34},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1653},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":226949,"byte_end":226954,"line_start":278,"line_end":278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":4656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":227558,"byte_end":227563,"line_start":306,"line_end":306,"column_start":32,"column_end":37},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":4656},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/matching.rs","byte_start":227658,"byte_end":227663,"line_start":312,"line_end":312,"column_start":34,"column_end":39},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":4656},"to":{"krate":2,"index":2915}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115459,"byte_end":115467,"line_start":217,"line_end":217,"column_start":13,"column_end":21},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":115705,"byte_end":115713,"line_start":230,"line_end":230,"column_start":25,"column_end":33},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4678},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119174,"byte_end":119183,"line_start":359,"line_end":359,"column_start":21,"column_end":30},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":4697},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":119253,"byte_end":119262,"line_start":365,"line_end":365,"column_start":9,"column_end":18},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":130698,"byte_end":130713,"line_start":694,"line_end":694,"column_start":22,"column_end":37},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4706},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":132575,"byte_end":132580,"line_start":748,"line_end":748,"column_start":9,"column_end":14},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":4720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134763,"byte_end":134768,"line_start":821,"line_end":821,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":10295},"to":{"krate":0,"index":1972}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134771,"byte_end":134781,"line_start":821,"line_end":821,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2961},"to":{"krate":0,"index":1972}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134784,"byte_end":134787,"line_start":821,"line_end":821,"column_start":41,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":3331},"to":{"krate":0,"index":1972}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134811,"byte_end":134818,"line_start":821,"line_end":821,"column_start":68,"column_end":75},"kind":"SuperTrait","from":{"krate":2,"index":3241},"to":{"krate":0,"index":1972}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134821,"byte_end":134826,"line_start":821,"line_end":821,"column_start":78,"column_end":83},"kind":"SuperTrait","from":{"krate":2,"index":2882},"to":{"krate":0,"index":1972}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134851,"byte_end":134852,"line_start":823,"line_end":823,"column_start":21,"column_end":22},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1974},"to":{"krate":0,"index":1972}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134978,"byte_end":134985,"line_start":826,"line_end":826,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":1972},"to":{"krate":0,"index":1975}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":134988,"byte_end":134992,"line_start":826,"line_end":826,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":1975}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135318,"byte_end":135325,"line_start":849,"line_end":849,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1972},"to":{"krate":0,"index":1984}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/algo/mod.rs","byte_start":135338,"byte_end":135341,"line_start":849,"line_end":849,"column_start":47,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":3336},"to":{"krate":0,"index":1984}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253021,"byte_end":253024,"line_start":60,"line_end":60,"column_start":32,"column_end":35},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":4803},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253190,"byte_end":253193,"line_start":70,"line_end":70,"column_start":51,"column_end":54},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4803},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":253526,"byte_end":253529,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":254869,"byte_end":254872,"line_start":137,"line_end":137,"column_start":16,"column_end":19},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":258483,"byte_end":258486,"line_start":234,"line_end":234,"column_start":20,"column_end":23},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263761,"byte_end":263774,"line_start":413,"line_end":413,"column_start":37,"column_end":50},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4847},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263880,"byte_end":263893,"line_start":419,"line_end":419,"column_start":36,"column_end":49},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4847},"to":{"krate":2,"index":3273}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":263933,"byte_end":263946,"line_start":421,"line_end":421,"column_start":21,"column_end":34},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264249,"byte_end":264262,"line_start":434,"line_end":434,"column_start":33,"column_end":46},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":4847},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":264688,"byte_end":264693,"line_start":457,"line_end":457,"column_start":34,"column_end":39},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":4826},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":265283,"byte_end":265286,"line_start":481,"line_end":481,"column_start":29,"column_end":32},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3725}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":266310,"byte_end":266324,"line_start":521,"line_end":521,"column_start":34,"column_end":48},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":4863},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267454,"byte_end":267457,"line_start":563,"line_end":563,"column_start":34,"column_end":37},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":267673,"byte_end":267676,"line_start":574,"line_end":574,"column_start":34,"column_end":37},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3803}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":268155,"byte_end":268164,"line_start":596,"line_end":596,"column_start":27,"column_end":36},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":4887},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269052,"byte_end":269055,"line_start":632,"line_end":632,"column_start":38,"column_end":41},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3769}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269385,"byte_end":269388,"line_start":648,"line_end":648,"column_start":45,"column_end":48},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3798}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269495,"byte_end":269498,"line_start":655,"line_end":655,"column_start":45,"column_end":48},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4803},"to":{"krate":2,"index":3571}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":269722,"byte_end":269725,"line_start":667,"line_end":667,"column_start":48,"column_end":51},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4803},"to":{"krate":2,"index":3575}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270036,"byte_end":270051,"line_start":683,"line_end":683,"column_start":23,"column_end":38},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4899},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270655,"byte_end":270658,"line_start":712,"line_end":712,"column_start":34,"column_end":37},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3791}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":270825,"byte_end":270828,"line_start":722,"line_end":722,"column_start":34,"column_end":37},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3825}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271006,"byte_end":271009,"line_start":733,"line_end":733,"column_start":34,"column_end":37},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4803},"to":{"krate":0,"index":3761}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":271715,"byte_end":271729,"line_start":763,"line_end":763,"column_start":30,"column_end":44},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4909},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":272059,"byte_end":272073,"line_start":778,"line_end":778,"column_start":41,"column_end":55},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4909},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/csr.rs","byte_start":272307,"byte_end":272321,"line_start":789,"line_end":789,"column_start":39,"column_end":53},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4909},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":283280,"byte_end":283283,"line_start":64,"line_end":64,"column_start":13,"column_end":16},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":285543,"byte_end":285546,"line_start":147,"line_end":147,"column_start":13,"column_end":16},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":287498,"byte_end":287501,"line_start":204,"line_end":204,"column_start":30,"column_end":33},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2367},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":287818,"byte_end":287821,"line_start":215,"line_end":215,"column_start":28,"column_end":31},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2367},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":288173,"byte_end":288180,"line_start":229,"line_end":229,"column_start":24,"column_end":31},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2402},"to":{"krate":2,"index":10245}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":288763,"byte_end":288770,"line_start":254,"line_end":254,"column_start":26,"column_end":33},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2410},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/dot.rs","byte_start":289147,"byte_end":289152,"line_start":270,"line_end":270,"column_start":33,"column_end":38},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2417},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292741,"byte_end":292745,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2503}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292748,"byte_end":292755,"line_start":34,"line_end":34,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3241},"to":{"krate":0,"index":2503}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292758,"byte_end":292762,"line_start":34,"line_end":34,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":10533},"to":{"krate":0,"index":2503}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292765,"byte_end":292768,"line_start":34,"line_end":34,"column_start":53,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2951},"to":{"krate":0,"index":2503}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":292776,"byte_end":292781,"line_start":34,"line_end":34,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":10295},"to":{"krate":0,"index":2503}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294089,"byte_end":294098,"line_start":104,"line_end":104,"column_start":21,"column_end":30},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294479,"byte_end":294488,"line_start":125,"line_end":125,"column_start":42,"column_end":51},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4958},"to":{"krate":0,"index":2503}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294727,"byte_end":294736,"line_start":137,"line_end":137,"column_start":34,"column_end":43},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4958},"to":{"krate":2,"index":3169}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":294840,"byte_end":294849,"line_start":143,"line_end":143,"column_start":37,"column_end":46},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4958},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295389,"byte_end":295398,"line_start":163,"line_end":163,"column_start":21,"column_end":30},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295883,"byte_end":295892,"line_start":186,"line_end":186,"column_start":34,"column_end":43},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4991},"to":{"krate":2,"index":3169}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":295996,"byte_end":296005,"line_start":192,"line_end":192,"column_start":37,"column_end":46},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4991},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296832,"byte_end":296836,"line_start":224,"line_end":224,"column_start":23,"column_end":27},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5024},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":296946,"byte_end":296950,"line_start":232,"line_end":232,"column_start":24,"column_end":28},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":5024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297452,"byte_end":297456,"line_start":250,"line_end":250,"column_start":23,"column_end":27},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":5035},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":297572,"byte_end":297576,"line_start":258,"line_end":258,"column_start":24,"column_end":28},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":301608,"byte_end":301613,"line_start":364,"line_end":364,"column_start":41,"column_end":46},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":302028,"byte_end":302033,"line_start":384,"line_end":384,"column_start":35,"column_end":40},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":303884,"byte_end":303889,"line_start":453,"line_end":453,"column_start":12,"column_end":17},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304296,"byte_end":304301,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":304731,"byte_end":304736,"line_start":481,"line_end":481,"column_start":20,"column_end":25},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":339478,"byte_end":339487,"line_start":1471,"line_end":1471,"column_start":38,"column_end":47},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5048},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":340867,"byte_end":340876,"line_start":1518,"line_end":1518,"column_start":30,"column_end":39},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5068},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":341748,"byte_end":341757,"line_start":1547,"line_end":1547,"column_start":27,"column_end":36},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":5068},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":341871,"byte_end":341880,"line_start":1554,"line_end":1554,"column_start":17,"column_end":26},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":5068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":342710,"byte_end":342724,"line_start":1588,"line_end":1588,"column_start":17,"column_end":31},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":344277,"byte_end":344282,"line_start":1651,"line_end":1651,"column_start":34,"column_end":39},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":5082},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":346867,"byte_end":346882,"line_start":1728,"line_end":1728,"column_start":34,"column_end":49},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":5099},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347456,"byte_end":347461,"line_start":1755,"line_end":1755,"column_start":31,"column_end":36},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":5082},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":347954,"byte_end":347965,"line_start":1775,"line_end":1775,"column_start":30,"column_end":41},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2805},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348500,"byte_end":348514,"line_start":1795,"line_end":1795,"column_start":30,"column_end":44},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":5119},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":348984,"byte_end":348995,"line_start":1815,"line_end":1815,"column_start":30,"column_end":41},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2826},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349531,"byte_end":349545,"line_start":1836,"line_end":1836,"column_start":30,"column_end":44},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":5129},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":349963,"byte_end":349968,"line_start":1854,"line_end":1854,"column_start":45,"column_end":50},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3571}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350304,"byte_end":350309,"line_start":1868,"line_end":1868,"column_start":48,"column_end":53},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3575}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350637,"byte_end":350642,"line_start":1881,"line_end":1881,"column_start":45,"column_end":50},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3571}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":350978,"byte_end":350983,"line_start":1895,"line_end":1895,"column_start":48,"column_end":53},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3575}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351223,"byte_end":351228,"line_start":1906,"line_end":1906,"column_start":32,"column_end":37},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2574},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351424,"byte_end":351428,"line_start":1917,"line_end":1917,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2879}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351569,"byte_end":351578,"line_start":1924,"line_end":1924,"column_start":36,"column_end":45},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4958},"to":{"krate":0,"index":2879}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":351810,"byte_end":351819,"line_start":1937,"line_end":1937,"column_start":36,"column_end":45},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4991},"to":{"krate":0,"index":2879}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353242,"byte_end":353255,"line_start":1990,"line_end":1990,"column_start":20,"column_end":33},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2890},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":353450,"byte_end":353463,"line_start":2002,"line_end":2002,"column_start":21,"column_end":34},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355280,"byte_end":355291,"line_start":2058,"line_end":2058,"column_start":34,"column_end":45},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":5139},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355554,"byte_end":355565,"line_start":2070,"line_end":2070,"column_start":45,"column_end":56},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":5139},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355718,"byte_end":355729,"line_start":2076,"line_end":2076,"column_start":43,"column_end":54},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":5139},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":355940,"byte_end":355951,"line_start":2085,"line_end":2085,"column_start":34,"column_end":45},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5149},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356214,"byte_end":356225,"line_start":2097,"line_end":2097,"column_start":45,"column_end":56},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":5149},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356378,"byte_end":356389,"line_start":2103,"line_end":2103,"column_start":43,"column_end":54},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":5149},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356617,"byte_end":356630,"line_start":2113,"line_end":2113,"column_start":38,"column_end":51},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":5159},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356733,"byte_end":356746,"line_start":2119,"line_end":2119,"column_start":37,"column_end":50},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":5159},"to":{"krate":2,"index":3273}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":356803,"byte_end":356816,"line_start":2121,"line_end":2121,"column_start":42,"column_end":55},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5159},"to":{"krate":2,"index":2915}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357003,"byte_end":357008,"line_start":2130,"line_end":2130,"column_start":41,"column_end":46},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357159,"byte_end":357164,"line_start":2138,"line_end":2138,"column_start":41,"column_end":46},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3803}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357508,"byte_end":357513,"line_start":2154,"line_end":2154,"column_start":41,"column_end":46},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3761}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":357905,"byte_end":357910,"line_start":2173,"line_end":2173,"column_start":41,"column_end":46},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3791}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358085,"byte_end":358090,"line_start":2183,"line_end":2183,"column_start":45,"column_end":50},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3769}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":358479,"byte_end":358484,"line_start":2202,"line_end":2202,"column_start":52,"column_end":57},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3798}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":359512,"byte_end":359517,"line_start":2243,"line_end":2243,"column_start":41,"column_end":46},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3825}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360247,"byte_end":360261,"line_start":2274,"line_end":2274,"column_start":30,"column_end":44},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":5172},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360624,"byte_end":360638,"line_start":2291,"line_end":2291,"column_start":41,"column_end":55},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":5172},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360879,"byte_end":360893,"line_start":2302,"line_end":2302,"column_start":39,"column_end":53},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":5172},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":360945,"byte_end":360958,"line_start":2304,"line_end":2304,"column_start":17,"column_end":30},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":5159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361261,"byte_end":361274,"line_start":2317,"line_end":2317,"column_start":36,"column_end":49},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":5159},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":361870,"byte_end":361884,"line_start":2345,"line_end":2345,"column_start":30,"column_end":44},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":5187},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362316,"byte_end":362330,"line_start":2364,"line_end":2364,"column_start":41,"column_end":55},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":5187},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362638,"byte_end":362652,"line_start":2377,"line_end":2377,"column_start":39,"column_end":53},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5187},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/mod.rs","byte_start":362732,"byte_end":362737,"line_start":2379,"line_end":2379,"column_start":45,"column_end":50},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364115,"byte_end":364121,"line_start":15,"line_end":15,"column_start":13,"column_end":19},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364403,"byte_end":364409,"line_start":24,"line_end":24,"column_start":23,"column_end":29},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":3222},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364520,"byte_end":364526,"line_start":31,"line_end":31,"column_start":29,"column_end":35},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":3222},"to":{"krate":2,"index":3571}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364694,"byte_end":364700,"line_start":41,"line_end":41,"column_start":32,"column_end":38},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3222},"to":{"krate":2,"index":3575}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":364850,"byte_end":364856,"line_start":50,"line_end":50,"column_start":24,"column_end":30},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":3222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/graph_impl/frozen.rs","byte_start":365611,"byte_end":365617,"line_start":83,"line_end":83,"column_start":27,"column_end":33},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":3222},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":367227,"byte_end":367235,"line_start":9,"line_end":9,"column_start":37,"column_end":45},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3234},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":367538,"byte_end":367546,"line_start":24,"line_end":24,"column_start":24,"column_end":32},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":3245},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":368121,"byte_end":368129,"line_start":47,"line_end":47,"column_start":26,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":8603},"to":{"krate":0,"index":3252}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":368357,"byte_end":368358,"line_start":59,"line_end":59,"column_start":27,"column_end":28},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3255},"to":{"krate":0,"index":3252}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_format.rs","byte_start":368393,"byte_end":368399,"line_start":61,"line_end":61,"column_start":13,"column_end":19},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":5300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_utils.rs","byte_start":369482,"byte_end":369490,"line_start":1,"line_end":1,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":8603},"to":{"krate":0,"index":3263}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/iter_utils.rs","byte_start":370332,"byte_end":370333,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":3263}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/traits_graph.rs","byte_start":370823,"byte_end":370828,"line_start":16,"line_end":16,"column_start":43,"column_end":48},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2574},"to":{"krate":0,"index":3814}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/unionfind.rs","byte_start":374034,"byte_end":374043,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7096,"byte_end":7105,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5323},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7876,"byte_end":7884,"line_start":232,"line_end":232,"column_start":19,"column_end":27},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":5348},"to":{"krate":0,"index":3481}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.6.3/src/lib.rs","byte_start":7972,"byte_end":7982,"line_start":239,"line_end":239,"column_start":19,"column_end":29},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":5354},"to":{"krate":0,"index":3481}}]}