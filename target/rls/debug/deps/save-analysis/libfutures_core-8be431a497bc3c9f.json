{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28","program":"/Users/es/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","futures_core","--edition=2018","/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=8be431a497bc3c9f","-C","extra-filename=-8be431a497bc3c9f","--out-dir","/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps","-L","dependency=/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/es/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/es/go/github.com/esh2n/grapevineer/target/rls/debug/deps/libfutures_core-8be431a497bc3c9f.rmeta"},"prelude":{"crate_id":{"name":"futures_core","disambiguator":[9123476880726111055,0]},"crate_root":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src","external_crates":[{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16128539464339909492,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","num":2,"id":{"name":"core","disambiguator":[5119190964148522055,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10836880961308110442,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9122960886372739080,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16262469955255852816,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6458319553461162962,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12001007181761242293,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17631836945948346775,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[14397519445266417684,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8668729914222175237,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6081650140881955662,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5498968616666872476,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2537156866219993108,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[16178185567501436822,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3784531562979233881,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17755498883195052578,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11111166150786070161,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[518337477295170700,0]}},{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[6962753159787162907,0]}}],"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":0,"byte_end":800,"line_start":1,"line_end":27,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":13770},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":935,"byte_end":941,"line_start":8,"line_end":8,"column_start":23,"column_end":29},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":649,"byte_end":660,"line_start":20,"line_end":20,"column_start":24,"column_end":35},"alias_span":null,"name":"FusedFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":13770},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":662,"byte_end":668,"line_start":20,"line_end":20,"column_start":37,"column_end":43},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":670,"byte_end":679,"line_start":20,"line_end":20,"column_start":45,"column_end":54},"alias_span":null,"name":"TryFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":110},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":740,"byte_end":751,"line_start":24,"line_end":24,"column_start":24,"column_end":35},"alias_span":null,"name":"FusedStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":753,"byte_end":759,"line_start":24,"line_end":24,"column_start":37,"column_end":43},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":127},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":761,"byte_end":770,"line_start":24,"line_end":24,"column_start":45,"column_end":54},"alias_span":null,"name":"TryStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":197},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/mod.rs","byte_start":12675,"byte_end":12686,"line_start":4,"line_end":4,"column_start":29,"column_end":40},"alias_span":null,"name":"AtomicWaker","value":"","parent":{"krate":0,"index":170}},{"kind":"Use","ref_id":{"krate":2,"index":14072},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12152,"byte_end":12159,"line_start":10,"line_end":10,"column_start":22,"column_end":29},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":167}},{"kind":"Use","ref_id":{"krate":2,"index":43815},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12161,"byte_end":12165,"line_start":10,"line_end":10,"column_start":31,"column_end":35},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":167}},{"kind":"Use","ref_id":{"krate":2,"index":43851},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12167,"byte_end":12175,"line_start":10,"line_end":10,"column_start":37,"column_end":45},"alias_span":null,"name":"RawWaker","value":"","parent":{"krate":0,"index":167}},{"kind":"Use","ref_id":{"krate":2,"index":43860},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12177,"byte_end":12191,"line_start":10,"line_end":10,"column_start":47,"column_end":61},"alias_span":null,"name":"RawWakerVTable","value":"","parent":{"krate":0,"index":167}},{"kind":"Use","ref_id":{"krate":2,"index":14082},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12193,"byte_end":12198,"line_start":10,"line_end":10,"column_start":63,"column_end":68},"alias_span":null,"name":"Waker","value":"","parent":{"krate":0,"index":167}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":0,"byte_end":800,"line_start":1,"line_end":27,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":167}],"decl_id":null,"docs":" Core traits and types for asynchronous operations in Rust.\n","sig":null,"attributes":[{"value":"/ Core traits and types for asynchronous operations in Rust.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":107,"byte_end":195,"line_start":4,"line_end":4,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::future","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":55}],"decl_id":null,"docs":" Futures.\n","sig":null,"attributes":[{"value":"/ Futures.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":802,"byte_end":814,"line_start":1,"line_end":1,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1119,"byte_end":1128,"line_start":13,"line_end":13,"column_start":10,"column_end":19},"name":"BoxFuture","qualname":"::future::BoxFuture","value":"Pin<alloc::boxed::Box<dyn Future<Output = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Future`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Future`] for use in cases where you can't","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":944,"byte_end":1018,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1019,"byte_end":1083,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1084,"byte_end":1109,"line_start":12,"line_end":12,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":24},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1287,"byte_end":1301,"line_start":17,"line_end":17,"column_start":10,"column_end":24},"name":"LocalBoxFuture","qualname":"::future::LocalBoxFuture","value":"Pin<alloc::boxed::Box<dyn Future<Output = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxFuture`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxFuture`, but without the `Send` requirement.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1199,"byte_end":1251,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1252,"byte_end":1277,"line_start":16,"line_end":16,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1828,"byte_end":1839,"line_start":27,"line_end":27,"column_start":11,"column_end":22},"name":"FusedFuture","qualname":"::future::FusedFuture","value":"FusedFuture: Future","parent":null,"children":[{"krate":0,"index":28}],"decl_id":null,"docs":" A future which tracks whether or not the underlying future\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A future which tracks whether or not the underlying future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1365,"byte_end":1427,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1428,"byte_end":1459,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1460,"byte_end":1463,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1464,"byte_end":1542,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll` (or `try_poll`) returned","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1543,"byte_end":1611,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/ `Poll::Ready`. However, `is_terminated` may also return `true` if a future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1612,"byte_end":1690,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ has become inactive and can no longer make progress and should be ignored","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1691,"byte_end":1768,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ or dropped rather than being `poll`ed again.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1769,"byte_end":1817,"line_start":26,"line_end":26,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1933,"byte_end":1946,"line_start":29,"line_end":29,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::future::FusedFuture::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Returns `true` if the underlying future should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the underlying future should no longer be polled.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1854,"byte_end":1925,"line_start":28,"line_end":28,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2036,"byte_end":2049,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"<&'_ mut F as future::FusedFuture>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":{"krate":0,"index":28},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2226,"byte_end":2239,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"<Pin<P> as future::FusedFuture>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":{"krate":0,"index":28},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2388,"byte_end":2394,"line_start":51,"line_end":51,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::future::private_try_future::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2618,"byte_end":2627,"line_start":58,"line_end":58,"column_start":11,"column_end":20},"name":"TryFuture","qualname":"::future::TryFuture","value":"TryFuture: Future + private_try_future::Sealed","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" A convenience for futures that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for futures that return `Result` values that includes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2484,"byte_end":2555,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2556,"byte_end":2607,"line_start":57,"line_end":57,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2737,"byte_end":2739,"line_start":60,"line_end":60,"column_start":10,"column_end":12},"name":"Ok","qualname":"::future::TryFuture::Ok","value":"type Ok;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2671,"byte_end":2727,"line_start":59,"line_end":59,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2803,"byte_end":2808,"line_start":63,"line_end":63,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::TryFuture::Error","value":"type Error;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2746,"byte_end":2793,"line_start":62,"line_end":62,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3058,"byte_end":3066,"line_start":70,"line_end":70,"column_start":8,"column_end":16},"name":"try_poll","qualname":"::future::TryFuture::try_poll","value":"fn try_poll<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Result<Self::Ok, Self::Error>>","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Poll this `TryFuture` as if it were a `Future`.","sig":null,"attributes":[{"value":"/ Poll this `TryFuture` as if it were a `Future`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2815,"byte_end":2866,"line_start":65,"line_end":65,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2871,"byte_end":2874,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2879,"byte_end":2955,"line_start":67,"line_end":67,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Future` trait; in the future it won't be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2960,"byte_end":3034,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3039,"byte_end":3050,"line_start":69,"line_end":69,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3298,"byte_end":3306,"line_start":81,"line_end":81,"column_start":8,"column_end":16},"name":"try_poll","qualname":"<F as future::TryFuture>::try_poll","value":"fn try_poll<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Self::Output>","parent":{"krate":0,"index":44},"children":[],"decl_id":{"krate":0,"index":47},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3281,"byte_end":3290,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3571,"byte_end":3584,"line_start":92,"line_end":92,"column_start":12,"column_end":25},"name":"is_terminated","qualname":"<Box<F> as future::FusedFuture>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":{"krate":0,"index":28},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3788,"byte_end":3801,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"is_terminated","qualname":"<std::panic::AssertUnwindSafe<F> as future::FusedFuture>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":{"krate":0,"index":28},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":76},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":105},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":138}],"decl_id":null,"docs":" Asynchronous streams.\n","sig":null,"attributes":[{"value":"/ Asynchronous streams.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":3893,"byte_end":3918,"line_start":1,"line_end":1,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":90},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4174,"byte_end":4183,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"BoxStream","qualname":"::stream::BoxStream","value":"Pin<alloc::boxed::Box<dyn Stream<Item = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Stream`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Stream`] for use in cases where you can't","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":3999,"byte_end":4073,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4074,"byte_end":4138,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4139,"byte_end":4164,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":93},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4340,"byte_end":4354,"line_start":14,"line_end":14,"column_start":10,"column_end":24},"name":"LocalBoxStream","qualname":"::stream::LocalBoxStream","value":"Pin<alloc::boxed::Box<dyn Stream<Item = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxStream`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxStream`, but without the `Send` requirement.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4252,"byte_end":4304,"line_start":12,"line_end":12,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4305,"byte_end":4330,"line_start":13,"line_end":13,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":96},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4961,"byte_end":4967,"line_start":27,"line_end":27,"column_start":11,"column_end":17},"name":"Stream","qualname":"::stream::Stream","value":"Stream","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"decl_id":null,"docs":" A stream of values produced asynchronously.","sig":null,"attributes":[{"value":"/ A stream of values produced asynchronously.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4416,"byte_end":4463,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4464,"byte_end":4467,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If `Future<Output = T>` is an asynchronous version of `T`, then `Stream<Item","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4468,"byte_end":4548,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ = T>` is an asynchronous version of `Iterator<Item = T>`. A stream","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4549,"byte_end":4619,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ represents a sequence of value-producing events that occur asynchronously to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4620,"byte_end":4700,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the caller.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4701,"byte_end":4716,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4717,"byte_end":4720,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The trait is modeled after `Future`, but allows `poll_next` to be called","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4721,"byte_end":4797,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ even after a value has been produced, yielding `None` once the stream has","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4798,"byte_end":4875,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ been fully exhausted.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4876,"byte_end":4901,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4902,"byte_end":4950,"line_start":26,"line_end":26,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":97},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5017,"byte_end":5021,"line_start":29,"line_end":29,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::Stream::Item","value":"type Item;","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Values yielded by the stream.\n","sig":null,"attributes":[{"value":"/ Values yielded by the stream.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":4974,"byte_end":5007,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6737,"byte_end":6746,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"poll_next","qualname":"::stream::Stream::poll_next","value":"fn poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<Self::Item>>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Attempt to pull out the next value of this stream, registering the\n current task for wakeup if the value is not yet available, and returning\n `None` if the stream is exhausted.","sig":null,"attributes":[{"value":"/ Attempt to pull out the next value of this stream, registering the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5028,"byte_end":5098,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ current task for wakeup if the value is not yet available, and returning","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5103,"byte_end":5179,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ `None` if the stream is exhausted.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5184,"byte_end":5222,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5227,"byte_end":5230,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5235,"byte_end":5253,"line_start":35,"line_end":35,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5258,"byte_end":5261,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ There are several possible return values, each indicating a distinct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5266,"byte_end":5338,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ stream state:","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5343,"byte_end":5360,"line_start":38,"line_end":38,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5365,"byte_end":5368,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Pending` means that this stream's next value is not ready","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5373,"byte_end":5443,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ yet. Implementations will ensure that the current task will be notified","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5448,"byte_end":5523,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ when the next value may be ready.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5528,"byte_end":5565,"line_start":42,"line_end":42,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5570,"byte_end":5573,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Some(val))` means that the stream has successfully","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5578,"byte_end":5647,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ produced a value, `val`, and may produce further values on subsequent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5652,"byte_end":5725,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ `poll_next` calls.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5730,"byte_end":5752,"line_start":46,"line_end":46,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5757,"byte_end":5760,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(None)` means that the stream has terminated, and","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5765,"byte_end":5832,"line_start":48,"line_end":48,"column_start":5,"column_end":72}},{"value":"/ `poll_next` should not be invoked again.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5837,"byte_end":5881,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5886,"byte_end":5889,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5894,"byte_end":5906,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5911,"byte_end":5914,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Once a stream has finished (returned `Ready(None)` from `poll_next`), calling its","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":5919,"byte_end":6004,"line_start":53,"line_end":53,"column_start":5,"column_end":90}},{"value":"/ `poll_next` method again may panic, block forever, or cause other kinds of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6009,"byte_end":6087,"line_start":54,"line_end":54,"column_start":5,"column_end":83}},{"value":"/ problems; the `Stream` trait places no requirements on the effects of","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6092,"byte_end":6165,"line_start":55,"line_end":55,"column_start":5,"column_end":78}},{"value":"/ such a call. However, as the `poll_next` method is not marked `unsafe`,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6170,"byte_end":6245,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ Rust's usual rules apply: calls must never cause undefined behavior","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6250,"byte_end":6321,"line_start":57,"line_end":57,"column_start":5,"column_end":76}},{"value":"/ (memory corruption, incorrect use of `unsafe` functions, or the like),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6326,"byte_end":6400,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"/ regardless of the stream's state.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6405,"byte_end":6442,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6447,"byte_end":6450,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ If this is difficult to guard against then the [`fuse`] adapter can be used","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6455,"byte_end":6534,"line_start":61,"line_end":61,"column_start":5,"column_end":84}},{"value":"/ to ensure that `poll_next` always returns `Ready(None)` in subsequent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6539,"byte_end":6612,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ calls.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6617,"byte_end":6627,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6632,"byte_end":6635,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ [`fuse`]: https://docs.rs/futures/0.3/futures/stream/trait.StreamExt.html#method.fuse","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6640,"byte_end":6729,"line_start":65,"line_end":65,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8131,"byte_end":8140,"line_start":95,"line_end":95,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::stream::Stream::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Returns the bounds on the remaining length of the stream.","sig":null,"attributes":[{"value":"/ Returns the bounds on the remaining length of the stream.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6825,"byte_end":6886,"line_start":68,"line_end":68,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6891,"byte_end":6894,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Specifically, `size_hint()` returns a tuple where the first element","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6899,"byte_end":6970,"line_start":70,"line_end":70,"column_start":5,"column_end":76}},{"value":"/ is the lower bound, and the second element is the upper bound.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":6975,"byte_end":7041,"line_start":71,"line_end":71,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7046,"byte_end":7049,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ The second half of the tuple that is returned is an [`Option`]`<`[`usize`]`>`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7054,"byte_end":7136,"line_start":73,"line_end":73,"column_start":5,"column_end":87}},{"value":"/ A [`None`] here means that either there is no known upper bound, or the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7141,"byte_end":7216,"line_start":74,"line_end":74,"column_start":5,"column_end":80}},{"value":"/ upper bound is larger than [`usize`].","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7221,"byte_end":7262,"line_start":75,"line_end":75,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7267,"byte_end":7270,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Implementation notes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7275,"byte_end":7301,"line_start":77,"line_end":77,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7306,"byte_end":7309,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ It is not enforced that a stream implementation yields the declared","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7314,"byte_end":7385,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ number of elements. A buggy stream may yield less than the lower bound","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7390,"byte_end":7464,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ or more than the upper bound of elements.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7469,"byte_end":7514,"line_start":81,"line_end":81,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7519,"byte_end":7522,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ `size_hint()` is primarily intended to be used for optimizations such as","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7527,"byte_end":7603,"line_start":83,"line_end":83,"column_start":5,"column_end":81}},{"value":"/ reserving space for the elements of the stream, but must not be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7608,"byte_end":7675,"line_start":84,"line_end":84,"column_start":5,"column_end":72}},{"value":"/ trusted to e.g., omit bounds checks in unsafe code. An incorrect","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7680,"byte_end":7748,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/ implementation of `size_hint()` should not lead to memory safety","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7753,"byte_end":7821,"line_start":86,"line_end":86,"column_start":5,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7826,"byte_end":7841,"line_start":87,"line_end":87,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7846,"byte_end":7849,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ That said, the implementation should provide a correct estimation,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7854,"byte_end":7924,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ because otherwise it would be a violation of the trait's protocol.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":7929,"byte_end":7999,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8004,"byte_end":8007,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ The default implementation returns `(0, `[`None`]`)` which is correct for any","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8012,"byte_end":8093,"line_start":92,"line_end":92,"column_start":5,"column_end":86}},{"value":"/ stream.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8098,"byte_end":8109,"line_start":93,"line_end":93,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8114,"byte_end":8123,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8289,"byte_end":8298,"line_start":103,"line_end":103,"column_start":8,"column_end":17},"name":"poll_next","qualname":"<&'_ mut S as stream::Stream>::poll_next","value":"fn poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<Self::Item>>","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8439,"byte_end":8448,"line_start":107,"line_end":107,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<&'_ mut S as stream::Stream>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":99},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8657,"byte_end":8666,"line_start":119,"line_end":119,"column_start":8,"column_end":17},"name":"poll_next","qualname":"<Pin<P> as stream::Stream>::poll_next","value":"fn poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<Self::Item>>","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8801,"byte_end":8810,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Pin<P> as stream::Stream>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":99},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9361,"byte_end":9372,"line_start":136,"line_end":136,"column_start":11,"column_end":22},"name":"FusedStream","qualname":"::stream::FusedStream","value":"FusedStream: Stream","parent":null,"children":[{"krate":0,"index":111}],"decl_id":null,"docs":" A stream which tracks whether or not the underlying stream\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A stream which tracks whether or not the underlying stream","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8884,"byte_end":8946,"line_start":128,"line_end":128,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8947,"byte_end":8978,"line_start":129,"line_end":129,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8979,"byte_end":8982,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8983,"byte_end":9061,"line_start":131,"line_end":131,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll_next` (or `try_poll_next`) returned","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9062,"byte_end":9140,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ `Poll::Ready(None)`. However, `is_terminated` may also return `true` if a","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9141,"byte_end":9218,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/ stream has become inactive and can no longer make progress and should be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9219,"byte_end":9295,"line_start":134,"line_end":134,"column_start":1,"column_end":77}},{"value":"/ ignored or dropped rather than being polled again.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9296,"byte_end":9350,"line_start":135,"line_end":135,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9455,"byte_end":9468,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::stream::FusedStream::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Returns `true` if the stream should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the stream should no longer be polled.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9387,"byte_end":9447,"line_start":137,"line_end":137,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9558,"byte_end":9571,"line_start":142,"line_end":142,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"<&'_ mut F as stream::FusedStream>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":{"krate":0,"index":111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9748,"byte_end":9761,"line_start":152,"line_end":152,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"<Pin<P> as stream::FusedStream>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":{"krate":0,"index":111},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":122},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9910,"byte_end":9916,"line_start":160,"line_end":160,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::stream::private_try_stream::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":127},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10138,"byte_end":10147,"line_start":167,"line_end":167,"column_start":11,"column_end":20},"name":"TryStream","qualname":"::stream::TryStream","value":"TryStream: Stream + private_try_stream::Sealed","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" A convenience for streams that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for streams that return `Result` values that includes","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10004,"byte_end":10075,"line_start":165,"line_end":165,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10076,"byte_end":10127,"line_start":166,"line_end":166,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":128},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10257,"byte_end":10259,"line_start":169,"line_end":169,"column_start":10,"column_end":12},"name":"Ok","qualname":"::stream::TryStream::Ok","value":"type Ok;","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10191,"byte_end":10247,"line_start":168,"line_end":168,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":129},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10323,"byte_end":10328,"line_start":172,"line_end":172,"column_start":10,"column_end":15},"name":"Error","qualname":"::stream::TryStream::Error","value":"type Error;","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10266,"byte_end":10313,"line_start":171,"line_end":171,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10578,"byte_end":10591,"line_start":179,"line_end":179,"column_start":8,"column_end":21},"name":"try_poll_next","qualname":"::stream::TryStream::try_poll_next","value":"fn try_poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<Result<Self::Ok, Self::Error>>>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Poll this `TryStream` as if it were a `Stream`.","sig":null,"attributes":[{"value":"/ Poll this `TryStream` as if it were a `Stream`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10335,"byte_end":10386,"line_start":174,"line_end":174,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10391,"byte_end":10394,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10399,"byte_end":10475,"line_start":176,"line_end":176,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Stream` trait; in the future it won't be","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10480,"byte_end":10554,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10559,"byte_end":10570,"line_start":178,"line_end":178,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10838,"byte_end":10851,"line_start":192,"line_end":192,"column_start":8,"column_end":21},"name":"try_poll_next","qualname":"<S as stream::TryStream>::try_poll_next","value":"fn try_poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<Result<Self::Ok, Self::Error>>>","parent":{"krate":0,"index":127},"children":[],"decl_id":{"krate":0,"index":130},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11189,"byte_end":11198,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"poll_next","qualname":"<Box<S> as stream::Stream>::poll_next","value":"fn poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<Self::Item>>","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11347,"byte_end":11356,"line_start":212,"line_end":212,"column_start":12,"column_end":21},"name":"size_hint","qualname":"<Box<S> as stream::Stream>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":99},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11576,"byte_end":11585,"line_start":221,"line_end":221,"column_start":12,"column_end":21},"name":"poll_next","qualname":"<std::panic::AssertUnwindSafe<S> as stream::Stream>::poll_next","value":"fn poll_next<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context)\n-> Poll<Option<S::Item>>","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11753,"byte_end":11762,"line_start":225,"line_end":225,"column_start":12,"column_end":21},"name":"size_hint","qualname":"<std::panic::AssertUnwindSafe<S> as stream::Stream>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":96},"children":[],"decl_id":{"krate":0,"index":99},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11924,"byte_end":11937,"line_start":231,"line_end":231,"column_start":12,"column_end":25},"name":"is_terminated","qualname":"<Box<S> as stream::FusedStream>::is_terminated","value":"fn is_terminated<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":{"krate":0,"index":111},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":167},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233}],"decl_id":null,"docs":" Task notification.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":774,"byte_end":786,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ Task notification.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12029,"byte_end":12051,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"__internal","qualname":"::task::__internal","value":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/mod.rs","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":217}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":197},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15701,"byte_end":15712,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"AtomicWaker","qualname":"::task::__internal::atomic_waker::AtomicWaker","value":"AtomicWaker {  }","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"decl_id":null,"docs":" A synchronization primitive for task wakeup.","sig":null,"attributes":[{"value":"/ A synchronization primitive for task wakeup.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":12966,"byte_end":13014,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13015,"byte_end":13018,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Sometimes the task interested in a given event will change over time.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13019,"byte_end":13092,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ An `AtomicWaker` can coordinate concurrent notifications with the consumer","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13093,"byte_end":13171,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ potentially \"updating\" the underlying task to wake up. This is useful in","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13172,"byte_end":13248,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ scenarios where a computation completes in another thread and wants to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13249,"byte_end":13323,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ notify the consumer, but the consumer is in the process of being migrated to","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13324,"byte_end":13404,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ a new logical task.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13405,"byte_end":13428,"line_start":21,"line_end":21,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13429,"byte_end":13432,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Consumers should call `register` before checking the result of a computation","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13433,"byte_end":13513,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ and producers should call `wake` after producing the computation (this","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13514,"byte_end":13588,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ differs from the usual `thread::park` pattern). It is also permitted for","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13589,"byte_end":13665,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ `wake` to be called **before** `register`. This results in a no-op.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13666,"byte_end":13737,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13738,"byte_end":13741,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A single `AtomicWaker` may be reused for any number of calls to `register` or","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13742,"byte_end":13823,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ `wake`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13824,"byte_end":13835,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13836,"byte_end":13839,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Memory ordering","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13840,"byte_end":13861,"line_start":31,"line_end":31,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13862,"byte_end":13865,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Calling `register` \"acquires\" all memory \"released\" by calls to `wake`","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13866,"byte_end":13940,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ before the call to `register`.  Later calls to `wake` will wake the","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":13941,"byte_end":14012,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ registered waker (on contention this wake might be triggered in `register`).","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14013,"byte_end":14093,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14094,"byte_end":14097,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ For concurrent calls to `register` (should be avoided) the ordering is only","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14098,"byte_end":14177,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ guaranteed for the winning call.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14178,"byte_end":14214,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14215,"byte_end":14218,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14219,"byte_end":14233,"line_start":40,"line_end":40,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14234,"byte_end":14237,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Here is a simple example providing a `Flag` that can be signalled manually","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14238,"byte_end":14316,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ when it is ready.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14317,"byte_end":14338,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14339,"byte_end":14342,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14343,"byte_end":14350,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ use futures::future::Future;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14351,"byte_end":14383,"line_start":46,"line_end":46,"column_start":1,"column_end":33}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14384,"byte_end":14436,"line_start":47,"line_end":47,"column_start":1,"column_end":53}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14437,"byte_end":14460,"line_start":48,"line_end":48,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14461,"byte_end":14499,"line_start":49,"line_end":49,"column_start":1,"column_end":39}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14500,"byte_end":14545,"line_start":50,"line_end":50,"column_start":1,"column_end":46}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14546,"byte_end":14568,"line_start":51,"line_end":51,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14569,"byte_end":14572,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ struct Inner {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14573,"byte_end":14591,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14592,"byte_end":14619,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/     set: AtomicBool,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14620,"byte_end":14644,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14645,"byte_end":14650,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14651,"byte_end":14654,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone)]","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14655,"byte_end":14675,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/ struct Flag(Arc<Inner>);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14676,"byte_end":14704,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14705,"byte_end":14708,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ impl Flag {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14709,"byte_end":14724,"line_start":61,"line_end":61,"column_start":1,"column_end":16}},{"value":"/     pub fn new() -> Self {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14725,"byte_end":14755,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/         Self(Arc::new(Inner {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14756,"byte_end":14789,"line_start":63,"line_end":63,"column_start":1,"column_end":34}},{"value":"/             waker: AtomicWaker::new(),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14790,"byte_end":14832,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/             set: AtomicBool::new(false),","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14833,"byte_end":14877,"line_start":65,"line_end":65,"column_start":1,"column_end":45}},{"value":"/         }))","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14878,"byte_end":14893,"line_start":66,"line_end":66,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14894,"byte_end":14903,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14904,"byte_end":14907,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/     pub fn signal(&self) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14908,"byte_end":14938,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/         self.0.set.store(true, Relaxed);","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14939,"byte_end":14983,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/         self.0.waker.wake();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":14984,"byte_end":15016,"line_start":71,"line_end":71,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15017,"byte_end":15026,"line_start":72,"line_end":72,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15027,"byte_end":15032,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15033,"byte_end":15036,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ impl Future for Flag {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15037,"byte_end":15063,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/     type Output = ();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15064,"byte_end":15089,"line_start":76,"line_end":76,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15090,"byte_end":15093,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15094,"byte_end":15167,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/         // quick check to avoid registration if already done.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15168,"byte_end":15233,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15234,"byte_end":15275,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/             return Poll::Ready(());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15276,"byte_end":15315,"line_start":81,"line_end":81,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15316,"byte_end":15329,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15330,"byte_end":15333,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/         self.0.waker.register(cx.waker());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15334,"byte_end":15380,"line_start":84,"line_end":84,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15381,"byte_end":15384,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/         // Need to check condition **after** `register` to avoid a race","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15385,"byte_end":15460,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/         // condition that would result in lost notifications.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15461,"byte_end":15526,"line_start":87,"line_end":87,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15527,"byte_end":15568,"line_start":88,"line_end":88,"column_start":1,"column_end":42}},{"value":"/             Poll::Ready(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15569,"byte_end":15600,"line_start":89,"line_end":89,"column_start":1,"column_end":32}},{"value":"/         } else {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15601,"byte_end":15621,"line_start":90,"line_end":90,"column_start":1,"column_end":21}},{"value":"/             Poll::Pending","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15622,"byte_end":15651,"line_start":91,"line_end":91,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15652,"byte_end":15665,"line_start":92,"line_end":92,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15666,"byte_end":15675,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15676,"byte_end":15681,"line_start":94,"line_end":94,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":15682,"byte_end":15689,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20777,"byte_end":20780,"line_start":207,"line_end":207,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicWaker>::new","value":"const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `AtomicWaker`.\n","sig":null,"attributes":[{"value":"/ Create an `AtomicWaker`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20731,"byte_end":20759,"line_start":206,"line_end":206,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":23033,"byte_end":23041,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"register","qualname":"<AtomicWaker>::register","value":"fn register<'_, '_>(&'_ Self, &'_ Waker)","parent":null,"children":[],"decl_id":null,"docs":" Registers the waker to be notified on calls to `wake`.","sig":null,"attributes":[{"value":"/ Registers the waker to be notified on calls to `wake`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20995,"byte_end":21053,"line_start":215,"line_end":215,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21058,"byte_end":21061,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ The new task will take place of any previous tasks that were registered","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21066,"byte_end":21141,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ by previous calls to `register`. Any calls to `wake` that happen after","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21146,"byte_end":21220,"line_start":218,"line_end":218,"column_start":5,"column_end":79}},{"value":"/ a call to `register` (as defined by the memory ordering rules), will","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21225,"byte_end":21297,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ notify the `register` caller's task and deregister the waker from future","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21302,"byte_end":21378,"line_start":220,"line_end":220,"column_start":5,"column_end":81}},{"value":"/ notifications. Because of this, callers should ensure `register` gets","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21383,"byte_end":21456,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/ invoked with a new `Waker` **each** time they require a wakeup.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21461,"byte_end":21528,"line_start":222,"line_end":222,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21533,"byte_end":21536,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ It is safe to call `register` with multiple other threads concurrently","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21541,"byte_end":21615,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ calling `wake`. This will result in the `register` caller's current","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21620,"byte_end":21691,"line_start":225,"line_end":225,"column_start":5,"column_end":76}},{"value":"/ task being notified once.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21696,"byte_end":21725,"line_start":226,"line_end":226,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21730,"byte_end":21733,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This function is safe to call concurrently, but this is generally a bad","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21738,"byte_end":21813,"line_start":228,"line_end":228,"column_start":5,"column_end":80}},{"value":"/ idea. Concurrent calls to `register` will attempt to register different","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21818,"byte_end":21893,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ tasks to be notified. One of the callers will win and have its task set,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21898,"byte_end":21974,"line_start":230,"line_end":230,"column_start":5,"column_end":81}},{"value":"/ but there is no guarantee as to which caller will succeed.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":21979,"byte_end":22041,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22046,"byte_end":22049,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22054,"byte_end":22068,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22073,"byte_end":22076,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Here is how `register` is used when implementing a flag.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22081,"byte_end":22141,"line_start":235,"line_end":235,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22146,"byte_end":22149,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22154,"byte_end":22161,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/ use futures::future::Future;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22166,"byte_end":22198,"line_start":238,"line_end":238,"column_start":5,"column_end":37}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22203,"byte_end":22255,"line_start":239,"line_end":239,"column_start":5,"column_end":57}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22260,"byte_end":22298,"line_start":240,"line_end":240,"column_start":5,"column_end":43}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22303,"byte_end":22348,"line_start":241,"line_end":241,"column_start":5,"column_end":50}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22353,"byte_end":22375,"line_start":242,"line_end":242,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22380,"byte_end":22383,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ struct Flag {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22388,"byte_end":22405,"line_start":244,"line_end":244,"column_start":5,"column_end":22}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22410,"byte_end":22437,"line_start":245,"line_end":245,"column_start":5,"column_end":32}},{"value":"/     set: AtomicBool,","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22442,"byte_end":22466,"line_start":246,"line_end":246,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22471,"byte_end":22476,"line_start":247,"line_end":247,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22481,"byte_end":22484,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ impl Future for Flag {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22489,"byte_end":22515,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/     type Output = ();","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22520,"byte_end":22545,"line_start":250,"line_end":250,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22550,"byte_end":22553,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22558,"byte_end":22631,"line_start":252,"line_end":252,"column_start":5,"column_end":78}},{"value":"/         // Register **before** checking `set` to avoid a race condition","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22636,"byte_end":22711,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"/         // that would result in lost notifications.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22716,"byte_end":22771,"line_start":254,"line_end":254,"column_start":5,"column_end":60}},{"value":"/         self.waker.register(cx.waker());","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22776,"byte_end":22820,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22825,"byte_end":22828,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/         if self.set.load(Relaxed) {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22833,"byte_end":22872,"line_start":257,"line_end":257,"column_start":5,"column_end":44}},{"value":"/             Poll::Ready(())","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22877,"byte_end":22908,"line_start":258,"line_end":258,"column_start":5,"column_end":36}},{"value":"/         } else {","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22913,"byte_end":22933,"line_start":259,"line_end":259,"column_start":5,"column_end":25}},{"value":"/             Poll::Pending","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22938,"byte_end":22967,"line_start":260,"line_end":260,"column_start":5,"column_end":34}},{"value":"/         }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22972,"byte_end":22985,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":22990,"byte_end":22999,"line_start":262,"line_end":262,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":23004,"byte_end":23009,"line_start":263,"line_end":263,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":23014,"byte_end":23021,"line_start":264,"line_end":264,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":27968,"byte_end":27972,"line_start":363,"line_end":363,"column_start":12,"column_end":16},"name":"wake","qualname":"<AtomicWaker>::wake","value":"fn wake<'_>(&'_ Self)","parent":null,"children":[],"decl_id":null,"docs":" Calls `wake` on the last `Waker` passed to `register`.","sig":null,"attributes":[{"value":"/ Calls `wake` on the last `Waker` passed to `register`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":27819,"byte_end":27877,"line_start":360,"line_end":360,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":27882,"byte_end":27885,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ If `register` has not been called yet, then this does nothing.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":27890,"byte_end":27956,"line_start":362,"line_end":362,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28468,"byte_end":28472,"line_start":377,"line_end":377,"column_start":12,"column_end":16},"name":"take","qualname":"<AtomicWaker>::take","value":"fn take<'_>(&'_ Self) -> Option<Waker>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last `Waker` passed to `register`, so that the user can wake it.","sig":null,"attributes":[{"value":"/ Returns the last `Waker` passed to `register`, so that the user can wake it.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28072,"byte_end":28152,"line_start":369,"line_end":369,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28157,"byte_end":28160,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28165,"byte_end":28168,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ Sometimes, just waking the AtomicWaker is not fine grained enough. This allows the user","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28173,"byte_end":28264,"line_start":372,"line_end":372,"column_start":5,"column_end":96}},{"value":"/ to take the waker and then wake it separately, rather than performing both steps in one","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28269,"byte_end":28360,"line_start":373,"line_end":373,"column_start":5,"column_end":96}},{"value":"/ atomic action.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28365,"byte_end":28383,"line_start":374,"line_end":374,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28388,"byte_end":28391,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If a waker has not been registered, this returns `None`.","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":28396,"byte_end":28456,"line_start":376,"line_end":376,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29620,"byte_end":29627,"line_start":409,"line_end":409,"column_start":8,"column_end":15},"name":"default","qualname":"<AtomicWaker as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29710,"byte_end":29713,"line_start":415,"line_end":415,"column_start":8,"column_end":11},"name":"fmt","qualname":"<AtomicWaker as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2151,"byte_end":2154,"line_start":38,"line_end":38,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2428,"byte_end":2429,"line_start":53,"line_end":53,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3182,"byte_end":3183,"line_start":73,"line_end":73,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3551,"byte_end":3554,"line_start":91,"line_end":91,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3755,"byte_end":3771,"line_start":98,"line_end":98,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8541,"byte_end":8544,"line_start":112,"line_end":112,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9673,"byte_end":9676,"line_start":147,"line_end":147,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9950,"byte_end":9951,"line_start":162,"line_end":162,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10738,"byte_end":10739,"line_start":185,"line_end":185,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11139,"byte_end":11142,"line_start":205,"line_end":205,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11513,"byte_end":11529,"line_start":218,"line_end":218,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11904,"byte_end":11907,"line_start":230,"line_end":230,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20713,"byte_end":20724,"line_start":205,"line_end":205,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20894,"byte_end":20899,"line_start":210,"line_end":210,"column_start":29,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29599,"byte_end":29610,"line_start":408,"line_end":408,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29689,"byte_end":29700,"line_start":414,"line_end":414,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29829,"byte_end":29840,"line_start":420,"line_end":420,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29865,"byte_end":29876,"line_start":421,"line_end":421,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":600,"byte_end":606,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":691,"byte_end":697,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":76}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/lib.rs","byte_start":795,"byte_end":799,"line_start":27,"line_end":27,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":167}},{"kind":"Mod","span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/mod.rs","byte_start":12100,"byte_end":12110,"line_start":7,"line_end":7,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":170}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":1841,"byte_end":1847,"line_start":27,"line_end":27,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":13770},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2151,"byte_end":2154,"line_start":38,"line_end":38,"column_start":25,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":40983},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2428,"byte_end":2429,"line_start":53,"line_end":53,"column_start":30,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":41},"to":{"krate":0,"index":39}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2629,"byte_end":2635,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":13770},"to":{"krate":0,"index":44}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":2658,"byte_end":2664,"line_start":58,"line_end":58,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":39},"to":{"krate":0,"index":44}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3182,"byte_end":3183,"line_start":73,"line_end":73,"column_start":29,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":49},"to":{"krate":0,"index":44}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3551,"byte_end":3554,"line_start":91,"line_end":91,"column_start":59,"column_end":62},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":432},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/future.rs","byte_start":3755,"byte_end":3771,"line_start":98,"line_end":98,"column_start":54,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":9262},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":8541,"byte_end":8544,"line_start":112,"line_end":112,"column_start":20,"column_end":23},"kind":{"Impl":{"id":5}},"from":{"krate":2,"index":40983},"to":{"krate":0,"index":96}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9374,"byte_end":9380,"line_start":136,"line_end":136,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":96},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9673,"byte_end":9676,"line_start":147,"line_end":147,"column_start":25,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":40983},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":9950,"byte_end":9951,"line_start":162,"line_end":162,"column_start":30,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":124},"to":{"krate":0,"index":122}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10149,"byte_end":10155,"line_start":167,"line_end":167,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":96},"to":{"krate":0,"index":127}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10178,"byte_end":10184,"line_start":167,"line_end":167,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":122},"to":{"krate":0,"index":127}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":10738,"byte_end":10739,"line_start":185,"line_end":185,"column_start":29,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":132},"to":{"krate":0,"index":127}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11139,"byte_end":11142,"line_start":205,"line_end":205,"column_start":49,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":5,"index":432},"to":{"krate":0,"index":96}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11513,"byte_end":11529,"line_start":218,"line_end":218,"column_start":44,"column_end":60},"kind":{"Impl":{"id":10}},"from":{"krate":2,"index":9262},"to":{"krate":0,"index":96}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/stream.rs","byte_start":11904,"byte_end":11907,"line_start":230,"line_end":230,"column_start":59,"column_end":62},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":432},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20713,"byte_end":20724,"line_start":205,"line_end":205,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20858,"byte_end":20862,"line_start":209,"line_end":209,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3275},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":20894,"byte_end":20899,"line_start":210,"line_end":210,"column_start":29,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":2,"index":14082},"to":{"krate":0,"index":205}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29599,"byte_end":29610,"line_start":408,"line_end":408,"column_start":18,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29689,"byte_end":29700,"line_start":414,"line_end":414,"column_start":21,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29829,"byte_end":29840,"line_start":420,"line_end":420,"column_start":22,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":3263}},{"span":{"file_name":"/Users/es/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.28/src/task/__internal/atomic_waker.rs","byte_start":29865,"byte_end":29876,"line_start":421,"line_end":421,"column_start":22,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":3275}}]}