// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grapevineer.proto

package grapevineer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Grapevineer_GetOGImage_FullMethodName             = "/grapevineer.Grapevineer/GetOGImage"
	Grapevineer_GetFlowerMeaningByDate_FullMethodName = "/grapevineer.Grapevineer/GetFlowerMeaningByDate"
)

// GrapevineerClient is the client API for Grapevineer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrapevineerClient interface {
	GetOGImage(ctx context.Context, in *GetOGImageRequest, opts ...grpc.CallOption) (*GetOGImageResponse, error)
	GetFlowerMeaningByDate(ctx context.Context, in *GetFlowerMeaningByDateRequest, opts ...grpc.CallOption) (*GetFlowerMeaningByDateResponse, error)
}

type grapevineerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrapevineerClient(cc grpc.ClientConnInterface) GrapevineerClient {
	return &grapevineerClient{cc}
}

func (c *grapevineerClient) GetOGImage(ctx context.Context, in *GetOGImageRequest, opts ...grpc.CallOption) (*GetOGImageResponse, error) {
	out := new(GetOGImageResponse)
	err := c.cc.Invoke(ctx, Grapevineer_GetOGImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grapevineerClient) GetFlowerMeaningByDate(ctx context.Context, in *GetFlowerMeaningByDateRequest, opts ...grpc.CallOption) (*GetFlowerMeaningByDateResponse, error) {
	out := new(GetFlowerMeaningByDateResponse)
	err := c.cc.Invoke(ctx, Grapevineer_GetFlowerMeaningByDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrapevineerServer is the server API for Grapevineer service.
// All implementations must embed UnimplementedGrapevineerServer
// for forward compatibility
type GrapevineerServer interface {
	GetOGImage(context.Context, *GetOGImageRequest) (*GetOGImageResponse, error)
	GetFlowerMeaningByDate(context.Context, *GetFlowerMeaningByDateRequest) (*GetFlowerMeaningByDateResponse, error)
	mustEmbedUnimplementedGrapevineerServer()
}

// UnimplementedGrapevineerServer must be embedded to have forward compatible implementations.
type UnimplementedGrapevineerServer struct {
}

func (UnimplementedGrapevineerServer) GetOGImage(context.Context, *GetOGImageRequest) (*GetOGImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOGImage not implemented")
}
func (UnimplementedGrapevineerServer) GetFlowerMeaningByDate(context.Context, *GetFlowerMeaningByDateRequest) (*GetFlowerMeaningByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowerMeaningByDate not implemented")
}
func (UnimplementedGrapevineerServer) mustEmbedUnimplementedGrapevineerServer() {}

// UnsafeGrapevineerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrapevineerServer will
// result in compilation errors.
type UnsafeGrapevineerServer interface {
	mustEmbedUnimplementedGrapevineerServer()
}

func RegisterGrapevineerServer(s grpc.ServiceRegistrar, srv GrapevineerServer) {
	s.RegisterService(&Grapevineer_ServiceDesc, srv)
}

func _Grapevineer_GetOGImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOGImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrapevineerServer).GetOGImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grapevineer_GetOGImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrapevineerServer).GetOGImage(ctx, req.(*GetOGImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grapevineer_GetFlowerMeaningByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowerMeaningByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrapevineerServer).GetFlowerMeaningByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grapevineer_GetFlowerMeaningByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrapevineerServer).GetFlowerMeaningByDate(ctx, req.(*GetFlowerMeaningByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grapevineer_ServiceDesc is the grpc.ServiceDesc for Grapevineer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grapevineer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grapevineer.Grapevineer",
	HandlerType: (*GrapevineerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOGImage",
			Handler:    _Grapevineer_GetOGImage_Handler,
		},
		{
			MethodName: "GetFlowerMeaningByDate",
			Handler:    _Grapevineer_GetFlowerMeaningByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grapevineer.proto",
}
